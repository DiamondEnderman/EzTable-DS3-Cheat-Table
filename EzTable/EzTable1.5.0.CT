<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="45">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Open Table &lt;--"</Description>
      <Options moHideChildren="1"/>
      <Color>800080</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//Table Created By DiamondEnderman
//Some Ideas and Addresses Taken from AgRuN and TGA Tables

[enable]
{$asm}
//POINTER HEADERS(FROM AGRUN TABLE)
define(XA,1F90)
registerSymbol(XA)

define(XB,0x1FA0)
registerSymbol(XB)

define(GameDataMan,DarkSoulsIII.exe+47572B8)
registerSymbol(GameDataMan)

define(WorldChrMan,DarkSoulsIII.exe+477FDB8)
registerSymbol(WorldChrMan)

define(GameMan,DarkSoulsIII.exe+475AC00)
registerSymbol(GameMan)

define(FieldArea,DarkSoulsIII.exe+475ABD0)
registerSymbol(FieldArea)

define(FrpgNetMan,DarkSoulsIII.exe+4756E48)
registerSymbol(FrpgNetMan)

define(SprjDbgEvent,DarkSoulsIII.exe+4751EB8)
registerSymbol(SprjDbgEvent)

define(FdpClient,DarkSoulsIII.exe+478ECC0)
registerSymbol(FdpClient)

define(WorldChrManDbg,DarkSoulsIII.exe+477FEC8)
registerSymbol(WorldChrManDbg)

define(SoloParamRepository,DarkSoulsIII.exe+4798108)
registerSymbol(SoloParamRepository)

define(LockTgtMan,DarkSoulsIII.exe+477DBE0)
registerSymbol(LockTgtMan)

define(NearOnlyDraw,DarkSoulsIII.exe+477D495)
registerSymbol(NearOnlyDraw)

define(WorldChrManDbg_Flags,DarkSoulsIII.exe+477FE94)
registerSymbol(WorldChrManDbg_Flags)

define(GameFlagData,DarkSoulsIII.exe+4752F68)
registerSymbol(GameFlagData)

define(FrpgSessionManager,DarkSoulsIII.exe+4763F38)
registerSymbol(FrpgSessionManager)

define(NewMenuSystem,DarkSoulsIII.exe+478DA50)
registerSymbol(NewMenuSystem)

define(MenuMan,DarkSoulsIII.exe+4763258)
registerSymbol(MenuMan)

define(WindWorld,DarkSoulsIII.exe+47914DF)
registerSymbol(WindWorld)

define(RendMan,DarkSoulsIII.exe+4796298)
registerSymbol(RendMan)

define(MapItemMan,DarkSoulsIII.exe+4769240)
registerSymbol(MapItemMan)

define(ThrowMan,DarkSoulsIII.exe+475A7A8)
registerSymbol(ThrowMan)

define(CSLoadBalancer,DarkSoulsIII.exe+479B9F8)
registerSymbol(CSLoadBalancer)

define(CSStayParamRepository,DarkSoulsIII.exe+4797618)
registerSymbol(CSStayParamRepository)

define(CSDlc,DarkSoulsIII.exe+479B880)
registerSymbol(CSDlc)

define(CSTrophy,DarkSoulsIII.exe+489D9C8)
registerSymbol(CSTrophy)

define(CSWindow,DarkSoulsIII.exe+489F118)
registerSymbol(CSWindow)

define(SprjFlipper,DarkSoulsIII.exe+489DD10)
registerSymbol(SprjFlipper)

define(SprjFade,DarkSoulsIII.exe+4791A48)
registerSymbol(SprjFade)

define(SprjSessionManager,DarkSoulsIII.exe+4796260)
registerSymbol(SprjSessionManager)

define(SprjHkBehManager,DarkSoulsIII.exe+4794B98)
registerSymbol(SprjHkBehManager)

define(SprjSound,DarkSoulsIII.exe+479A457)
registerSymbol(SprjSound)

define(SprjRemo,DarkSoulsIII.exe+4791258)
registerSymbol(SprjRemo)

define(SprjSfx,DarkSoulsIII.exe+4799CA8)
registerSymbol(SprjSfx)

define(SprjLuaEventMan,DarkSoulsIII.exe+4751B08)
registerSymbol(SprjLuaEventMan)

define(CSRegulationManager,DarkSoulsIII.exe+479B8B0)
registerSymbol(CSRegulationManager)

define(SprjBulletManager,DarkSoulsIII.exe+4789CA8)
registerSymbol(SprjBulletManager)

define(DamageMan,DarkSoulsIII.exe+477DAC0)
registerSymbol(DamageMan)

define(MsgRepository,DarkSoulsIII.exe+47972A0) // Completely Incompatible with AgRuN tables
registersymbol(MsgRepository)

{$lua}
if syntaxcheck then return end
----------------------------------------------
--[[MASTER POINTER SHEET]]
--Stats
emberPtr = "[[GameDataMan]+10]+100"
lastBonfireIdPtr = "[GameMan]+AD0"
lvlPtr = "[[GameDataMan]+10]+70"

player0HealthPtr = "[[[[WorldChrMan]+80]+XA]+18]+D8"--Player 0 (Yourself)
player0FpPtr = "[[[[WorldChrMan]+80]+XA]+18]+E4"
player0StamPtr = "[[[[WorldChrMan]+80]+XA]+18]+F0"
player0ChrTypePtr = "[[WorldChrMan]+70]+80"
player0TeamTypePtr = "[[WorldChrMan]+80]+74"

player1HealthPtr = "[[[[WorldChrMan]+40]+38]+1FA0]+18"--Player 1
player2HealthPtr = "[[[[WorldChrMan]+40]+70]+1FA0]+18"--Player 2
player3HealthPtr = "[[[[WorldChrMan]+40]+A8]+1FA0]+18"--Player 3
player4HealthPtr = "[[[[WorldChrMan]+40]+E0]+1FA0]+18"--Player 4
player5HealthPtr = "[[[[WorldChrMan]+40]+118]+1FA0]+18"--Player 5

--Animations
player0AnimPtr = "[[[[WorldChrMan]+80]+XA]+80]+C8" --Player 0 Current Animation
player1AnimPtr = "[[[[[WorldChrMan]+40]+38]+XA]+80]+C8"--Player 1 Current Animation
player2AnimPtr = "[[[[[WorldChrMan]+40]+38]+XA]+80]+C8"--Player 2 Current Animation
player3AnimPtr = "[[[[[WorldChrMan]+40]+38]+XA]+80]+C8"--Player 3 Current Animation
player4AnimPtr = "[[[[[WorldChrMan]+40]+38]+XA]+80]+C8"--Player 4 Current Animation
player5AnimPtr = "[[[[[WorldChrMan]+40]+38]+XA]+80]+C8"--Player 5 Current Animation

IdleAnimPtr = "[[[[WorldChrMan]+80]+XA]+58]+20"

--Coordinates
player0xCoordPtr = "[[[WorldChrMan]+40]+28]+80" --Player 0(Yourself)
player0zCoordPtr = "[[[WorldChrMan]+40]+28]+84"
player0yCoordPtr = "[[[WorldChrMan]+40]+28]+88"
player0AnglePtr = "[[[WorldChrMan]+40]+28]+74"

player1xCoordPtr = "[[[[[WorldChrMan]+40]+38]+18]+28]+80" --Player 1
player1zCoordPtr = "[[[[[WorldChrMan]+40]+38]+18]+28]+84"
player1yCoordPtr = "[[[[[WorldChrMan]+40]+38]+18]+28]+88"
player1AnglePtr = "[[[[[WorldChrMan]+40]+38]+18]+28]+74"

player1xCoordPtr = "[[[[[WorldChrMan]+40]+70]+18]+28]+80" --Player 2
player1zCoordPtr = "[[[[[WorldChrMan]+40]+70]+18]+28]+84"
player1yCoordPtr = "[[[[[WorldChrMan]+40]+70]+18]+28]+88"
player1AnglePtr = "[[[[[WorldChrMan]+40]+70]+18]+28]+74"

player1xCoordPtr = "[[[[[WorldChrMan]+40]+A8]+18]+28]+80" --Player 3
player1zCoordPtr = "[[[[[WorldChrMan]+40]+A8]+18]+28]+84"
player1yCoordPtr = "[[[[[WorldChrMan]+40]+A8]+18]+28]+88"
player1AnglePtr = "[[[[[WorldChrMan]+40]+A8]+18]+28]+74"

player1xCoordPtr = "[[[[[WorldChrMan]+40]+E0]+18]+28]+80" --Player 4
player1zCoordPtr = "[[[[[WorldChrMan]+40]+E0]+18]+28]+84"
player1yCoordPtr = "[[[[[WorldChrMan]+40]+E0]+18]+28]+88"
player1AnglePtr = "[[[[[WorldChrMan]+40]+E0]+18]+28]+74"

player1xCoordPtr = "[[[[[WorldChrMan]+40]+118]+18]+28]+80" --Player 5
player1zCoordPtr = "[[[[[WorldChrMan]+40]+118]+18]+28]+84"
player1yCoordPtr = "[[[[[WorldChrMan]+40]+118]+18]+28]+88"
player1AnglePtr = "[[[[[WorldChrMan]+40]+118]+18]+28]+74"

--Character Flags
noGoodsPtr = "[[WorldChrMan]+80]+1EEA"
--Debug
autoSummonPtr = "[[SprjSessionManager]+10]+181"
bulletParamPtr = "[Bullet]+380"
playerCountPtr = "[GameMan]+D38"
passwordPtr = "[[GameDataMan]+58]+34"
autoSavePtr = "[Gameman]+B10"
noDeadPtr = "[[[[WorldChrMan]+80]+1F90]+18]+1C0"
----------------------------------------------

--Attach to game
OpenProcess("DarkSoulsIII.exe")

--Disable and Enable Records (By ID)
function enableRecord(ID)
  local record = getAddressList().getMemoryRecordByID(ID)
  if record ~= nil then
    record.active = true
  else
    print("Invalid Record ID")
  end
end

function disableRecord(ID)
  local record = getAddressList().getMemoryRecordByID(ID)
  if record ~= nil then
    record.active = false
  else
    print("Invalid Record ID")
  end
end

--Function for AutoDisabling
function autoDisable(memrec, delay)
  delay = math.max(delay or 100, 100)
  if not memrec then end
  local t = createTimer(nil)
  t.Interval = delay
  t.OnTimer = function()
    memrec.active = false
    t.destroy()
  end
end

--toHex Function
function toHex(number)
  return string.format("%X",number)
end

--setbit Function
function setbit(addr_str, bit, value)
    local addr = getAddress(addr_str)
    writeBytes(addr + (bit &gt;&gt; 3), (readBytes(addr + (bit &gt;&gt; 3), 1) &amp; ~(1 &lt;&lt; (bit &amp; 7))) | (value &lt;&lt; (bit &amp; 7)))
end

--ApplyEffect
--Made by DiamondEnderman
--Args and AOB Aqcuired from InuNorii's ApplyEffect
local applyeffect_call = AOBScanModuleUnique(process,"C6 40 B0 00 C7") - 0x1D

function applyEffect(input)
  local pointer = readPointer("[WorldChrMan]+80")
  if type(input) == "number" then
    executeCodeEx(0, 100, applyeffect_call, pointer, input, pointer, 0, 0)
  elseif type(input) == "table" then
    for _,i in ipairs(input) do
      executeCodeEx(0, 100, applyeffect_call, pointer, i, pointer, 0, 0)
      sleep(100)
    end
  else print("Invalid Syntax, Must be a Number or Table")
  end
end

--BonfireWarp
function bonfireWarp(id)
  writeInteger(lastBonfireIdPtr, id)
  applyEffect(580)
end

--TeleportPlayer
function teleportPlayer(x, z, y, a)
  writeFloat(player0xPtr, x)
  writeFloat(player0zPtr, z)
  writeFloat(player0yPtr, y)
  writeFloat(player0AnglePtr, a)
end

--Enable Dependencies
local dependencyList = {
1337273494, --Gaming Mode + Ctrl F
251,        --Param Patcher
1337263895  --Improved ItemGib
}

local dependencyDelay = createTimer(getMainForm())
dependencyDelay.Interval = 500
dependencyDelay.OnTimer = function()
  for _,i in ipairs(dependencyList) do
    enableRecord(i)
    sleep(100)
  end
  dependencyDelay.destroy()
end

[disable]
{$asm}
unregisterSymbol(XA)
unregisterSymbol("GameDataMan")
unregisterSymbol("WorldChrMan")
unregisterSymbol("GameMan")
unregisterSymbol("FieldArea")
unregisterSymbol("SoloParamRepository")
unregisterSymbol("FrpgNetMan")
unregisterSymbol("FrpgNetMan")
unregisterSymbol("WorldChrManDbg")
unregisterSymbol("LockTgtMan")
unregisterSymbol("NearOnlyDraw")
unregisterSymbol("WorldChrManDbg_Flags")
unregisterSymbol("FdpClient")
unregisterSymbol("GameFlagData")
unregisterSymbol("FrpgSessionManager")
unregisterSymbol("NewMenuSystem")
unregisterSymbol("MenuMan")
unregisterSymbol("MsgRepository")
unregisterSymbol("WindWorld")
unregisterSymbol("RendMan")
unregisterSymbol("MapItemMan")
unregisterSymbol("ThrowMan")
unregisterSymbol("CSLoadBalancer")
unregisterSymbol("CSStayParamRepository")
unregisterSymbol("CSDlc")
unregisterSymbol("CSTrophy")
unregisterSymbol("CSWindow")
unregisterSymbol("SprjFlipper")
unregisterSymbol("SprjFade")
unregisterSymbol("SprjSessionManager")
unregisterSymbol("SprjHkBehManager")
unregisterSymbol("SprjSound")
unregisterSymbol("SprjRemo")
unregisterSymbol("SprjSfx")
unregisterSymbol("SprjLuaEventMan")
unregisterSymbol("CSRegulationManager")
unregisterSymbol("SprjBulletManager")
unregisterSymbol("DamageMan")
unregistersymbol(MsgRepository)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>1337290662</ID>
          <Description>"Utility"</Description>
          <Options moHideChildren="1"/>
          <Color>80FF80</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>2</ID>
              <Description>"Dependencies"</Description>
              <Options moHideChildren="1"/>
              <Color>FFFF00</Color>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>1337263853</ID>
                  <Description>"Scripts"</Description>
                  <Options moHideChildren="1"/>
                  <Color>80FF80</Color>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1337080822</ID>
                      <Description>"Param Patcher"</Description>
                      <Options moHideChildren="1"/>
                      <Color>80FF80</Color>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>1337081387</ID>
                          <Description>"Don't disable these!"</Description>
                          <Color>FF8000</Color>
                          <GroupHeader>1</GroupHeader>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>251</ID>
                          <Description>"Param Patcher v2.0.5"</Description>
                          <VariableType>Auto Assembler Script</VariableType>
                          <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

--[[START PatchInfo class
	Author: Igromanru
	Description: Entity with informations (address, value and valueType).
					Also enum TYPE, with all possible value types.
]]--
PatchInfo = {
	address = 0,
	value = 0,
	valueType = 0,
	binaryOffset = 0,
	BINARYOFFSET = {
		ONE = 1,
		TWO = 2,
		THREE = 4,
		FOUR = 8,
		FIVE = 16,
		SIX = 32,
		SEVEN = 64,
		EIGHT = 128,
	},
	TYPE = {
		BINARY = 0,
		BYTE = 1,
		TWO_BYTE = 2,
		FOUR_BYTE = 3,
		EIGHT_BYTE = 4,
		FLOAT = 5,
	}
}

function PatchInfo:new(address, value, valueType, binaryOffset)
	local o = {}
	setmetatable(o, self)
	self.__index = self
	if(address ~= nil) then
		o.address = address
	end
	if(value ~= nil) then
		o.value = value
	end
	if(valueType ~= nil) then
		o.valueType = valueType
	end
	if(binaryOffset ~= nil) then
		o.binaryOffset = binaryOffset
	end

	return o
end

function PatchInfo:getBinaryOffset(value)
	local result = value
	if(value == 0) then
		result = PatchInfo.BINARYOFFSET.ONE
	elseif(value == 1) then
		result = PatchInfo.BINARYOFFSET.TWO
	elseif(value == 2) then
		result = PatchInfo.BINARYOFFSET.THREE
	elseif(value == 3) then
		result = PatchInfo.BINARYOFFSET.FOUR
	elseif(value == 4) then
		result = PatchInfo.BINARYOFFSET.FIVE
	elseif(value == 5) then
		result = PatchInfo.BINARYOFFSET.SIX
	elseif(value == 6) then
		result = PatchInfo.BINARYOFFSET.SEVEN
	elseif(value == 7) then
		result = PatchInfo.BINARYOFFSET.EIGHT
	end
	return result
end

--[[END PatchInfo class]]--

--[[START ParamUtils class
	Author: Igromanru
	Description: Utils class for Params
]]--
ParamUtils = {
	masterParamTable = {},
	patchBackUp = {},
    patchBackUpOld = {},
}

function ParamUtils:new()
	local function readIntegerSafe(Input)
		local Value = readInteger(Input)
		if Value &lt; 2147483647 then
			return value
		else
			return Value - 0x100000000
		end
	end
	local function InitializeAddress()
      autoAssemble([[
        define(ParamPatch,[CSRegulationManager]+10)
        registerSymbol(ParamPatch)
      ]])
	end
	local o = {}
	setmetatable(o, self)
	self.__index = self

    InitializeAddress()
	o:paramIndexer()
	return o
end

function ParamUtils:destroy()
	unregisterSymbol("ParamPatch")
end

function ParamUtils:toHex(number, length)
	local result = ""
	if(length ~= nil and length &gt; 0) then
		result = string.format("%0"..length.."X",number)
	else
		result = string.format("%X",number)
	end
	return result
end

function ParamUtils:isEmpty(value)
  local result = value == nil
  if(not result) then
    if(type(value) == "string") then
	  result = value == ""
	elseif(type(value) == "table") then
	  result = true
	  for key,tabl in pairs(value) do
        result = key == nil
        break
      end
	end
  end
  return result
end

function ParamUtils:isNotEmpty(value)
  return not self:isEmpty(value)
end

function ParamUtils:logError(message)
	local output = "ParamUtils Error:\r\n"..message
	print(output)
	error(output)
end

function ParamUtils:paramIndexer()
	local Param = getAddress("ParamPatch")
	local Start = readQword(Param)
	local End = readQword(Param+8)
	local Count = (End-Start)/8
	self.masterParamTable = {}

	for i = 0, Count - 1 do
	  local ParamOffset = readQword(Start+i*8)
	  local ParamString = "Unknown"
	  if readInteger(ParamOffset+0x20) &gt; 7 then
		 ParamString = readString(readQword(ParamOffset+0x10),90,true)
	  else
		 ParamString = readString(ParamOffset+0x10,90,true)
	  end
	  self.masterParamTable[ParamString] = ParamOffset
	end
end

function ParamUtils:getParamAddress(param)
  return self.masterParamTable[param]
end

function ParamUtils:getIdAddress(idTable, Id)
	local result = idTable[Id]
	if(self:isEmpty(result) or result &lt; 0) then
		self:logError("ID: "..Id.." (0x"..self:toHex(Id) ..") couldn't be found")
	end
	return result
end

function ParamUtils:getIdFromAddress(idTable, address)
  local result = 0
  if(self:isNotEmpty(idTable) and self:isNotEmpty(address)) then
    for id,addr in pairs(idTable) do
	  if(addr == address) then
	    result = id
	    break
	  end
	end
  end
  if(result == 0) then
    self:logError("ID for address: "..self:toHex(address).." couldn't be found")
  end
  return result
end

function ParamUtils:getParamIdTable(ParamName)
	local IDTable = {}
	local ParamAddr = readQword(readQword(self.masterParamTable[ParamName]+0x68)+0x68)
	local TableCount = byteTableToWord(readBytes(ParamAddr+0xa,2,true))
	for i=0,TableCount-1 do
		local PID = readInteger(ParamAddr+0x40+0x18*i)
		local IDO = readInteger(ParamAddr+0x48+0x18*i)
		IDTable[PID] = ParamAddr + IDO
	end
	return IDTable
end

function ParamUtils:getIdAddressInParam(paramName, id)
	local result = 0
	local idTable = self:getParamIdTable(paramName)

	if(idTable ~= nil) then
		result = self:getIdAddress(idTable, id)
	else
		self:logError("Addresses for Param: '"..paramName.."' couldn't be found")
	end
	return result
end

function ParamUtils:getIdFromAddressInParam(paramName, address)
	local result = 0
	local idTable = self:getParamIdTable(paramName)

	if(self:isNotEmpty(idTable)) then
		result = self:getIdFromAddress(idTable, address)
	end
	return result
end

function ParamUtils:getIdByAddressInAnyParam(address)
  local result = 0
  if(self.masterParamTable ~= nil) then
    for param,paramAddr in pairs(self.masterParamTable) do
	  local idTable = self:getParamIdTable(param)
	  if(self:isNotEmpty(idTable)) then
		local id = self:getIdFromAddress(idTable, address)
		if(id &gt; 0) then
		  result = id
		  break
		end
	  end
	end
  end
  return result
end

function ParamUtils:getAllAddressFromParam(paramName)
	local result = {}
	local idTable = self:getParamIdTable(paramName)

	if(self:isNotEmpty(idTable)) then
		for id,address in pairs(idTable) do
			table.insert(result, address)
		end
	end
	return result
end

function ParamUtils:paramIterator(ParamName,ChangeTable,uuid)
	local IDTable = self:getParamIdTable(ParamName)
	if uuid ~= nil then --Make a table for backups
		if self.patchBackUpOld == nil then
			self.patchBackUpOld = {}
		end
		self.patchBackUpOld[uuid] = {}
		for k,v in pairs(ChangeTable) do
			local Backup = {}
			local _,DataLength = string.gsub(v[3], "%x+","")
			local idAddress = self:getIdAddress(IDTable,v[1])
			if self:isNotEmpty(idAddress) then
				Backup[1] = idAddress + v[2]
				Backup[2] = readBytes(Backup[1],DataLength,true)
				table.insert(self.patchBackUpOld[uuid],Backup)
				self:paramPatcher(idAddress,v[2],v[3],v[4])
			end
		end
	else
		for k,v in pairs(ChangeTable) do
			local idAddress = self:getIdAddress(IDTable,v[1])
			if self:isNotEmpty(idAddress) then
				self:paramPatcher(idAddress,v[2],v[3],v[4])
			end
		end
	end
end

function ParamUtils:paramPatcher(idAddress,DataOffset,Data,Symbol)
	local WriteAddr = idAddress+DataOffset
	local HexTable = {}
	if Symbol == nil then
		for word in string.gmatch(Data, "%x+") do table.insert(HexTable,tonumber(word,16)) end
		writeBytes(WriteAddr,HexTable)
	else
		registerSymbol(Symbol,WriteAddr,true)
	end
end

function ParamUtils:paramDepatcher(uuid)
  if(self.patchBackUpOld[uuid] ~= nil) then
    for k,v in pairs(self.patchBackUpOld[uuid]) do
	  if(self:isNotEmpty(v)) then
        writeBytes(v[1],v[2])
	  end
    end
    self.patchBackUpOld[uuid] = nil
  end
end

function ParamUtils:patchMultipleOffsets(paramName, id, patchInfoTable, uuid)
	if(self.patchBackUp[uuid] == nil) then
		local address = getIdAddressInParam()
		for key,patchInfo in pairs(patchInfoTable) do
			patchInfo.address = address
			self:patchValueWithBackup(patchInfo,uuid)
		end
	else
        self:logError("The UUID "..uuid.." is already in use.")
	end
end

function ParamUtils:restore(...)
  local arg = table.pack(...)
  for key,uuid in pairs(arg) do
    if(self:isNotEmpty(self.patchBackUp[uuid])) then
      for index,patchInfo in pairs(self.patchBackUp[uuid]) do
	    self:patchValue(patchInfo)
	  end
	  self.patchBackUp[uuid] = nil
	end
  end
end

function ParamUtils:patchValueWithBackup(patchInfo, uuid)
	local readValue = self:readValue(patchInfo)
	local backup = true

	self:patchValue(patchInfo)

	for key,object in pairs(self.patchBackUp[uuid]) do
		if(object.address == patchInfo.address) then
			backup = false
			break
		end
	end
	if(backup) then
		if(patchInfo.valueType == PatchInfo.TYPE.BINARY) then
			patchInfo.valueType = PatchInfo.TYPE.BYTE
		end
		table.insert(self.patchBackUp[uuid], PatchInfo:new(patchInfo.address, readValue, patchInfo.valueType))
	end
end

function ParamUtils:readValue(patchInfo)
	local value = 0
	if(patchInfo.valueType == PatchInfo.TYPE.BYTE or patchInfo.valueType == PatchInfo.TYPE.BINARY) then
		value = self:readByte(patchInfo)
	elseif(patchInfo.valueType == PatchInfo.TYPE.TWO_BYTE) then
		value = self:read2Byte(patchInfo)
	elseif(patchInfo.valueType == PatchInfo.TYPE.FOUR_BYTE) then
		value = self:read4Byte(patchInfo)
	elseif(patchInfo.valueType == PatchInfo.TYPE.EIGHT_BYTE) then
		value = self:read8Byte(patchInfo)
	elseif(patchInfo.valueType == PatchInfo.TYPE.FLOAT) then
		value = self:readFloat(patchInfo)
	end
	return value
end

function ParamUtils:patchValue(patchInfo)
	if(patchInfo.valueType == PatchInfo.TYPE.BINARY) then
		self:writeBinary(patchInfo)
	elseif(patchInfo.valueType == PatchInfo.TYPE.BYTE) then
		self:writeByte(patchInfo)
	elseif(patchInfo.valueType == PatchInfo.TYPE.TWO_BYTE) then
		self:write2Byte(patchInfo)
	elseif(patchInfo.valueType == PatchInfo.TYPE.FOUR_BYTE) then
		self:write4Byte(patchInfo)
	elseif(patchInfo.valueType == PatchInfo.TYPE.EIGHT_BYTE) then
		self:write8Byte(patchInfo)
	elseif(patchInfo.valueType == PatchInfo.TYPE.FLOAT) then
		self:writeFloat(patchInfo)
	end
end

function ParamUtils:writeBinary(patchInfo)
	if(patchInfo.binaryOffset &gt; 0) then
		local prevValue = self:readByte(patchInfo)
		if(patchInfo.value == 0) then
			patchInfo.value = bAnd(prevValue, ~patchInfo.binaryOffset)
		else
			patchInfo.value = bOr(prevValue,patchInfo.binaryOffset)
		end
		writeBytes(patchInfo.address, patchInfo.value)
	else
		self:logError("To write a binary you've to set the 'binaryOffset'")
	end
end

function ParamUtils:writeByte(patchInfo)
	if(patchInfo.value &gt; 255) then
		self:logError("Byte can't be bigger then 255")
	elseif(patchInfo.value &lt; -127) then
		self:logError("Byte can't be smaller then -127")
	else
		writeBytes(patchInfo.address, patchInfo.value)
	end
end

function ParamUtils:write2Byte(patchInfo)
	if(patchInfo.value &gt; 65535) then
		self:logError("2 Bytes can't be bigger then 65535")
	elseif(patchInfo.value &lt; -32767) then
		self:logError("2 Bytes can't be smaller then -32767")
	else
		writeBytes(patchInfo.address, wordToByteTable(patchInfo.value))
	end
end

function ParamUtils:write4Byte(patchInfo)
	if(patchInfo.value &gt; 4294967295) then
		self:logError("4 Bytes can't be bigger then 4294967295")
	elseif(patchInfo.value &lt; -2147483648) then
		self:logError("4 Bytes can't be smaller then -2147483648")
	else
		writeInteger(patchInfo.address, patchInfo.value)
	end
end

function ParamUtils:write8Byte(patchInfo)
	if(patchInfo.value &gt; 9223372036854775807) then
		self:logError("8 Bytes can't be bigger then 9223372036854775807")
	elseif(patchInfo.value &lt; -9223372036854775808) then
		self:logError("8 Bytes can't be smaller then -9223372036854775808")
	else
		writeQword(patchInfo.address, patchInfo.value)
	end
end

function ParamUtils:writeFloat(patchInfo)
	if(patchInfo.value &gt; 3.4028235E38) then
		self:logError("Float can't be bigger then 3.4028235E38")
	elseif(patchInfo.value &lt; -3.4028235E38) then
		self:logError("Float can't be smaller then -3.4028235E38")
	else
		writeFloat(patchInfo.address, patchInfo.value)
	end
end

-- read functions
function ParamUtils:readByte(patchInfo)
	return readBytes(patchInfo.address, 1)
end

function ParamUtils:read2Byte(patchInfo)
	return byteTableToWord(readBytes(patchInfo.address, 2, true))
end

function ParamUtils:read4Byte(patchInfo)
	return readInteger(patchInfo.address)
end

function ParamUtils:read8Byte(patchInfo)
	return readQword(patchInfo.address)
end

function ParamUtils:readFloat(patchInfo)
	return readFloat(patchInfo.address)
end

function ParamUtils:restoreAllBackups()
  if(self:isNotEmpty(self.patchBackUp)) then
    for uuid,tBackup in pairs(self.patchBackUp) do
	  self:restore(uuid)
    end
  end
  self.patchBackUp = {}
end

function ParamUtils:restoreAllOldBackups()
  if(self:isNotEmpty(self.patchBackUpOld)) then
    for uuid,tBackup in pairs(self.patchBackUpOld) do
	  self:restore(uuid)
    end
  end
  self.patchBackUpOld = {}
end

function ParamUtils:printAllBackups()
  if(self:isNotEmpty(self.patchBackUp)) then
    for uuid,tBackup in pairs(self.patchBackUp) do
	  print("UUID: "..uuid)
	  for key,object in pairs(tBackup) do
	    print("Address: "..object.address.." Value: "..object.value.." Type: "..object.valueType)
	  end
    end
  end
end

function ParamUtils:printAllOldBackups()
  if(self:isNotEmpty(self.patchBackUpOld)) then
    for uuid,tBackup in pairs(self.patchBackUpOld) do
	  print("UUID: "..uuid)
	  for address,byteArray in pairs(tBackup) do
	    print("Address: "..address.." Byte Array: ")
	  end
    end
  end
end

function ParamUtils:printParams()
  if(self:isNotEmpty(self.masterParamTable)) then
    for key,address in pairs(self.masterParamTable) do
	  print("Param: "..key.." Address: "..self:toHex(address))
    end
  end
end

function ParamUtils:printParamsIds(param)
  if(self:isNotEmpty(self.masterParamTable)) then
    local idTable = self:getParamIdTable(param)
    for id,address in pairs(idTable) do
	  print("ID: "..id.." (0x"..self:toHex(id)..") Address: "..self:toHex(address))
    end
  end
end

function ParamUtils:printParamAddress(param)
  local address = self:getParamAddress(param)
  if(self:isNotEmpty(address)) then
    print("Param: "..param..", Address: "..self:toHex(address))
  else
	print("Param: "..param.." couldn't be found.")
  end
end

-- Creating an instance of ParamUtils
paramUtils = ParamUtils:new()
--[[END ParamUtils class]]--
local function enableRecord(thread, id)
  local record = getAddressList().getMemoryRecordByID(id)
  if(record ~= nil) then
    sleep(500)
    record.Active = true
  else
    print("Record with ID "..id.." doesn't exists")
  end
end
createNativeThread(enableRecord, 252) --Enable PP classes
[DISABLE]
{$lua}
if syntaxcheck then return end
paramUtils:restoreAllBackups()
paramUtils:printAllOldBackups()
paramUtils:destroy()
local function disableRecord(thread, id)
  local record = getAddressList().getMemoryRecordByID(id)
  if(record ~= nil) then
    sleep(500)
    record.Active = false
  else
    print("Record with ID "..id.." doesn't exists")
  end
end
createNativeThread(disableRecord, 252) --Disable PP classes
</AssemblerScript>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>252</ID>
                          <Description>"BaseParamClass"</Description>
                          <Options moHideChildren="1" moActivateChildrenAsWell="1"/>
                          <VariableType>Auto Assembler Script</VariableType>
                          <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

--[[START BaseParamClass class]]--
BaseParamClass = {
	id = 0,
	param = "",
	backupUuid = "",
	address = 0
}

function BaseParamClass:new(param, uuid, id, address)
  local o = {}
  self.__index = self
  setmetatable(o, self)

  o:init(param, uuid, id, address)
  return o
end

function BaseParamClass:init(param, uuid, id, address)
  if(param ~= nil) then
    self.param = param
  end
  if(uuid ~= nil) then
    self.backupUuid = uuid
  end
  if(id ~= nil) then
    self.id = id
  end
  if(self.param ~= "" and self.backupUuid ~= "") then
    if(paramUtils.patchBackUp[self.backupUuid] == nil) then
      paramUtils.patchBackUp[self.backupUuid] = {}
    end
	if(address ~= nil and address &gt; 0) then
	  self.address = address
    elseif(self.id ~= nil and self.id &gt; 0) then
	  self:stripSelfIdForParams()
      self.address = paramUtils:getIdAddressInParam(self.param, self.id)
    end
  end
end

-- Removes first Hex digit of the ID
function BaseParamClass:stripIdForParams(id)
	local idHex = paramUtils:toHex(id, 8)
	return tonumber(idHex:sub(2),16)
end

function BaseParamClass:stripSelfIdForParams()
  if(self.id ~= nil and self.id &gt; 0) then
    self.id = self:stripIdForParams(self.id)
  end
end

--Patch all values
function BaseParamClass:patchAll(offset, value, valueType, binaryOffset)
	local addresses = paramUtils:getAllAddressFromParam(self.param)
	for key,address in pairs(addresses) do
		local patchInfo = PatchInfo:new(address + offset, value, valueType, PatchInfo:getBinaryOffset(binaryOffset))
		paramUtils:patchValueWithBackup(patchInfo, self.backupUuid)
	end
end

function BaseParamClass:patchAllBinary(offset, value, binaryOffset)
	self:patchAll(offset, value, PatchInfo.TYPE.BINARY, binaryOffset)
end

function BaseParamClass:patchAllByte(offset, value)
	self:patchAll(offset, value, PatchInfo.TYPE.BYTE)
end

function BaseParamClass:patchAll2Byte(offset, value)
	self:patchAll(offset, value, PatchInfo.TYPE.TWO_BYTE)
end

function BaseParamClass:patchAll4Byte(offset, value)
	self:patchAll(offset, value, PatchInfo.TYPE.FOUR_BYTE)
end

function BaseParamClass:patchAll8Byte(offset, value)
	self:patchAll(offset, value, PatchInfo.TYPE.EIGHT_BYTE)
end

function BaseParamClass:patchAllFloat(offset, value)
	self:patchAll(offset, value, PatchInfo.TYPE.FLOAT)
end

-- Patch value
function BaseParamClass:patchValue(offset, value, valueType, binaryOffset)
	local patchInfo = PatchInfo:new(self.address + offset, value, valueType, PatchInfo:getBinaryOffset(binaryOffset))
	paramUtils:patchValueWithBackup(patchInfo, self.backupUuid)
end

function BaseParamClass:patchBinary(offset, value, binaryOffset)
	self:patchValue(offset, value, PatchInfo.TYPE.BINARY, binaryOffset)
end

function BaseParamClass:patchByte(offset, value)
	self:patchValue(offset, value, PatchInfo.TYPE.BYTE)
end

function BaseParamClass:patch2Byte(offset, value)
	self:patchValue(offset, value, PatchInfo.TYPE.TWO_BYTE)
end

function BaseParamClass:patch4Byte(offset, value)
	self:patchValue(offset, value, PatchInfo.TYPE.FOUR_BYTE)
end

function BaseParamClass:patch8Byte(offset, value)
	self:patchValue(offset, value, PatchInfo.TYPE.EIGHT_BYTE)
end

function BaseParamClass:patchFloat(offset, value)
	self:patchValue(offset, value, PatchInfo.TYPE.FLOAT)
end

-- Read value
function BaseParamClass:readValue(offset, valueType, binaryOffset)
	local patchInfo = PatchInfo:new(self.address + offset, nil, valueType, PatchInfo:getBinaryOffset(binaryOffset))
	return paramUtils:readValue(patchInfo)
end

function BaseParamClass:readBinary(offset, binaryOffset)
	local bByte = self:readValue(offset, PatchInfo.TYPE.BINARY, binaryOffset)
	return bAnd(bByte, PatchInfo:getBinaryOffset(binaryOffset)) ~= 0
end

function BaseParamClass:readByte(offset)
	return self:readValue(offset, PatchInfo.TYPE.BYTE)
end

function BaseParamClass:read2Byte(offset)
	return self:readValue(offset, PatchInfo.TYPE.TWO_BYTE)
end

function BaseParamClass:read4Byte(offset)
	return self:readValue(offset, PatchInfo.TYPE.FOUR_BYTE)
end

function BaseParamClass:read8Byte(offset)
	return self:readValue(offset, PatchInfo.TYPE.EIGHT_BYTE)
end

function BaseParamClass:readFloat(offset)
	return self:readValue(offset, PatchInfo.TYPE.FLOAT)
end

--[[END BaseParamClass class]]--

[DISABLE]
{$lua}
if syntaxcheck then return end

</AssemblerScript>
                          <CheatEntries>
                            <CheatEntry>
                              <ID>1337290654</ID>
                              <Description>"ActionButtonParam"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]

-- Define ActionButtonParam Class

ActionButtonParam = BaseParamClass:new()

function ActionButtonParam:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("ActionButtonParam", uuid, id, address)
	return o
end

function ActionButtonParam:regionType(value)
    self:patchByte(0x00,value)
end

function ActionButtonParam:dummyPoly1(value)
    self:patch4Byte(0x01,value)
end

function ActionButtonParam:dummyPoly2(value)
    self:patch4Byte(0x05,value)
end

function ActionButtonParam:Radius(value)
    self:patchFloat(0x09,value)
end

function ActionButtonParam:Angle(value)
    self:patch4Byte(0x0D,value)
end

function ActionButtonParam:depth(value)
    self:patchFloat(0x11,value)
end

function ActionButtonParam:width(value)
    self:patchFloat(0x15,value)
end

function ActionButtonParam:height(value)
    self:patchFloat(0x19,value)
end

function ActionButtonParam:baseHeightOffset(value)
    self:patchFloat(0x1D,value)
end

function ActionButtonParam:angleCheckType(value)
    self:patchByte(0x21,value)
end

function ActionButtonParam:AllowAngle(value)
    self:patch4Byte(0x22,value)
end

function ActionButtonParam:textBoxType(value)
    self:patchByte(0x26,value)
end

function ActionButtonParam:textId(value)
    self:patch4Byte(0x27,value)
end

function ActionButtonParam:InvalidFlag(value)
    self:patch4Byte(0x2B,value)
end

function ActionButtonParam:grayoutFlag(value)
    self:patch4Byte(0x2F,value)
end

function ActionButtonParam:priority(value)
    self:patch4Byte(0x33,value)
end

function ActionButtonParam:execInvalidTime(value)
    self:patchFloat(0x37,value)
end

function ActionButtonParam:execButtonCircle(value)
    self:patchByte(0x3B,value)
end

[DISABLE]
</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337290655</ID>
                              <Description>"AttackElementCorrectParam"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]

AttackElementCorrectParam = BaseParamClass:new()

function AttackElementCorrectParam:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("AttackElementCorrectParam", uuid, id, address)
	return o
end

function AttackElementCorrectParam:isPhysSTR(value)
    self:patchBinary(0x00,value, 0)
end

function AttackElementCorrectParam:isPhysDEX(value)
    self:patchBinary(0x00,value, 1)
end

function AttackElementCorrectParam:isPhysINT(value)
    self:patchBinary(0x00,value, 2)
end

function AttackElementCorrectParam:isPhysFTH(value)
    self:patchBinary(0x00,value, 3)
end

function AttackElementCorrectParam:isPhysLCK(value)
    self:patchBinary(0x00,value, 4)
end

function AttackElementCorrectParam:isMagicSTR(value)
    self:patchBinary(0x00,value, 5)
end

function AttackElementCorrectParam:isMagicDEX(value)
    self:patchBinary(0x00,value, 6)
end

function AttackElementCorrectParam:isMagicINT(value)
    self:patchBinary(0x00,value, 7)
end

function AttackElementCorrectParam:isMagicFTH(value)
    self:patchBinary(0x01,value, 0)
end

function AttackElementCorrectParam:isMagicLCK(value)
    self:patchBinary(0x01,value, 1)
end

function AttackElementCorrectParam:isFireSTR(value)
    self:patchBinary(0x01,value, 2)
end

function AttackElementCorrectParam:isFireDEX(value)
    self:patchBinary(0x01,value, 3)
end

function AttackElementCorrectParam:isFireINT(value)
    self:patchBinary(0x01,value, 4)
end

function AttackElementCorrectParam:isFireFTH(value)
    self:patchBinary(0x01,value, 5)
end

function AttackElementCorrectParam:isFireLCK(value)
    self:patchBinary(0x01,value, 6)
end

function AttackElementCorrectParam:isThunSTR(value)
    self:patchBinary(0x01,value, 7)
end

function AttackElementCorrectParam:isThunDEX(value)
    self:patchBinary(0x02,value, 0)
end

function AttackElementCorrectParam:isThunINT(value)
    self:patchBinary(0x02,value, 1)
end

function AttackElementCorrectParam:isThunFTH(value)
    self:patchBinary(0x02,value, 2)
end

function AttackElementCorrectParam:isThunLCK(value)
    self:patchBinary(0x02,value, 3)
end

function AttackElementCorrectParam:isDarkSTR(value)
    self:patchBinary(0x02,value, 4)
end

function AttackElementCorrectParam:isDarkDEX(value)
    self:patchBinary(0x02,value, 5)
end

function AttackElementCorrectParam:isDarkINT(value)
    self:patchBinary(0x02,value, 6)
end

function AttackElementCorrectParam:isDarkFTH(value)
    self:patchBinary(0x02,value, 7)
end

function AttackElementCorrectParam:isDarkLCK(value)
    self:patchBinary(0x03,value, 0)
end

--addRate (2Byte) starting at 0x04

--correctionRate (2Byte) starting at 0x36

[DISABLE]
</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337080398</ID>
                              <Description>"AiSoundParam"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]

-- Define AiSoundParam Class

AiSoundParam = BaseParamClass:new()

function AiSoundParam:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("AiSoundParam", uuid, id, address)
	return o
end

function AiSoundParam:Radius(value)
    self:patchFloat(0x00,value)
end

function AiSoundParam:lifeFrame(value)
    self:patchFloat(0x04,value)
end

function AiSoundParam:bSpEffectEnable(value)
    self:patchByte(0x08,value)
end

function AiSoundParam:Type(value)
    self:patchByte(0x09,value)
end

function AiSoundParam:fakeTargetType(value)
    self:patchByte(0x0A,value)
end

function AiSoundParam:InterestCategory(value)
    self:patchByte(0x0B,value)
end

function AiSoundParam:UseHitDamageTeam(value)
    self:patchByte(0x0C,value)
end

[DISABLE]
</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337290656</ID>
                              <Description>"AtkParam_Npc"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

-- Define AtkParam_Npc Class

AtkParam_Npc = BaseParamClass:new()

function AtkParam_Npc:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("AtkParam_Npc", uuid, id, address)
	return o
end

function AtkParam_Npc:Hit0_Radius(value)
	self:patchFloat(0x0, value)
end

function AtkParam_Npc:Hit1_Radius(value)
	self:patchFloat(0x4, value)
end

function AtkParam_Npc:Hit2_Radius(value)
	self:patchFloat(0x8, value)
end

function AtkParam_Npc:Hit3_Radius(value)
	self:patchFloat(0xC, value)
end

function AtkParam_Npc:KnockbackDist(value)
	self:patchFloat(0x10, value)
end

function AtkParam_Npc:HitStopTime(value)
	self:patchFloat(0x14, value)
end

function AtkParam_Npc:SpecialEffectId0(value)
	self:patch4Byte(0x18, value)
end

function AtkParam_Npc:SpecialEffectId1(value)
	self:patch4Byte(0x1C, value)
end

function AtkParam_Npc:SpecialEffectId2(value)
	self:patch4Byte(0x20, value)
end

function AtkParam_Npc:SpecialEffectId3(value)
	self:patch4Byte(0x24, value)
end

function AtkParam_Npc:SpecialEffectId4(value)
	self:patch4Byte(0x28, value)
end

function AtkParam_Npc:Hit0_DmyPoly1(value)
	self:patch2Byte(0x2C, value)
end

function AtkParam_Npc:Hit1_DmyPoly1(value)
	self:patch2Byte(0x2E, value)
end

function AtkParam_Npc:Hit2_DmyPoly1(value)
	self:patch2Byte(0x30, value)
end

function AtkParam_Npc:Hit3_DmyPoly1(value)
	self:patch2Byte(0x32, value)
end

function AtkParam_Npc:Hit0_DmyPoly2(value)
	self:patch2Byte(0x34, value)
end

function AtkParam_Npc:Hit1_DmyPoly2(value)
	self:patch2Byte(0x36, value)
end

function AtkParam_Npc:Hit2_DmyPoly2(value)
	self:patch2Byte(0x38, value)
end

function AtkParam_Npc:Hit3_DmyPoly2(value)
	self:patch2Byte(0x3A, value)
end

function AtkParam_Npc:BlowingCorrection(value)
	self:patch2Byte(0x3C, value)
end

function AtkParam_Npc:AtkPhysCorrection(value)
	self:patch2Byte(0x3E, value)
end

function AtkParam_Npc:AtkMagCorrection(value)
	self:patch2Byte(0x40, value)
end

function AtkParam_Npc:AtkFireCorrection(value)
	self:patch2Byte(0x42, value)
end

function AtkParam_Npc:AtkThunCorrection(value)
	self:patch2Byte(0x44, value)
end

function AtkParam_Npc:AtkStamCorrection(value)
	self:patch2Byte(0x46, value)
end

function AtkParam_Npc:GuardAtkRateCorrection(value)
	self:patch2Byte(0x48, value)
end

function AtkParam_Npc:GuardBreakCorrection(value)
	self:patch2Byte(0x4A, value)
end

function AtkParam_Npc:AtkThrowEscapeCorrection(value)
	self:patch2Byte(0x4C, value)
end

function AtkParam_Npc:AtkSuperArmorCorrection(value)
	self:patch2Byte(0x4E, value)
end

function AtkParam_Npc:AtkPhys(value)
	self:patch2Byte(0x50, value)
end

function AtkParam_Npc:AtkMag(value)
	self:patch2Byte(0x52, value)
end

function AtkParam_Npc:AtkFire(value)
	self:patch2Byte(0x54, value)
end

function AtkParam_Npc:AtkThun(value)
	self:patch2Byte(0x56, value)
end

function AtkParam_Npc:AtkStam(value)
	self:patch2Byte(0x58, value)
end

function AtkParam_Npc:GuardAtkRate(value)
	self:patch2Byte(0x5A, value)
end

function AtkParam_Npc:GuardBreakRate(value)
	self:patch2Byte(0x5C, value)
end

function AtkParam_Npc:AtkSuperArmor(value)
	self:patch2Byte(0x5E, value)
end

function AtkParam_Npc:AtkThrowEscape(value)
	self:patch2Byte(0x60, value)
end

function AtkParam_Npc:AtkObj(value)
	self:patch2Byte(0x62, value)
end

function AtkParam_Npc:GuardStaminaCutRate(value)
	self:patch2Byte(0x64, value)
end

function AtkParam_Npc:GuardRate(value)
	self:patch2Byte(0x66, value)
end

function AtkParam_Npc:ThrowTypeId(value)
	self:patch2Byte(0x68, value)
end

function AtkParam_Npc:Hit0_hitType(value)
	self:patchByte(0x6A, value)
end

function AtkParam_Npc:Hit1_hitType(value)
	self:patchByte(0x6B, value)
end

function AtkParam_Npc:Hit2_hitType(value)
	self:patchByte(0x6C, value)
end

function AtkParam_Npc:Hit3_hitType(value)
	self:patchByte(0x6D, value)
end

function AtkParam_Npc:hit0_Priority(value)
	self:patchByte(0x6E, value)
end

function AtkParam_Npc:hit1_Priority(value)
	self:patchByte(0x6F, value)
end

function AtkParam_Npc:hit2_Priority(value)
	self:patchByte(0x70, value)
end

function AtkParam_Npc:hit3_Priority(value)
	self:patchByte(0x71, value)
end

function AtkParam_Npc:DamageLevel(value)
	self:patchByte(0x72, value)
end

function AtkParam_Npc:MapHitType(value)
	self:patchByte(0x73, value)
end

function AtkParam_Npc:GuardCutCancelRate(value)
	self:patchByte(0x74, value)
end

function AtkParam_Npc:AtkAttribute(value)
	self:patchByte(0x75, value)
end

function AtkParam_Npc:SpAttribute(value)
	self:patchByte(0x76, value)
end

function AtkParam_Npc:AttackType(value)
	self:patchByte(0x77, value)
end

function AtkParam_Npc:AtkMaterial(value)
	self:patchByte(0x78, value)
end

function AtkParam_Npc:AtkSize(value)
	self:patchByte(0x79, value)
end

function AtkParam_Npc:DefMaterial(value)
	self:patchByte(0x7A, value)
end

function AtkParam_Npc:DefSfxMaterial(value)
	self:patchByte(0x7B, value)
end

function AtkParam_Npc:HitSourceType(value)
	self:patchByte(0x7C, value)
end

function AtkParam_Npc:ThrowFlag(value)
	self:patchByte(0x7D, value)
end

function AtkParam_Npc:isEffectDisabled(value)
	self:patchBinary(0x7E, value, 2)
end

function AtkParam_Npc:DoubleDamage(value) --Clientside
	self:patchBinary(0x7D, value, 6)
end

function AtkParam_Npc:isHitboxEnabled(value)
	self:patchBinary(0x81, value, 0)
end

function AtkParam_Npc:isHitBothTeams(value)
	self:patchBinary(0x81, value, 1)
end

function AtkParam_Npc:isSelfHit(value)
	self:patchBinary(0x81, value, 2)
end

function AtkParam_Npc:CameraActOnHit(value) --clientside
	self:patch4Byte(0x98, value)
end

function AtkParam_Npc:ThrowCameraAct(value) --clientside
	self:patch4Byte(0x9C, value)
end

[DISABLE]


</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337080259</ID>
                              <Description>"AtkParam_Pc"</Description>
                              <Options moHideChildren="1"/>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

--[[START AttackParam_PC class]]--
AtkParam_Pc = BaseParamClass:new()

function AtkParam_Pc:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("AtkParam_Pc", uuid, id, address)
	return o
end

function AtkParam_Pc:Hit0_Radius(value)
	self:patchFloat(0x0, value)
end

function AtkParam_Pc:Hit1_Radius(value)
	self:patchFloat(0x4, value)
end

function AtkParam_Pc:Hit2_Radius(value)
	self:patchFloat(0x8, value)
end

function AtkParam_Pc:Hit3_Radius(value)
	self:patchFloat(0xC, value)
end

function AtkParam_Pc:KnockbackDist(value)
	self:patchFloat(0x10, value)
end

function AtkParam_Pc:HitStopTime(value)
	self:patchFloat(0x14, value)
end

--Special Effect IDs
function AtkParam_Pc:SpecialEffectId0(value)
	self:patch4Byte(0x18, value)
end

function AtkParam_Pc:SpecialEffectId1(value)
	self:patch4Byte(0x1C, value)
end

function AtkParam_Pc:SpecialEffectId2(value)
	self:patch4Byte(0x20, value)
end

function AtkParam_Pc:SpecialEffectId3(value)
	self:patch4Byte(0x24, value)
end

function AtkParam_Pc:SpecialEffectId4(value)
	self:patch4Byte(0x28, value)
end

--Hit DmyPoly
function AtkParam_Pc:Hit0_DmyPoly1(value)
	self:patch2Byte(0x2C, value)
end

function AtkParam_Pc:Hit1_DmyPoly1(value)
	self:patch2Byte(0x2E, value)
end

function AtkParam_Pc:Hit2_DmyPoly1(value)
	self:patch2Byte(0x30, value)
end

function AtkParam_Pc:Hit3_DmyPoly1(value)
	self:patch2Byte(0x32, value)
end

function AtkParam_Pc:Hit0_DmyPoly2(value)
	self:patch2Byte(0x34, value)
end

function AtkParam_Pc:Hit1_DmyPoly2(value)
	self:patch2Byte(0x36, value)
end

function AtkParam_Pc:Hit2_DmyPoly2(value)
	self:patch2Byte(0x38, value)
end

function AtkParam_Pc:Hit3_DmyPoly2(value)
	self:patch2Byte(0x3A, value)
end
--

function AtkParam_Pc:BlowingCorrection(value)
	self:patch2Byte(0x3C, value)
end

--Corrections
function AtkParam_Pc:AtkPhysCorrection(value)
	self:patch2Byte(0x3E, value)
end

function AtkParam_Pc:AtkMagCorrection(value)
	self:patch2Byte(0x40, value)
end

function AtkParam_Pc:AtkFireCorrection(value)
	self:patch2Byte(0x42, value)
end

function AtkParam_Pc:AtkThunCorrection(value)
	self:patch2Byte(0x44, value)
end

function AtkParam_Pc:AtkStamCorrection(value)
	self:patch2Byte(0x46, value)
end

function AtkParam_Pc:GuardAtkRateCorrection(value)
	self:patch2Byte(0x48, value)
end

function AtkParam_Pc:GuardBreakCorrection(value)
	self:patch2Byte(0x4A, value)
end

function AtkParam_Pc:AtkThrowEscapeCorrection(value)
	self:patch2Byte(0x4C, value)
end

function AtkParam_Pc:AtkSuperArmorCorrection(value)
	self:patch2Byte(0x4E, value)
end
--

--Attack
function AtkParam_Pc:AtkPhys(value)
	self:patch2Byte(0x50, value)
end

function AtkParam_Pc:AtkMag(value)
	self:patch2Byte(0x52, value)
end

function AtkParam_Pc:AtkFire(value)
	self:patch2Byte(0x54, value)
end

function AtkParam_Pc:AtkThun(value)
	self:patch2Byte(0x56, value)
end

function AtkParam_Pc:AtkStam(value)
	self:patch2Byte(0x58, value)
end

function AtkParam_Pc:GuardAtkRate(value)
	self:patch2Byte(0x5A, value)
end

function AtkParam_Pc:GuardBreakRate(value)
	self:patch2Byte(0x5C, value)
end

function AtkParam_Pc:AtkSuperArmor(value)
	self:patch2Byte(0x5E, value)
end

function AtkParam_Pc:AtkThrowEscape(value)
	self:patch2Byte(0x60, value)
end

function AtkParam_Pc:AtkObj(value)
	self:patch2Byte(0x62, value)
end
--

function AtkParam_Pc:GuardStaminaCutRate(value)
	self:patch2Byte(0x64, value)
end

function AtkParam_Pc:GuardRate(value)
	self:patch2Byte(0x66, value)
end

function AtkParam_Pc:ThrowTypeId(value)
	self:patch2Byte(0x68, value)
end

--Hit Type
function AtkParam_Pc:Hit0_hitType(value)
	self:patchByte(0x6A, value)
end

function AtkParam_Pc:Hit1_hitType(value)
	self:patchByte(0x6B, value)
end

function AtkParam_Pc:Hit2_hitType(value)
	self:patchByte(0x6C, value)
end

function AtkParam_Pc:Hit3_hitType(value)
	self:patchByte(0x6D, value)
end


-- insert Unknown 1 6E-71

function AtkParam_Pc:DamageLevel(value)
	self:patchByte(0x72, value)
end

function AtkParam_Pc:MapHitType(value)
	self:patchByte(0x73, value)
end

function AtkParam_Pc:GuardCutCancelRate(value)
	self:patchByte(0x74, value)
end

function AtkParam_Pc:AtkAttribute(value)
	self:patchByte(0x75, value)
end

function AtkParam_Pc:SpecialAttributes(value)
	self:patchByte(0x76, value)
end

function AtkParam_Pc:AttackType(value)
	self:patchByte(0x77, value)
end

function AtkParam_Pc:AtkMaterial(value)
	self:patchByte(0x78, value)
end

function AtkParam_Pc:AtkSize(value)
	self:patchByte(0x79, value)
end

function AtkParam_Pc:DefMaterial(value)
	self:patchByte(0x7A, value)
end

function AtkParam_Pc:DefSfxMaterial(value)
	self:patchByte(0x7B, value)
end

function AtkParam_Pc:HitSourceType(value)
	self:patchByte(0x7C, value)
end

function AtkParam_Pc:ThrowFlag(value)
	self:patchByte(0x7D, value)
end

function AtkParam_Pc:isEffectDisabled(value)
	self:patchBinary(0x7E, value, 2)
end

function AtkParam_Pc:DoubleDamage(value) --Clientside
	self:patchBinary(0x7D, value, 6)
end

function AtkParam_Pc:isHitboxEnabled(value)
	self:patchBinary(0x81, value, 0)
end

function AtkParam_Pc:isHitBothTeams(value)
	self:patchBinary(0x81, value, 1)
end

function AtkParam_Pc:isSelfHit(value)
	self:patchBinary(0x81, value, 2)
end

function AtkParam_Pc:CameraActOnHit(value) --clientside
	self:patch4Byte(0x98, value)
end

function AtkParam_Pc:ThrowCameraAct(value) --clientside
	self:patch4Byte(0x9C, value)
end

-- insert Unknown 2 7E-184 here

function AtkParam_Pc:AtkDarkCorrection(value)
	self:patch2Byte(0x186, value)
end

function AtkParam_Pc:AtkDark(value)
	self:patch2Byte(0x188, value)
end

-- insert Unknown 3 here

--[[END AttackParam_PC class]]--

[DISABLE]
{$lua}
if syntaxcheck then return end

</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337080258</ID>
                              <Description>"BehaviorParam_PC"</Description>
                              <Options moHideChildren="1"/>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

--[[START BehaviorParam_PC class]]--
BehaviorParam_PC = BaseParamClass:new()

function BehaviorParam_PC:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("BehaviorParam_PC", uuid, id, address)
	return o
end

function BehaviorParam_PC:variationId(value)
	self:patch4Byte(0x0, value)
end

function BehaviorParam_PC:behaviorJudgeId(value)
	self:patch4Byte(0x4, value)
end

function BehaviorParam_PC:ezStateBehaviorType_old(value)
	self:patchByte(0x8, value)
end

function BehaviorParam_PC:refType(value)
	self:patchByte(0x9, value)
end

function BehaviorParam_PC:refId(value)
	self:patch4Byte(0xC, value)
end

function BehaviorParam_PC:sfxVariationId(value)
	self:patch4Byte(0x10, value)
end

function BehaviorParam_PC:stamina(value)
	self:patch4Byte(0x14, value)
end

function BehaviorParam_PC:mp(value)
	self:patch4Byte(0x18, value)
end

function BehaviorParam_PC:category(value)
	self:patchByte(0x1C, value)
end

function BehaviorParam_PC:heroPoint(value)
	self:patchByte(0x1D, value)
end

function BehaviorParam_PC:pad1(value)
	self:patchByte(0x1E, value)
end

-- insert 0x1F here

--[[END BehaviorParam_PC class]]--

[DISABLE]
{$lua}
if syntaxcheck then return end

</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337080285</ID>
                              <Description>"BonfireWarpParam"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end
--[[START BonfireWarpParam class]]--
BonfireWarpParam = BaseParamClass:new()

function BonfireWarpParam:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("BonfireWarpParam", uuid, id, address)
	return o
end

function BonfireWarpParam:LocationEventId(value)
    self:patch4Byte(0x0,value)
end

function BonfireWarpParam:WarpEventId(value)
    self:patch4Byte(0x4,value)
end

function BonfireWarpParam:BonfireNameId(value)
    self:patch4Byte(0x8,value)
end

function BonfireWarpParam:DescriptionTextId(value)
    self:patch4Byte(0xC,value)
end

function BonfireWarpParam:PictureId(value)
    self:patch4Byte(0x10,value)
end

function BonfireWarpParam:ListId(value)
    self:patchByte(0x14,value)
end

function BonfireWarpParam:IsDisableQuickwarp(value)
    self:patchByte(0x15,value)
end

function BonfireWarpParam:CeremonyId(value)
    self:patch2Byte(0x16,value)
end

function BonfireWarpParam:onlineAreaId(value)
    self:patch4Byte(0x18,value)
end


--Compatibility
function BonfireWarpParam:LocationID(value)
    self:patch4Byte(0x0, value)
end

function BonfireWarpParam:WarpID(value)
    self:patch4Byte(0x4, value)
end

function BonfireWarpParam:BonfireId(value)
    self:patch4Byte(0x8,value)
end

function BonfireWarpParam:NameID(value)
    self:patch4Byte(0x8, value)
end

function BonfireWarpParam:PictureID(value)
    self:patch4Byte(0x10, value)
end

function BonfireWarpParam:SectionID(value)
    self:patchByte(0x14, value)
end

[DISABLE]
</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337080256</ID>
                              <Description>"Bullet"</Description>
                              <Options moHideChildren="1"/>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

--[[START Bullet class]]--
Bullet = BaseParamClass:new()

function Bullet:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("Bullet", uuid, id, address)
	return o
end

function Bullet:atkId_Bullet(value)
	self:patch4Byte(0x0, value)
end

function Bullet:sfxId_Bullet(value)
	self:patch4Byte(0x4, value)
end

function Bullet:sfxId_Hit(value)
	self:patch4Byte(0x8, value)
end

function Bullet:sfxId_Flick(value)
	self:patch4Byte(0xC, value)
end

function Bullet:life(value)
	self:patchFloat(0x10, value)
end

function Bullet:dist(value)
	self:patchFloat(0x14, value)
end

function Bullet:shootInterval(value)
	self:patchFloat(0x18, value)
end

function Bullet:gravityInRange(value)
	self:patch4Byte(0x1C, value)
end

function Bullet:gravityOutRange(value)
	self:patchFloat(0x20, value)
end

function Bullet:homingStopRange(value)
	self:patchFloat(0x24, value)
end

function Bullet:initVellocity(value)
	self:patchFloat(0x28, value)
end

function Bullet:accelInRange(value)
	self:patchFloat(0x2C, value)
end

function Bullet:accelOutRange(value)
	self:patchFloat(0x30, value)
end

function Bullet:maxVellocity(value)
	self:patchFloat(0x34, value)
end

function Bullet:minVellocity(value)
	self:patchFloat(0x38, value)
end

function Bullet:accelTime(value)
	self:patchFloat(0x3C, value)
end

function Bullet:homingBeginDist(value)
	self:patchFloat(0x40, value)
end

function Bullet:hitRadius(value)
	self:patchFloat(0x44, value)
end

function Bullet:hitRadiusMax(value)
	self:patchFloat(0x48, value)
end

function Bullet:spreadTime(value)
	self:patchFloat(0x4C, value)
end

function Bullet:expDelay(value)
	self:patchFloat(0x50, value)
end

function Bullet:hormingOffsetRange(value)
	self:patchFloat(0x54, value)
end

function Bullet:dmgHitRecordLifeTime(value)
	self:patchFloat(0x58, value)
end

function Bullet:externalForce(value)
	self:patch4Byte(0x5C, value)
end

function Bullet:spEffectIDForShooter(value)
	self:patch4Byte(0x60, value)
end

function Bullet:autoSearchNPCThinkID(value)
	self:patch4Byte(0x64, value)
end

function Bullet:HitBulletID(value)
	self:patch4Byte(0x68, value)
end

--Special Effect IDs
function Bullet:spEffectId0(value)
	self:patch4Byte(0x6C, value)
end

function Bullet:spEffectId1(value)
	self:patch4Byte(0x70, value)
end

function Bullet:spEffectId2(value)
	self:patch4Byte(0x74, value)
end

function Bullet:spEffectId3(value)
	self:patch4Byte(0x78, value)
end

function Bullet:spEffectId4(value)
	self:patch4Byte(0x7C, value)
end

function Bullet:numShoot(value)
	self:patch2Byte(0x80, value)
end

function Bullet:homingAngle(value)
	self:patch2Byte(0x82, value)
end

function Bullet:shootAngle(value)
	self:patch2Byte(0x84, value)
end

function Bullet:shootAngleInterval(value)
	self:patch2Byte(0x86, value)
end

function Bullet:shootAngleXInterval(value)
	self:patch2Byte(0x88, value)
end

--Damp's
function Bullet:damageDamp(value)
	self:patchByte(0x8A, value)
end

function Bullet:spelDamageDamp(value)
	self:patchByte(0x8B, value)
end

function Bullet:fireDamageDamp(value)
	self:patchByte(0x8C, value)
end

function Bullet:thunderDamageDamp(value)
	self:patchByte(0x8D, value)
end

function Bullet:staminaDamp(value)
	self:patchByte(0x8E, value)
end

function Bullet:knockbackDamp(value)
	self:patchByte(0x8F, value)
end


function Bullet:shootAngleXZ(value)
	self:patchByte(0x90, value)
end

function Bullet:lockShootLimitAng(value)
	self:patchByte(0x91, value)
end

function Bullet:isPenetrate(value)
	self:patchByte(0x92, value)
end

function Bullet:prevVelocityDirRate(value)
	self:patchByte(0x93, value)
end

function Bullet:atkAttribute(value)
	self:patchByte(0x94, value)
end

function Bullet:spAttribute(value)
	self:patchByte(0x95, value)
end

function Bullet:Material_AttackType(value)
	self:patchByte(0x96, value)
end

function Bullet:Material_AttackMaterial(value)
	self:patchByte(0x97, value)
end

function Bullet:Material_Size(value)
	self:patchByte(0x98, value)
end

function Bullet:launchConditionType(value)
    self:patchByte(0x99, value)
end

--Flags
function Bullet:FollowType(value)
	self:patchBinary(0x9A, value, 0)
end

function Bullet:FollowType1(value)
	self:patchBinary(0x9A, value, 1)
end

function Bullet:FollowType2(value)
	self:patchBinary(0x9A, value, 2)
end

function Bullet:EmittePosType0(value)
	self:patchBinary(0x9A, value, 3)
end

function Bullet:EmittePosType1(value)
	self:patchBinary(0x9A, value, 4)
end

function Bullet:EmittePosType2(value)
	self:patchBinary(0x9A, value, 5)
end

function Bullet:isAttackSFX(value)
	self:patchBinary(0x9A, value, 6)
end

function Bullet:isEndlessHit(value)
	self:patchBinary(0x9A, value, 7)
end

function Bullet:isPenetrateMap(value)
	self:patchBinary(0x9B, value, 0)
end

function Bullet:isHitBothTeam(value)
	self:patchBinary(0x9B, value, 1)
end

function Bullet:isUseSharedHitList(value)
	self:patchBinary(0x9B, value, 2)
end

function Bullet:isUseMultiDmyPolyIfPlace(value)
	self:patchBinary(0x9B, value, 3)
end

function Bullet:attachEffectType0(value)
	self:patchBinary(0x9B, value, 4)
end

function Bullet:attachEffectType1(value)
	self:patchBinary(0x9B, value, 5)
end

function Bullet:isHitForceMagic(value)
	self:patchBinary(0x9B, value, 6)
end

function Bullet:isIgnoreSfxIfHitWater(value)
	self:patchBinary(0x9B, value, 7)
end

function Bullet:isIgnoreMoveStateIfHitWater(value)
	self:patchBinary(0x9C, value, 0)
end

function Bullet:isHitDarkForceMagic(value)
	self:patchBinary(0x9C, value, 1)
end

function Bullet:isInheritEffectToChild(value)
	self:patchBinary(0x9C, value, 2)
end

function Bullet:isInheritSpeedToChild(value)
	self:patchBinary(0x9C, value, 3)
end

function Bullet:isLockModule(value)
	self:patchBinary(0x9C, value, 4)
end

function Bullet:isSearchForTarget(value)
	self:patchBinary(0x9C, value, 5)
end

function Bullet:isEmittedBullet(value)
	self:patchBinary(0x9C, value, 6)
end

function Bullet:isInerhitLifeToChild(value)
	self:patchBinary(0x9C, value, 7)
end

function Bullet:darkDamageDamp(value)
	self:patchByte(0x9D, value)
end

function Bullet:bulletHitType0(value)
	self:patchByte(0x9E, value)
end

function Bullet:bulletHitType1(value)
	self:patchByte(0x9F, value)
end

function Bullet:targetYOffsetRange(value)
	self:patchFloat(0xA0, value)
end

function Bullet:shootAngleYMaxRandom(value)
	self:patchFloat(0xA4, value)
end

function Bullet:shootAngleXMaxRandom(value)
	self:patchFloat(0xA8, value)
end

function Bullet:intervalCreateBulletId(value)
	self:patch4Byte(0xAC, value)
end

function Bullet:intervalCreateTimeMin(value)
	self:patchFloat(0xB0, value)
end

function Bullet:intervalCreateTimeMax(value)
	self:patchFloat(0xB4, value)
end

function Bullet:predictionShootObserveTime(value)
	self:patchFloat(0xB8, value)
end

function Bullet:intervalCreateWaitTime(value)
	self:patchFloat(0xBC, value)
end

function Bullet:sfxPostureType(value)
	self:patchByte(0xC0, value)
end

function Bullet:BulletCreateLimitId(value)
	self:patchByte(0xC1, value)
end

function Bullet:counterHitType(value)
	self:patchByte(0xC2, value)
end

function Bullet:isPosHitBullet(value)
	self:patchBinary(0xC3, value, 0)
end

function Bullet:isAttachAttackSFX(value)
	self:patchBinary(0xC3, value, 1)
end

function Bullet:isSpCorrection0(value)
	self:patchBinary(0xC3, value, 2)
end

function Bullet:isSpCorrection1(value)
	self:patchBinary(0xC3, value, 3)
end

function Bullet:isPenetrateTarget(value)
	self:patchBinary(0xC3, value, 4)
end

function Bullet:isSpCorrection2(value)
	self:patchBinary(0xC3, value, 5)
end

function Bullet:isDisableIntScale(value)
	self:patchBinary(0xC3, value, 6)
end

function Bullet:randomCreateRadius(value)
	self:patchFloat(0xC4, value)
end

function Bullet:objId_Hit(value)
	self:patch4Byte(0xC8, value)
end

function Bullet:subLife(value)
	self:patchFloat(0xCC, value)
end

function Bullet:subHomingAngle(value)
	self:patch2Byte(0xD0, value)
end

function Bullet:lockShootCorrectionAng(value)
	self:patch2Byte(0xD2, value)
end

--Compatibility/memes
function Bullet:hormingStopRange(value)
	self:patchFloat(0x24, value)
end

function Bullet:spEffectId5(value)
	self:patch4Byte(0x60, value)
end

function Bullet:spellParriable(value)
	self:patchBinary(0x9C, value, 1)
end

function Bullet:conditionByte(value)
	self:patchByte(0x9E, value)
end

function Bullet:conditionByte1(value)
	self:patchByte(0x9F, value)
end

function Bullet:Z_Homing(value)
	self:patchFloat(0xA0, value)
end

function Bullet:homingAngleCameraXY(value)
	self:patchFloat(0xA4, value)
end

function Bullet:homingAngleCameraZ(value)
	self:patchFloat(0xA8, value)
end

function Bullet:emitterBulletId(value)
	self:patch4Byte(0xAC, value)
end

function Bullet:emitterShootInterval(value)
	self:patchFloat(0xB0, value)
end

function Bullet:emitterSpawnInterval(value)
	self:patchFloat(0xB4, value)
end

function Bullet:emitterDelayUntilShot(value)
	self:patchFloat(0xBC, value)
end

function Bullet:targetHitstop(value)
	self:patchBinary(0xC3, value, 1)
end

function Bullet:targetPenetrate(value)
	self:patchBinary(0xC3, value, 4)
end

function Bullet:freeAim(value)
	self:patchBinary(0xC3, value, 5)
end

function Bullet:followTypeNumshoot(value)
	self:patchBinary(0xC3, value, 6)
end

function Bullet:objectId(value)
	self:patch4Byte(0xC8, value)
end

function Bullet:extendDist(value)
	self:patchFloat(0xCC, value)
end

function Bullet:extendLife(value)
	self:patchByte(0xD0, value)
end

function Bullet:adjustAngle(value)
	self:patchByte(0xD1, value)
end

--[[END Bullet class]]--

[DISABLE]
{$lua}
if syntaxcheck then return end

</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337080317</ID>
                              <Description>"CalcCorrectGraph"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

CalcCorrectGraph = BaseParamClass:new()

function CalcCorrectGraph:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("CalcCorrectGraph", uuid, id, address)
	return o
end

function CalcCorrectGraph:stageMaxVal0(value)
    self:patchFloat(0x00,value)
end

function CalcCorrectGraph:stageMaxVal1(value)
    self:patchFloat(0x04,value)
end

function CalcCorrectGraph:stageMaxVal2(value)
    self:patchFloat(0x08,value)
end

function CalcCorrectGraph:stageMaxVal3(value)
    self:patchFloat(0x0C,value)
end

function CalcCorrectGraph:stageMaxVal4(value)
    self:patchFloat(0x10,value)
end

function CalcCorrectGraph:stageMaxGrowVal0(value)
    self:patchFloat(0x14,value)
end

function CalcCorrectGraph:stageMaxGrowVal1(value)
    self:patchFloat(0x18,value)
end

function CalcCorrectGraph:stageMaxGrowVal2(value)
    self:patchFloat(0x1C,value)
end

function CalcCorrectGraph:stageMaxGrowVal3(value)
    self:patchFloat(0x20,value)
end

function CalcCorrectGraph:stageMaxGrowVal4(value)
    self:patchFloat(0x24,value)
end

function CalcCorrectGraph:adjPt_maxGrowVal0(value)
    self:patchFloat(0x28,value)
end

function CalcCorrectGraph:adjPt_maxGrowVal1(value)
    self:patchFloat(0x2C,value)
end

function CalcCorrectGraph:adjPt_maxGrowVal2(value)
    self:patchFloat(0x30,value)
end

function CalcCorrectGraph:adjPt_maxGrowVal3(value)
    self:patchFloat(0x34,value)
end

function CalcCorrectGraph:adjPt_maxGrowVal4(value)
    self:patchFloat(0x38,value)
end

function CalcCorrectGraph:init_inclination_soul(value)
    self:patchFloat(0x3C,value)
end

function CalcCorrectGraph:adjustment_value(value)
    self:patchFloat(0x40,value)
end

function CalcCorrectGraph:boundry_inclination_soul(value)
    self:patchFloat(0x44,value)
end

function CalcCorrectGraph:boundry_value(value)
    self:patchFloat(0x48,value)
end

[DISABLE]
{$lua}
if syntaxcheck then return end
</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337080282</ID>
                              <Description>"Ceremony"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end
--[[START Ceremony class]]--
Ceremony = BaseParamClass:new()

function Ceremony:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("Ceremony", uuid, id, address)
	return o
end

function Ceremony:EventLayerID(value)
    self:patch4Byte(0x0,value)
end

function Ceremony:MapStudioLayerID(value)
    self:patch4Byte(0x4,value)
end

function Ceremony:GparamID_Up(value)
    self:patch2Byte(0x8,value)
end

function Ceremony:GparamID_Low(value)
    self:patch2Byte(0xA,value)
end

function Ceremony:PointCloudID(value)
    self:patch4Byte(0xC,value)
end

function Ceremony:Gl_TextureID(value)
    self:patch4Byte(0x10,value)
end

function Ceremony:LightGroupID(value)
    self:patch4Byte(0x14,value)
end

function Ceremony:IsReload(value)
    self:patchByte(0x18,value)
end

function Ceremony:IsDisableOnline(value)
    self:patchByte(0x19,value)
end

[DiSaBlE]
</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337080266</ID>
                              <Description>"CharaInitParam"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

CharaInitParam = BaseParamClass:new()

function CharaInitParam:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("CharaInitParam", uuid, id, address)
	return o
end

function CharaInitParam:BaseRec_mp(value)
    self:patchFloat(0x00,value)
end

function CharaInitParam:BaseRec_sp(value)
    self:patchFloat(0x04,value)
end

function CharaInitParam:red_Falldam(value)
    self:patchFloat(0x08,value)
end

function CharaInitParam:soul(value)
    self:patch4Byte(0x0C,value)
end

function CharaInitParam:equip_Wep_Right(value)
    self:patch4Byte(0x10,value)
end

function CharaInitParam:equip_Subwep_Right(value)
    self:patch4Byte(0x14,value)
end

function CharaInitParam:equip_Wep_Left(value)
    self:patch4Byte(0x18,value)
end

function CharaInitParam:equip_Subwep_Left(value)
    self:patch4Byte(0x1C,value)
end

function CharaInitParam:equip_Helm(value)
    self:patch4Byte(0x20,value)
end

function CharaInitParam:equip_Armor(value)
    self:patch4Byte(0x24,value)
end

function CharaInitParam:equip_Gaunt(value)
    self:patch4Byte(0x28,value)
end

function CharaInitParam:equip_Leg(value)
    self:patch4Byte(0x2C,value)
end

function CharaInitParam:equip_Arrow(value)
    self:patch4Byte(0x30,value)
end

function CharaInitParam:equip_Bolt(value)
    self:patch4Byte(0x34,value)
end

function CharaInitParam:equip_SubArrow(value)
    self:patch4Byte(0x38,value)
end

function CharaInitParam:equip_SubBolt(value)
    self:patch4Byte(0x3C,value)
end

function CharaInitParam:equip_Accessory1(value)
    self:patch4Byte(0x40,value)
end

function CharaInitParam:equip_Accessory2(value)
    self:patch4Byte(0x44,value)
end

function CharaInitParam:equip_Accessory3(value)
    self:patch4Byte(0x48,value)
end

function CharaInitParam:equip_Accessory4(value)
    self:patch4Byte(0x4C,value)
end

function CharaInitParam:equip_Accessory5(value)
    self:patch4Byte(0x50,value)
end

function CharaInitParam:Equip_Skill_01(value)
    self:patch4Byte(0x54,value)
end

function CharaInitParam:Equip_Skill_02(value)
    self:patch4Byte(0x58,value)
end

function CharaInitParam:Equip_Skill_03(value)
    self:patch4Byte(0x5C,value)
end

function CharaInitParam:Equip_Spell_01(value)
    self:patch4Byte(0x60,value)
end

function CharaInitParam:Equip_Spell_02(value)
    self:patch4Byte(0x64,value)
end

function CharaInitParam:Equip_Spell_03(value)
    self:patch4Byte(0x68,value)
end

function CharaInitParam:Equip_Spell_04(value)
    self:patch4Byte(0x6C,value)
end

function CharaInitParam:Equip_Spell_05(value)
    self:patch4Byte(0x70,value)
end

function CharaInitParam:Equip_Spell_06(value)
    self:patch4Byte(0x74,value)
end

function CharaInitParam:Equip_Spell_07(value)
    self:patch4Byte(0x78,value)
end

function CharaInitParam:Item_01(value)
    self:patch4Byte(0x7C,value)
end

function CharaInitParam:Item_02(value)
    self:patch4Byte(0x80,value)
end

function CharaInitParam:Item_03(value)
    self:patch4Byte(0x84,value)
end

function CharaInitParam:Item_04(value)
    self:patch4Byte(0x88,value)
end

function CharaInitParam:Item_05(value)
    self:patch4Byte(0x8C,value)
end

function CharaInitParam:Item_06(value)
    self:patch4Byte(0x90,value)
end

function CharaInitParam:Item_07(value)
    self:patch4Byte(0x94,value)
end

function CharaInitParam:Item_08(value)
    self:patch4Byte(0x98,value)
end

function CharaInitParam:Item_09(value)
    self:patch4Byte(0x9C,value)
end

function CharaInitParam:Item_10(value)
    self:patch4Byte(0xA0,value)
end

function CharaInitParam:npcPlayerFaceGenId(value)
    self:patch4Byte(0xA4,value)
end

function CharaInitParam:npcPlayerThinkId(value)
    self:patch4Byte(0xA8,value)
end

function CharaInitParam:baseHp(value)
    self:patch2Byte(0xAC,value)
end

function CharaInitParam:baseMp(value)
    self:patch2Byte(0xAE,value)
end

function CharaInitParam:baseSp(value)
    self:patch2Byte(0xB0,value)
end

function CharaInitParam:arrowNum(value)
    self:patch2Byte(0xB2,value)
end

function CharaInitParam:boltNum(value)
    self:patch2Byte(0xB4,value)
end

function CharaInitParam:subArrowNum(value)
    self:patch2Byte(0xB6,value)
end

function CharaInitParam:subBoltNum(value)
    self:patch2Byte(0xB8,value)
end

function CharaInitParam:QWC_sb(value)
    self:patch2Byte(0xBC,value)
end

function CharaInitParam:QWC_mw(value)
    self:patch2Byte(0xBE,value)
end

function CharaInitParam:QWC_cd(value)
    self:patch2Byte(0xBF,value)
end

function CharaInitParam:soulLvl(value)
    self:patch2Byte(0xC0,value)
end

function CharaInitParam:baseVit(value)
    self:patchByte(0xC2,value)
end

function CharaInitParam:baseWil(value)
    self:patchByte(0xC3,value)
end

function CharaInitParam:baseEnd(value)
    self:patchByte(0xC4,value)
end

function CharaInitParam:baseStr(value)
    self:patchByte(0xC5,value)
end

function CharaInitParam:baseDex(value)
    self:patchByte(0xC6,value)
end

function CharaInitParam:baseMag(value)
    self:patchByte(0xC7,value)
end

function CharaInitParam:baseFai(value)
    self:patchByte(0xC8,value)
end

function CharaInitParam:baseLuc(value)
    self:patchByte(0xC9,value)
end

function CharaInitParam:baseHeroPoint(value)
    self:patchByte(0xCA,value)
end

function CharaInitParam:baseDurability(value)
    self:patchByte(0xCB,value)
end

function CharaInitParam:itemNum_01(value)
    self:patchByte(0xCC,value)
end

function CharaInitParam:itemNum_02(value)
    self:patchByte(0xCD,value)
end

function CharaInitParam:itemNum_03(value)
    self:patchByte(0xCE,value)
end

function CharaInitParam:itemNum_04(value)
    self:patchByte(0xCF,value)
end

function CharaInitParam:itemNum_05(value)
    self:patchByte(0xD0,value)
end

function CharaInitParam:itemNum_06(value)
    self:patchByte(0xD1,value)
end

function CharaInitParam:itemNum_07(value)
    self:patchByte(0xD2,value)
end

function CharaInitParam:itemNum_08(value)
    self:patchByte(0xD3,value)
end

function CharaInitParam:itemNum_09(value)
    self:patchByte(0xD4,value)
end

function CharaInitParam:itemNum_10(value)
    self:patchByte(0xD5,value)
end

function CharaInitParam:bodyScaleHead(value)
    self:patchByte(0xD6,value)
end

function CharaInitParam:bodyScaleBreast(value)
    self:patchByte(0xD7,value)
end

function CharaInitParam:BodyScaleAbdomen(value)
    self:patchByte(0xD8,value)
end

function CharaInitParam:BodyScaleArm(value)
    self:patchByte(0xD9,value)
end

function CharaInitParam:BodyScaleLeg(value)
    self:patchByte(0xDA,value)
end

function CharaInitParam:gestureid0(value)
    self:patchByte(0xDB,value)
end

function CharaInitParam:gestureid1(value)
    self:patchByte(0xDC,value)
end

function CharaInitParam:gestureid2(value)
    self:patchByte(0xDD,value)
end

function CharaInitParam:gestureid3(value)
    self:patchByte(0xDE,value)
end

function CharaInitParam:gestureid4(value)
    self:patchByte(0xDF,value)
end

function CharaInitParam:gestureid5(value)
    self:patchByte(0xE0,value)
end

function CharaInitParam:gestureid6(value)
    self:patchByte(0xE1,value)
end

function CharaInitParam:npcPlayerType(value)
    self:patchByte(0xE2,value)
end

function CharaInitParam:npcPlayerDrawType(value)
    self:patchByte(0xE3,value)
end

function CharaInitParam:NpcPlayerSex(value)
    self:patchByte(0xE4,value)
end

function CharaInitParam:vowType(value)
    self:patchByte(0xE5,value)
end

function CharaInitParam:VoiceType(value)
    self:patchByte(0xE6,value)
end

function CharaInitParam:equip_Wep_Right_GenId(value)
    self:patch4Byte(0xE8,value)
end

function CharaInitParam:equip_Subwep_Right_GenId(value)
    self:patch4Byte(0xEC,value)
end

function CharaInitParam:equip_Wep_Left_GenId(value)
    self:patch4Byte(0xF0,value)
end

function CharaInitParam:equip_Subwep_Left_GenId(value)
    self:patch4Byte(0xF4,value)
end

function CharaInitParam:equip_Helm_GenId(value)
    self:patch4Byte(0xF8,value)
end

function CharaInitParam:equip_Gaunt_GenId(value)
    self:patch4Byte(0xFC,value)
end

function CharaInitParam:equip_Leg_GenId(value)
    self:patch4Byte(0x100,value)
end

function CharaInitParam:equip_Wep_Body_GenId(value)
    self:patch4Byte(0x104,value)
end

function CharaInitParam:SecondaryItem_01(value)
    self:patch4Byte(0x108,value)
end

function CharaInitParam:SecondaryItem_02(value)
    self:patch4Byte(0x10C,value)
end

function CharaInitParam:SecondaryItem_03(value)
    self:patch4Byte(0x110,value)
end

function CharaInitParam:SecondaryItem_04(value)
    self:patch4Byte(0x114,value)
end

function CharaInitParam:SecondaryItem_05(value)
    self:patch4Byte(0x118,value)
end

function CharaInitParam:SecondaryItem_06(value)
    self:patch4Byte(0x11C,value)
end

function CharaInitParam:SecondaryItem_07(value)
    self:patch4Byte(0x120,value)
end

function CharaInitParam:SecondaryItem_08(value)
    self:patch4Byte(0x124,value)
end

function CharaInitParam:secondaryItemNum_01(value)
    self:patchByte(0x128,value)
end

function CharaInitParam:secondaryItemNum_02(value)
    self:patchByte(0x129,value)
end

function CharaInitParam:secondaryItemNum_03(value)
    self:patchByte(0x12A,value)
end

function CharaInitParam:secondaryItemNum_04(value)
    self:patchByte(0x12B,value)
end

function CharaInitParam:secondaryItemNum_05(value)
    self:patchByte(0x12C,value)
end

function CharaInitParam:secondaryItemNum_06(value)
    self:patchByte(0x12D,value)
end

function CharaInitParam:secondaryItemNum_07(value)
    self:patchByte(0x12E,value)
end

function CharaInitParam:secondaryItemNum_08(value)
    self:patchByte(0x12F,value)
end

function CharaInitParam:EstusFlask(value)
    self:patchByte(0x132,value)
end

function CharaInitParam:AshenEstusFlask(value)
    self:patchByte(0x133,value)
end

--Compatibility
function CharaInitParam:Souls(value)
    self:patch4Byte(0x0C,value)
end

function CharaInitParam:PrimaryRightWep(value)
    self:patch4Byte(0x10,value)
end

function CharaInitParam:SecondaryRightWep(value)
    self:patch4Byte(0x14,value)
end

function CharaInitParam:PrimaryLeftWep(value)
    self:patch4Byte(0x18,value)
end

function CharaInitParam:SecondaryLeftWep(value)
    self:patch4Byte(0x1C,value)
end

function CharaInitParam:Helmet(value)
    self:patch4Byte(0x20,value)
end

function CharaInitParam:Armor(value)
    self:patch4Byte(0x24,value)
end

function CharaInitParam:Gauntlet(value)
    self:patch4Byte(0x28,value)
end

function CharaInitParam:Leggings(value)
    self:patch4Byte(0x2C,value)
end

function CharaInitParam:PrimaryArrow(value)
    self:patch4Byte(0x30,value)
end

function CharaInitParam:PrimaryBolt(value)
    self:patch4Byte(0x34,value)
end

function CharaInitParam:SecondaryArrow(value)
    self:patch4Byte(0x38,value)
end

function CharaInitParam:SecondaryBolt(value)
    self:patch4Byte(0x3C,value)
end

function CharaInitParam:Ring1(value)
    self:patch4Byte(0x40,value)
end

function CharaInitParam:Ring2(value)
    self:patch4Byte(0x44,value)
end

function CharaInitParam:Ring3(value)
    self:patch4Byte(0x48,value)
end

function CharaInitParam:Ring4(value)
    self:patch4Byte(0x4C,value)
end

function CharaInitParam:VOW_Type(value)
    self:patch4Byte(0x50,value)
end

function CharaInitParam:AttunementSlot1(value)
    self:patch4Byte(0x60,value)
end

function CharaInitParam:AttunementSlot2(value)
    self:patch4Byte(0x64,value)
end

function CharaInitParam:AttunementSlot3(value)
    self:patch4Byte(0x68,value)
end

function CharaInitParam:AttunementSlot4(value)
    self:patch4Byte(0x6C,value)
end

function CharaInitParam:AttunementSlot5(value)
    self:patch4Byte(0x70,value)
end

function CharaInitParam:AttunementSlot6(value)
    self:patch4Byte(0x74,value)
end

function CharaInitParam:AttunementSlot7(value)
    self:patch4Byte(0x78,value)
end

function CharaInitParam:QuickItem1(value)
    self:patch4Byte(0x7C,value)
end

function CharaInitParam:QuickItem2(value)
    self:patch4Byte(0x80,value)
end

function CharaInitParam:QuickItem3(value)
    self:patch4Byte(0x84,value)
end

function CharaInitParam:QuickItem4(value)
    self:patch4Byte(0x88,value)
end

function CharaInitParam:QuickItem5(value)
    self:patch4Byte(0x8C,value)
end

function CharaInitParam:QuickItem6(value)
    self:patch4Byte(0x90,value)
end

function CharaInitParam:QuickItem7(value)
    self:patch4Byte(0x94,value)
end

function CharaInitParam:QuickItem8(value)
    self:patch4Byte(0x98,value)
end

function CharaInitParam:QuickItem9(value)
    self:patch4Byte(0x9C,value)
end

function CharaInitParam:QuickItem10(value)
    self:patch4Byte(0x100,value)
end

function CharaInitParam:TertiaryRightHand(value)
    self:patch4Byte(0x108,value)
end

function CharaInitParam:TertiaryLeftWep(value)
    self:patch4Byte(0x10C,value)
end

function CharaInitParam:Toolbelt1(value)
    self:patch4Byte(0x114,value)
end

function CharaInitParam:Toolbelt2(value)
    self:patch4Byte(0x118,value)
end

function CharaInitParam:Toolbelt3(value)
    self:patch4Byte(0x11C,value)
end

function CharaInitParam:Toolbelt4(value)
    self:patch4Byte(0x120,value)
end

function CharaInitParam:Toolbelt5(value)
    self:patch4Byte(0x124,value)
end

function CharaInitParam:Toolbelt6(value)
    self:patch4Byte(0x128,value)
end

function CharaInitParam:ToolbeltAmount1(value)
    self:patchByte(0x12C,value)
end

function CharaInitParam:ToolbeltAmount2(value)
    self:patchByte(0x12D,value)
end

function CharaInitParam:ToolbeltAmount3(value)
    self:patchByte(0x12E,value)
end

function CharaInitParam:ToolbeltAmount4(value)
    self:patchByte(0x12F,value)
end

function CharaInitParam:ToolbeltAmount5(value)
    self:patchByte(0x130,value)
end

function CharaInitParam:ToolbeltAmount6(value)
    self:patchByte(0x131,value)
end

[DISABLE]
{$lua}
if syntaxcheck then return end
</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337080265</ID>
                              <Description>"ClearCountCorrectParam"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

ClearCountCorrectParam = BaseParamClass:new()

function ClearCountCorrectParam:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("ClearCountCorrectParam", uuid, id, address)
	return o
end

function ClearCountCorrectParam:MaxHP(value)
    self:patch4Byte(0x00,value)
end

function ClearCountCorrectParam:Unknown1(value)
    self:patch4Byte(0x08,value)
end

function ClearCountCorrectParam:Unknown2(value)
    self:patch4Byte(0x0C,value)
end

function ClearCountCorrectParam:PhysicalATK(value)
    self:patch4Byte(0x1C,value)
end

function ClearCountCorrectParam:MagATK(value)
    self:patch4Byte(0x20,value)
end

function ClearCountCorrectParam:FireATK(value)
    self:patch4Byte(0x24,value)
end

function ClearCountCorrectParam:ThunATK(value)
    self:patch4Byte(0x28,value)
end

function ClearCountCorrectParam:DarkATK(value)
    self:patch4Byte(0x2C,value)
end

function ClearCountCorrectParam:PhysicalDEF(value)
    self:patch4Byte(0x30,value)
end

function ClearCountCorrectParam:MagDEF(value)
    self:patch4Byte(0x34,value)
end

function ClearCountCorrectParam:FireDEF(value)
    self:patch4Byte(0x38,value)
end

function ClearCountCorrectParam:ThunDEF(value)
    self:patch4Byte(0x3C,value)
end

function ClearCountCorrectParam:DarkDEF(value)
    self:patch4Byte(0x40,value)
end

function ClearCountCorrectParam:Unknown3(value)
    self:patch4Byte(0x44,value)
end

function ClearCountCorrectParam:Soul(value)
    self:patch4Byte(0x48,value)
end

function ClearCountCorrectParam:PoisonRES(value)
    self:patch4Byte(0x4C,value)
end

function ClearCountCorrectParam:ToxicRES(value)
    self:patch4Byte(0x50,value)
end

function ClearCountCorrectParam:BloodRES(value)
    self:patch4Byte(0x54,value)
end

function ClearCountCorrectParam:CurseRES(value)
    self:patch4Byte(0x58,value)
end

function ClearCountCorrectParam:FrostRES(value)
    self:patch4Byte(0x5C,value)
end

function ClearCountCorrectParam:Unknown4(value)
    self:patch4Byte(0x64,value)
end

[DISABLE]
{$lua}
if syntaxcheck then return end
</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337290657</ID>
                              <Description>"DecalParam"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]

-- Define DecalParam Class

DecalParam = BaseParamClass:new()

function DecalParam:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("DecalParam", uuid, id, address)
	return o
end

function DecalParam:TextureId(value)
    self:patch4Byte(0x00,value)
end

function DecalParam:dmyPolyId(value)
    self:patch4Byte(0x04,value)
end

function DecalParam:pitchAngle(value)
    self:patchFloat(0x08,value)
end

function DecalParam:yawAngle(value)
    self:patchFloat(0x0C,value)
end

function DecalParam:nearDistance(value)
    self:patchFloat(0x10,value)
end

function DecalParam:farDistance(value)
    self:patchFloat(0x14,value)
end

function DecalParam:nearSize(value)
    self:patchFloat(0x18,value)
end

function DecalParam:farSize(value)
    self:patchFloat(0x1C,value)
end

function DecalParam:maskSpEffectId(value)
    self:patch4Byte(0x20,value)
end

function DecalParam:randomVariationNum0(value)
    self:patchBinary(0x24,value, 0)
end

function DecalParam:randomVariationNum1(value)
    self:patchBinary(0x24,value, 1)
end

function DecalParam:randomVariationNum2(value)
    self:patchBinary(0x24,value, 2)
end

function DecalParam:randomVariationNum3(value)
    self:patchBinary(0x24,value, 3)
end

function DecalParam:replaceTextureId_byMaterial(value)
    self:patchBinary(0x24,value, 4)
end

function DecalParam:dmyPolyCategory0(value)
    self:patchBinary(0x24,value, 5)
end

function DecalParam:dmyPolyCategory1(value)
    self:patchBinary(0x24,value, 6)
end

function DecalParam:decalShapeType0(value)
    self:patchBinary(0x24,value, 7)
end

function DecalParam:decalShapeType1(value)
    self:patchBinary(0x25,value, 0)
end

function DecalParam:decalShapeType2(value)
    self:patchBinary(0x25,value, 1)
end

function DecalParam:decalShapeType3(value)
    self:patchBinary(0x25,value, 2)
end

function DecalParam:useDeferredDecal(value)
    self:patchBinary(0x25,value, 3)
end

function DecalParam:usePaintDecal(value)
    self:patchBinary(0x25,value, 4)
end

function DecalParam:targetAttackChr(value)
    self:patchBinary(0x25,value, 5)
end

function DecalParam:targetDamageChr(value)
    self:patchBinary(0x25,value, 6)
end

function DecalParam:targetOtherChr(value)
    self:patchBinary(0x25,value, 7)
end

function DecalParam:targetMapObj(value)
    self:patchBinary(0x26,value, 0)
end

function DecalParam:usePom(value)
    self:patchBinary(0x26,value, 1)
end

function DecalParam:randomSizeMin(value)
    self:patch2Byte(0x28,value)
end

function DecalParam:randomSizeMax(value)
    self:patch2Byte(0x2A,value)
end

function DecalParam:randomRollMin(value)
    self:patchFloat(0x2C,value)
end

function DecalParam:randomRollMax(value)
    self:patchFloat(0x30,value)
end

function DecalParam:randomPitchMin(value)
    self:patchFloat(0x34,value)
end

function DecalParam:randomPitchMax(value)
    self:patchFloat(0x38,value)
end

function DecalParam:randomYawMin(value)
    self:patchFloat(0x3C,value)
end

function DecalParam:randomYawMax(value)
    self:patchFloat(0x40,value)
end

function DecalParam:pomHeightScale(value)
    self:patchFloat(0x44,value)
end

function DecalParam:pomSampleMin(value)
    self:patchByte(0x48,value)
end

function DecalParam:pomSampleMax(value)
    self:patchByte(0x49,value)
end

function DecalParam:Contrast1(value)
    self:patchByte(0x4A,value)
end

function DecalParam:TextureLengthType(value)
    self:patchByte(0x4B,value)
end

function DecalParam:TextureWidthX(value)
    self:patchFloat(0x4C,value)
end

function DecalParam:TextureWidthZ(value)
    self:patchFloat(0x50,value)
end

function DecalParam:TextureLifeTime(value)
    self:patchFloat(0x60,value)
end

function DecalParam:TextureId1(value)
    self:patch4Byte(0x70,value)
end

function DecalParam:TextureId2(value)
    self:patch4Byte(0x74,value)
end

function DecalParam:TextureId3(value)
    self:patch4Byte(0x78,value)
end

function DecalParam:Brightness(value)
    self:patch4Byte(0x7C,value)
end

function DecalParam:TextureId4(value)
    self:patch4Byte(0x80,value)
end

function DecalParam:TextureId5(value)
    self:patch4Byte(0x84,value)
end

function DecalParam:TextureId6(value)
    self:patch4Byte(0x88,value)
end

function DecalParam:R_Diffuse(value)
    self:patchByte(0x8C,value)
end

function DecalParam:G_Diffuse(value)
    self:patchByte(0x8D,value)
end

function DecalParam:B_Diffuse(value)
    self:patchByte(0x8E,value)
end

function DecalParam:UnkNaM(value)
    self:patchByte(0x8F,value)
end

function DecalParam:R_Specular(value)
    self:patchByte(0x90,value)
end

function DecalParam:G_Specular(value)
    self:patchByte(0x91,value)
end

function DecalParam:B_Specular(value)
    self:patchByte(0x92,value)
end

function DecalParam:DelayedSpawnState(value)
    self:patchByte(0x93,value)
end

function DecalParam:Contrast2(value)
    self:patchFloat(0x94,value)
end

function DecalParam:minVal(value)
    self:patchFloat(0xA4,value)
end

function DecalParam:maxVal(value)
    self:patchFloat(0xA8,value)
end

function DecalParam:DecalSpawnDelay(value)
    self:patch2Byte(0xAE,value)
end

function DecalParam:IsContactPlayer(value)
    self:patchBinary(0xB0,value, 5)
end

function DecalParam:IsFormCube(value)
    self:patchBinary(0xB0,value, 6)
end

function DecalParam:TextureSpawnDelay(value)
    self:patchFloat(0xB4,value)
end

[DISABLE]
</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337080253</ID>
                              <Description>"EquipMtrlSetParam"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]

EquipMtrlSetParam = BaseParamClass:new()

function EquipMtrlSetParam:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("EquipMtrlSetParam", uuid, id, address)
	return o
end

function EquipMtrlSetParam:ItemId0(value)
    self:patch4Byte(0x00,value)
end

function EquipMtrlSetParam:ItemId1(value)
    self:patch4Byte(0x04,value)
end

function EquipMtrlSetParam:ItemId2(value)
    self:patch4Byte(0x08,value)
end

function EquipMtrlSetParam:ItemId3(value)
    self:patch4Byte(0x0C,value)
end

function EquipMtrlSetParam:ItemId4(value)
    self:patch4Byte(0x10,value)
end

function EquipMtrlSetParam:Quantity0(value)
    self:patchByte(0x14,value)
end

function EquipMtrlSetParam:Quantity1(value)
    self:patchByte(0x15,value)
end

function EquipMtrlSetParam:Quantity2(value)
    self:patchByte(0x16,value)
end

function EquipMtrlSetParam:Quantity3(value)
    self:patchByte(0x17,value)
end

function EquipMtrlSetParam:Quantity4(value)
    self:patchByte(0x18,value)
end

function EquipMtrlSetParam:ItemType0(value)
    self:patchByte(0x19,value)
end

function EquipMtrlSetParam:ItemType1(value)
    self:patchByte(0x1A,value)
end

function EquipMtrlSetParam:ItemType2(value)
    self:patchByte(0x1B,value)
end

function EquipMtrlSetParam:ItemType3(value)
    self:patchByte(0x1C,value)
end

function EquipMtrlSetParam:ItemType4(value)
    self:patchByte(0x1D,value)
end

[DISABLE]
</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337080132</ID>
                              <Description>"EquipParamAccessory"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end


EquipParamAccessory = BaseParamClass:new()

function EquipParamAccessory:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("EquipParamAccessory", uuid, id, address)
	return o
end

function EquipParamAccessory:refId(value)
    self:patch4Byte(0x0, value)
end

function EquipParamAccessory:sfxVariation(value)
    self:patch4Byte(0x4, value)
end

function EquipParamAccessory:weight(value)
    self:patchFloat(0x8, value)
end

function EquipParamAccessory:behaviorId(value)
    self:patch4Byte(0xC, value)
end

function EquipParamAccessory:basicPrice(value)
    self:patch4Byte(0x10, value)
end

function EquipParamAccessory:sellValue(value)
    self:patch4Byte(0x14, value)
end

function EquipParamAccessory:sortId(value)
    self:patch4Byte(0x18, value)
end

function EquipParamAccessory:qwcId(value)
    self:patch4Byte(0x1C, value)
end

function EquipParamAccessory:equipModelId(value)
    self:patch2Byte(0x20, value)
end

function EquipParamAccessory:iconId(value)
    self:patch2Byte(0x22, value)
end

function EquipParamAccessory:shopLv(value)
    self:patch2Byte(0x24, value)
end

function EquipParamAccessory:trophySGradeId(value)
    self:patch2Byte(0x26, value)
end

function EquipParamAccessory:trophySeqId(value)
    self:patch2Byte(0x28, value)
end

function EquipParamAccessory:equipModelCategory(value)
    self:patchByte(0x2A, value)
end

function EquipParamAccessory:equipModelGender(value)
    self:patchByte(0x2B, value)
end

function EquipParamAccessory:accessoryCategory(value)
    self:patchByte(0x2C, value)
end

function EquipParamAccessory:refCategory(value)
    self:patchByte(0x2D, value)
end

function EquipParamAccessory:spEffectCategory(value)
    self:patchByte(0x2E, value)
end

function EquipParamAccessory:isDiscard(value)
    self:patchBinary(0x3C, value, 3)
end

function EquipParamAccessory:isDrop(value)
    self:patchBinary(0x3C, value, 4)
end

function EquipParamAccessory:vowType(value)
    self:patchByte(0x46, value)
end

function EquipParamAccessory:refId1(value)
    self:patch4Byte(0x48, value)
end

function EquipParamAccessory:refId2(value)
    self:patch4Byte(0x4C, value)
end

function EquipParamAccessory:refId3(value)
    self:patch4Byte(0x50, value)
end

function EquipParamAccessory:refId4(value)
    self:patch4Byte(0x54, value)
end

--compatibility
function EquipParamAccessory:refId5(value)
    self:patch4Byte(0x0, value)
end

function EquipParamAccessory:Covenant(value)
    self:patchByte(0x46, value)
end

[DISABLE]
{$lua}
if syntaxcheck then return end
</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337080131</ID>
                              <Description>"EquipParamGoods"</Description>
                              <Options moHideChildren="1"/>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

--[[START EquipParamGoods class]]--
EquipParamGoods = BaseParamClass:new()

function EquipParamGoods:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("EquipParamGoods", uuid, id, address)
	return o
end

function EquipParamGoods:refId(value)
	self:patch4Byte(0x0, value)
end

function EquipParamGoods:sfxVariationId(value)
	self:patch4Byte(0x4, value)
end

function EquipParamGoods:weight(value)
	self:patchFloat(0x8, value)
end

function EquipParamGoods:basicPrice(value)
	self:patch4Byte(0xC, value)
end

function EquipParamGoods:sellValue(value)
	self:patch4Byte(0x10, value)
end

function EquipParamGoods:behaviorId(value)
	self:patch4Byte(0x14, value)
end

function EquipParamGoods:replaceItemId(value)
	self:patch4Byte(0x18, value)
end

function EquipParamGoods:sortId(value)
	self:patch4Byte(0x1C, value)
end

function EquipParamGoods:qwcId(value)
	self:patch4Byte(0x20, value)
end

function EquipParamGoods:yesNoDialogMessageId(value)
	self:patch4Byte(0x24, value)
end

function EquipParamGoods:magicId(value)
	self:patch4Byte(0x28, value)
end

function EquipParamGoods:iconId(value)
	self:patch2Byte(0x2C, value)
end

function EquipParamGoods:modelId(value)
	self:patch2Byte(0x2E, value)
end

function EquipParamGoods:shopLv(value)
	self:patch2Byte(0x30, value)
end

function EquipParamGoods:compTrophySedId(value)
	self:patch2Byte(0x32, value)
end

function EquipParamGoods:trophySeqId(value)
	self:patch2Byte(0x34, value)
end

function EquipParamGoods:maxNum(value)
	self:patch2Byte(0x36, value)
end

function EquipParamGoods:consumeHeroPoint(value)
	self:patchByte(0x38, value)
end

function EquipParamGoods:overDexterity(value)
	self:patchByte(0x39, value)
end

function EquipParamGoods:goodsType(value)
	self:patchByte(0x3A, value)
end

function EquipParamGoods:refCategory(value)
	self:patchByte(0x3B, value)
end

function EquipParamGoods:spEffectCategory(value)
	self:patchByte(0x3C, value)
end

function EquipParamGoods:goodsUseAnim(value)
	self:patchByte(0x3E, value)
end

function EquipParamGoods:opmeMenuType(value)
	self:patchByte(0x3F, value)
end

function EquipParamGoods:useLimitCategory(value)
	self:patchByte(0x40, value)
end

function EquipParamGoods:replaceCategory(value)
	self:patchByte(0x41, value)
end

--Vow Types
function EquipParamGoods:vowType0(value)
	self:patchBinary(0x42, value, 0)
end

function EquipParamGoods:vowType1(value)
	self:patchBinary(0x42, value, 1)
end

function EquipParamGoods:vowType2(value)
	self:patchBinary(0x42, value, 2)
end

function EquipParamGoods:vowType3(value)
	self:patchBinary(0x42, value, 3)
end

function EquipParamGoods:vowType4(value)
	self:patchBinary(0x42, value, 4)
end

function EquipParamGoods:vowType5(value)
	self:patchBinary(0x42, value, 5)
end

function EquipParamGoods:vowType6(value)
	self:patchBinary(0x42, value, 6)
end

function EquipParamGoods:vowType7(value)
	self:patchBinary(0x42, value, 7)
end

function EquipParamGoods:vowType8(value)
	self:patchBinary(0x43, value, 0)
end

function EquipParamGoods:vowType9(value)
	self:patchBinary(0x43, value, 1)
end

function EquipParamGoods:vowType10(value)
	self:patchBinary(0x43, value, 2)
end

function EquipParamGoods:vowType11(value)
	self:patchBinary(0x43, value, 3)
end

function EquipParamGoods:vowType12(value)
	self:patchBinary(0x43, value, 4)
end

function EquipParamGoods:vowType13(value)
	self:patchBinary(0x43, value, 5)
end

function EquipParamGoods:vowType14(value)
	self:patchBinary(0x43, value, 6)
end

function EquipParamGoods:vowType15(value)
	self:patchBinary(0x43, value, 7)
end

--Flags
function EquipParamGoods:enable_live(value)
	self:patchBinary(0x44, value, 0)
end

function EquipParamGoods:enable_gray(value)
	self:patchBinary(0x44, value, 1)
end

function EquipParamGoods:enable_white(value)
	self:patchBinary(0x44, value, 2)
end

function EquipParamGoods:enable_black(value)
	self:patchBinary(0x44, value, 3)
end

function EquipParamGoods:enable_multi(value)
	self:patchBinary(0x44, value, 4)
end

function EquipParamGoods:disable_offline(value)
	self:patchBinary(0x44, value, 5)
end

function EquipParamGoods:isEquip(value)
	self:patchBinary(0x44, value, 6)
end

function EquipParamGoods:isConsume(value)
	self:patchBinary(0x44, value, 7)
end

function EquipParamGoods:isAutoEquip(value)
	self:patchBinary(0x45, value, 0)
end

function EquipParamGoods:isEstablishment(value)
	self:patchBinary(0x45, value, 1)
end

function EquipParamGoods:isOnlyOne(value)
	self:patchBinary(0x45, value, 2)
end

function EquipParamGoods:isDiscard(value)
	self:patchBinary(0x45, value, 3)
end

function EquipParamGoods:isDeposit(value)
	self:patchBinary(0x45, value, 4)
end

function EquipParamGoods:isDisableHand(value)
	self:patchBinary(0x45, value, 5)
end

function EquipParamGoods:IsTravelItem(value)
	self:patchBinary(0x45, value, 6)
end

function EquipParamGoods:isSuppleItem(value)
	self:patchBinary(0x45, value, 7)
end

function EquipParamGoods:isFullSuppleItem(value)
	self:patchBinary(0x46, value, 0)
end

function EquipParamGoods:isEnhance(value)
	self:patchBinary(0x46, value, 1)
end

function EquipParamGoods:isFixItem(value)
	self:patchBinary(0x46, value, 2)
end

function EquipParamGoods:disableMultiDropShare(value)
	self:patchBinary(0x46, value, 3)
end

function EquipParamGoods:disableUseAtColiseum(value)
	self:patchBinary(0x46, value, 4)
end

function EquipParamGoods:disableUseAtOutOfColiseum(value)
	self:patchBinary(0x46, value, 5)
end

function EquipParamGoods:useBulletMaxNum(value)
	self:patchBinary(0x46, value, 6)
end

function EquipParamGoods:useHpCureMaxNum(value)
	self:patchBinary(0x46, value, 7)
end

function EquipParamGoods:isAutoReplenish(value)
	self:patchByte(0x47, value)
end

function EquipParamGoods:refId2(value)
    self:patch4Byte(0x48, value)
end

function EquipParamGoods:reinforceTypeId(value)
    self:patch4Byte(0x4C, value)
end

function EquipParamGoods:vagrantItemLotId(value)
	self:patch4Byte(0x50, value)
end

function EquipParamGoods:vagrantBonusEneDropItemLotId(value)
	self:patch4Byte(0x54, value)
end

function EquipParamGoods:vagrantItemEneDropItemLotId(value)
	self:patch4Byte(0x58, value)
end

function EquipParamGoods:sfxId(value)
    self:patch4Byte(0x5C, value)
end

function EquipParamGoods:sfxId1(value)
    self:patch4Byte(0x60, value)
end

function EquipParamGoods:sfxId2(value)
    self:patch4Byte(0x64, value)
end

function EquipParamGoods:isLoadOfCinder(value)
    self:patchBinary(0x68, value, 0)
end

function EquipParamGoods:isPlayRegion1(value)
    self:patchBinary(0x68, value, 1)
end

function EquipParamGoods:isLadder(value)
    self:patchBinary(0x68, value, 2)
end

function EquipParamGoods:isMultiPlay(value)
    self:patchBinary(0x68, value, 3)
end

function EquipParamGoods:useSelected(value)
    self:patchBinary(0x68, value, 4)
end

function EquipParamGoods:isEnhanceLeft(value)
    self:patchBinary(0x68, value, 5)
end

function EquipParamGoods:isPlayRegion2(value)
    self:patchBinary(0x68, value, 6)
end

function EquipParamGoods:isNetPenalized(value)
    self:patchBinary(0x68, value, 7)
end

function EquipParamGoods:SuppleItemType(value)
    self:patchByte(0x69, value)
end

function EquipParamGoods:menuAdhocType(value)
    self:patchByte(0x6A, value)
end

function EquipParamGoods:isDrop(value)
    self:patchByte(0x6B, value)
end

function EquipParamGoods:storageMax(value)
    self:patch2Byte(0x6C, value)
end

function EquipParamGoods:invadeType(value)
    self:patchByte(0x6E, value)
end

function EquipParamGoods:shopId(value)
    self:patch4Byte(0x70, value)
end

function EquipParamGoods:mpCost(value)
    self:patch2Byte(0x74, value)
end

function EquipParamGoods:useLimitCategory2(value)
    self:patchByte(0x76, value)
end

--Compatibility stuff
function EquipParamGoods:isUse(value)
    self:patchBinary(0x68, value, 0)
end

function EquipParamGoods:refId1(value)
	self:patch4Byte(0x0, value)
end

function EquipParamGoods:isEnhance1(value)
	self:patchBinary(0x46, value, 1)
end

function EquipParamGoods:DamageScaling(value)
    self:patch4Byte(0x4C, value)
end

function EquipParamGoods:ladderUse(value)
    self:patchBinary(0x68, value, 2)
end

function EquipParamGoods:isUseSelected(value)
    self:patchBinary(0x68, value, 4)
end

function EquipParamGoods:FPCost(value)
    self:patch2Byte(0x74, value)
end

function EquipParamGoods:fpConsume(value)
    self:patch2Byte(0x74, value)
end

function EquipParamGoods:specialRestrict(value)
    self:patchByte(0x76, value)
end


--[[END EquipParamGoods class]]--

[DISABLE]
{$lua}
if syntaxcheck then return end

</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337080130</ID>
                              <Description>"EquipParamProtector"</Description>
                              <Options moHideChildren="1"/>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

--[[START EquipParamProtector class]]--
EquipParamProtector = BaseParamClass:new()

function EquipParamProtector:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("EquipParamProtector", uuid, id, address)
	return o
end

function EquipParamProtector:sortId(value)
	self:patch4Byte(0x0, value)
end

function EquipParamProtector:wanderingEquipId(value)
	self:patch4Byte(0x4, value)
end

function EquipParamProtector:vagrantItemLotId(value)
	self:patch4Byte(0x8, value)
end

function EquipParamProtector:vagrantBonusEneDropItemLotId(value)
	self:patch4Byte(0xC, value)
end

function EquipParamProtector:vagrantItemEneDropItemLotId(value)
	self:patch4Byte(0x10, value)
end

--Prices
function EquipParamProtector:fixPrice(value)
	self:patch4Byte(0x14, value)
end

function EquipParamProtector:basicPrice(value)
	self:patch4Byte(0x18, value)
end

function EquipParamProtector:sellValue(value)
	self:patch4Byte(0x1C, value)
end

function EquipParamProtector:weight(value)
	self:patchFloat(0x20, value)
end

--Effect On Equip
function EquipParamProtector:residentSpEffectId(value)
	self:patch4Byte(0x24, value)
end

function EquipParamProtector:residentSpEffectId2(value)
	self:patch4Byte(0x28, value)
end

function EquipParamProtector:residentSpEffectId3(value)
	self:patch4Byte(0x2C, value)
end


function EquipParamProtector:materialSetId(value)
	self:patch4Byte(0x30, value)
end

function EquipParamProtector:partsDamageRate(value)
	self:patchFloat(0x34, value)
end

function EquipParamProtector:corectSARecover(value)
	self:patchFloat(0x38, value)
end

--Origin Equip Pros
function EquipParamProtector:originEquipPro(value)
	self:patch4Byte(0x3C, value)
end

function EquipParamProtector:originEquipPro1(value)
	self:patch4Byte(0x40, value)
end

function EquipParamProtector:originEquipPro2(value)
	self:patch4Byte(0x44, value)
end

function EquipParamProtector:originEquipPro3(value)
	self:patch4Byte(0x48, value)
end

function EquipParamProtector:originEquipPro4(value)
	self:patch4Byte(0x4C, value)
end

function EquipParamProtector:originEquipPro5(value)
	self:patch4Byte(0x50, value)
end

function EquipParamProtector:originEquipPro6(value)
	self:patch4Byte(0x54, value)
end

function EquipParamProtector:originEquipPro7(value)
	self:patch4Byte(0x58, value)
end

function EquipParamProtector:originEquipPro8(value)
	self:patch4Byte(0x5C, value)
end

function EquipParamProtector:originEquipPro9(value)
	self:patch4Byte(0x60, value)
end

function EquipParamProtector:originEquipPro10(value)
	self:patch4Byte(0x64, value)
end

function EquipParamProtector:originEquipPro11(value)
	self:patch4Byte(0x68, value)
end

function EquipParamProtector:originEquipPro12(value)
	self:patch4Byte(0x6C, value)
end

function EquipParamProtector:originEquipPro13(value)
	self:patch4Byte(0x70, value)
end

function EquipParamProtector:originEquipPro14(value)
	self:patch4Byte(0x74, value)
end

function EquipParamProtector:originEquipPro15(value)
	self:patch4Byte(0x78, value)
end

--faceScale

function EquipParamProtector:faceScaleM_ScaleX(value)
	self:patchFloat(0x7C, value)
end

function EquipParamProtector:faceScaleM_ScaleZ(value)
	self:patchFloat(0x80, value)
end

function EquipParamProtector:faceScaleM_MaxX(value)
	self:patchFloat(0x84, value)
end

function EquipParamProtector:faceScaleM_MaxZ(value)
	self:patchFloat(0x88, value)
end

function EquipParamProtector:faceScaleF_ScaleX(value)
	self:patchFloat(0x8C, value)
end

function EquipParamProtector:faceScaleF_ScaleZ(value)
	self:patchFloat(0x90, value)
end

function EquipParamProtector:faceScaleF_MaxX(value)
	self:patchFloat(0x94, value)
end

function EquipParamProtector:faceScaleF_MaxZ(value)
	self:patchFloat(0x98, value)
end

function EquipParamProtector:qwcId(value)
	self:patch4Byte(0x9C, value)
end


function EquipParamProtector:equipModelId(value)
	self:patch2Byte(0xA0, value)
end

function EquipParamProtector:iconIdM(value)
	self:patch2Byte(0xA2, value)
end

function EquipParamProtector:iconIdF(value)
	self:patch4Byte(0xA4, value)
end

function EquipParamProtector:knockbackBounceRate(value)
	self:patch2Byte(0xA8, value)
end

--Durability
function EquipParamProtector:durability(value)
	self:patch2Byte(0xAA, value)
end

function EquipParamProtector:durabilityMax(value)
	self:patch2Byte(0xAC, value)
end

function EquipParamProtector:saDurability(value)
	self:patch2Byte(0xAE, value)
end


function EquipParamProtector:defFlickPower(value)
	self:patch2Byte(0xB0, value)
end

function EquipParamProtector:defensePhysics(value)
	self:patch2Byte(0xB2, value)
end

function EquipParamProtector:defenseMagic(value)
	self:patch2Byte(0xB4, value)
end

function EquipParamProtector:defenseFire(value)
	self:patch2Byte(0xB6, value)
end

function EquipParamProtector:defenseThunder(value)
	self:patch2Byte(0xB8, value)
end

function EquipParamProtector:defenseSlash(value)
	self:patch2Byte(0xBA, value)
end

function EquipParamProtector:defenseBlow(value)
	self:patch2Byte(0xBC, value)
end

function EquipParamProtector:defenseThrust(value)
	self:patch2Byte(0xBE, value)
end


--Resistence
function EquipParamProtector:resistPoison(value)
	self:patch2Byte(0xC0, value)
end

function EquipParamProtector:resistDisease(value)
	self:patch2Byte(0xC2, value)
end

function EquipParamProtector:resistBlood(value)
	self:patch2Byte(0xC4, value)
end

function EquipParamProtector:resistCurse(value)
	self:patch2Byte(0xC6, value)
end

function EquipParamProtector:reinforceTypeId(value)
	self:patch2Byte(0xC8, value)
end

function EquipParamProtector:trophySGradeId(value)
	self:patch2Byte(0xCA, value)
end

function EquipParamProtector:shopLv(value)
	self:patch2Byte(0xCC, value)
end

function EquipParamProtector:knockbackParamId(value)
	self:patchByte(0xCE, value)
end

function EquipParamProtector:flickDamageCutRate(value)
	self:patchByte(0xCF, value)
end

function EquipParamProtector:equipModelCategory(value)
	self:patchByte(0xD0, value)
end

function EquipParamProtector:equipModelGender(value)
	self:patchByte(0xD0, value)
end

function EquipParamProtector:protectorCategory(value)
    self:patchByte(0xD2, value)
end

function EquipParamProtector:defenseMaterial(value)
    self:patchByte(0xD3, value)
end

function EquipParamProtector:defenseMaterialSfx(value)
    self:patchByte(0xD4, value)
end

function EquipParamProtector:partsDmgType(value)
    self:patchByte(0xD5, value)
end

function EquipParamProtector:defenseMaterial_Weak(value)
    self:patchByte(0xD6, value)
end

function EquipParamProtector:defenseMaterialSfx_Weak(value)
    self:patchByte(0xD7, value)
end


function EquipParamProtector:isDiscard(value)
    self:patchBinary(0xDF, value, 0)
end

function EquipParamProtector:isDrop(value)
    self:patchBinary(0xDF, value, 1)
end



--Defense
function EquipParamProtector:absorbtionPhysical(value)
	self:patchFloat(0xE0, value)
end

function EquipParamProtector:absorbtionSlash(value)
	self:patchFloat(0xE4, value)
end

function EquipParamProtector:absorbtionStrike(value)
	self:patchFloat(0xE8, value)
end

function EquipParamProtector:absorbtionThrust(value)
	self:patchFloat(0xEC, value)
end

function EquipParamProtector:absorbtionMagic(value)
	self:patchFloat(0xF0, value)
end

function EquipParamProtector:absorbtionFire(value)
	self:patchFloat(0xF4, value)
end

function EquipParamProtector:absorbtionThunder(value)
	self:patchFloat(0xF8, value)
end


function EquipParamProtector:poise(value)
	self:patchFloat(0x110, value)
end

function EquipParamProtector:absorbtionDark(value)
	self:patchFloat(0x118, value)
end

function EquipParamProtector:defenseDark(value)
	self:patch2Byte(0x11C, value)
end

function EquipParamProtector:UpperArmID(value)
	self:patch4Byte(0x124, value)
end

function EquipParamProtector:shopPrice(value)
	self:patch4Byte(0x128, value)
end

function EquipParamProtector:resistFrost(value)
	self:patch2Byte(0x12C, value)
end

--[[END EquipParamProtector class]]--

[DISABLE]
{$lua}
if syntaxcheck then return end

</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337080129</ID>
                              <Description>"EquipParamWeapon"</Description>
                              <Options moHideChildren="1"/>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

--[[START EquipParamWeapon class]]--
EquipParamWeapon = BaseParamClass:new()

function EquipParamWeapon:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("EquipParamWeapon", uuid, id, address)
	return o
end

function EquipParamWeapon:behaviorVariationId(value)
	self:patch4Byte(0x0, value)
end

function EquipParamWeapon:sortId(value)
	self:patch4Byte(0x4, value)
end

function EquipParamWeapon:wanderingEquipId(value)
	self:patch4Byte(0x8, value)
end

-- Weight
function EquipParamWeapon:weight(value)
	self:patchFloat(0xC, value)
end

function EquipParamWeapon:weaponWeightRate(value)
	self:patchFloat(0x10, value)
end

-- Prices
function EquipParamWeapon:fixPrice(value)
	self:patch4Byte(0x14, value)
end

function EquipParamWeapon:basicPrice(value)
	self:patch4Byte(0x18, value)
end

function EquipParamWeapon:sellValue(value)
	self:patch4Byte(0x1C, value)
end

-- Scaling
function EquipParamWeapon:correctStrength(value)
	self:patchFloat(0x20, value)
end

function EquipParamWeapon:correctAgility(value)
	self:patchFloat(0x24, value)
end

function EquipParamWeapon:correctMagic(value)
	self:patchFloat(0x28, value)
end

function EquipParamWeapon:correctFaith(value)
	self:patchFloat(0x2C, value)
end

--Block Rate
function EquipParamWeapon:physGuardCutRate(value)
	self:patchFloat(0x30, value)
end

function EquipParamWeapon:magGuardCutRate(value)
	self:patchFloat(0x34, value)
end

function EquipParamWeapon:fireGuardCutRate(value)
	self:patchFloat(0x38, value)
end

function EquipParamWeapon:thunGuardCutRate(value)
	self:patchFloat(0x3C, value)
end

-- Effects on hit
function EquipParamWeapon:spEffectBehaviorId(value)
	self:patch4Byte(0x40, value)
end

function EquipParamWeapon:spEffectBehaviorId1(value)
	self:patch4Byte(0x44, value)
end

function EquipParamWeapon:spEffectBehaviorId2(value)
	self:patch4Byte(0x48, value)
end

-- Effects on self
function EquipParamWeapon:residentSpEffectId(value)
	self:patch4Byte(0x4C, value)
end

function EquipParamWeapon:residentSpEffectId1(value)
	self:patch4Byte(0x50, value)
end

function EquipParamWeapon:residentSpEffectId2(value)
	self:patch4Byte(0x54, value)
end

function EquipParamWeapon:materialSetId(value)
	self:patch4Byte(0x58, value)
end

--Origin Equip Weapon
function EquipParamWeapon:originEquipWep(value)
	self:patch4Byte(0x5C, value)
end

function EquipParamWeapon:originEquipWep1(value)
	self:patch4Byte(0x60, value)
end

function EquipParamWeapon:originEquipWep2(value)
	self:patch4Byte(0x64, value)
end

function EquipParamWeapon:originEquipWep3(value)
	self:patch4Byte(0x68, value)
end

function EquipParamWeapon:originEquipWep4(value)
	self:patch4Byte(0x6C, value)
end

function EquipParamWeapon:originEquipWep5(value)
	self:patch4Byte(0x70, value)
end

function EquipParamWeapon:originEquipWep6(value)
	self:patch4Byte(0x74, value)
end

function EquipParamWeapon:originEquipWep7(value)
	self:patch4Byte(0x78, value)
end

function EquipParamWeapon:originEquipWep8(value)
	self:patch4Byte(0x7C, value)
end

function EquipParamWeapon:originEquipWep9(value)
	self:patch4Byte(0x80, value)
end

function EquipParamWeapon:originEquipWep10(value)
	self:patch4Byte(0x84, value)
end

function EquipParamWeapon:originEquipWep11(value)
	self:patch4Byte(0x88, value)
end

function EquipParamWeapon:originEquipWep12(value)
	self:patch4Byte(0x8C, value)
end

function EquipParamWeapon:originEquipWep13(value)
	self:patch4Byte(0x90, value)
end

function EquipParamWeapon:originEquipWep14(value)
	self:patch4Byte(0x94, value)
end

function EquipParamWeapon:originEquipWep15(value)
	self:patch4Byte(0x98, value)
end

--Anti Damage Rate
function EquipParamWeapon:antiDemonDamageRate(value)
	self:patchFloat(0x9C, value)
end

function EquipParamWeapon:antUndeadDamageRate(value)
	self:patchFloat(0xA0, value)
end

function EquipParamWeapon:antHollowDamageRate(value)
	self:patchFloat(0xA4, value)
end

function EquipParamWeapon:antAbyssalDamageRate(value)
	self:patchFloat(0xA8, value)
end

-- AC-BA
function EquipParamWeapon:vagrantItemLotId(value)
	self:patch4Byte(0xAC, value)
end

function EquipParamWeapon:vagrantBonusEneDropItemLotId(value)
	self:patch4Byte(0xB0, value)
end

function EquipParamWeapon:vagrantItemEneDropItemLotId(value)
	self:patch4Byte(0xB4, value)
end

function EquipParamWeapon:equipModelId(value)
	self:patch2Byte(0xB8, value)
end

function EquipParamWeapon:iconId(value)
	self:patch2Byte(0xBA, value)
end

-- Durability
function EquipParamWeapon:durability(value)
	self:patch2Byte(0xBC, value)
end

function EquipParamWeapon:durabilityMax(value)
	self:patch2Byte(0xBE, value)
end

-- C0-C2
function EquipParamWeapon:attackThrowEscape(value)
	self:patch2Byte(0xC0, value)
end

function EquipParamWeapon:parryDamageLife(value)
	self:patch2Byte(0xC2, value)
end

--Attack Damage
function EquipParamWeapon:attackBasePhysics(value)
	self:patch2Byte(0xC4, value)
end

function EquipParamWeapon:attackBaseMagic(value)
	self:patch2Byte(0xC6, value)
end

function EquipParamWeapon:attackBaseFire(value)
	self:patch2Byte(0xC8, value)
end

function EquipParamWeapon:attackBaseThunder(value)
	self:patch2Byte(0xCA, value)
end

function EquipParamWeapon:attackBaseStamina(value) -- Stamina consuption to block
	self:patch2Byte(0xCC, value)
end

-- CE-ED
function EquipParamWeapon:saWeaponDamage(value)
	self:patch2Byte(0xCE, value)
end

function EquipParamWeapon:saDurability(value)
	self:patch2Byte(0xD0, value)
end

function EquipParamWeapon:guardAngle(value)
	self:patch2Byte(0xD2, value)
end

function EquipParamWeapon:staminaGuardDef(value)
	self:patch2Byte(0xD4, value)
end

function EquipParamWeapon:reinforceTypeId(value)
	self:patch2Byte(0xD6, value)
end

function EquipParamWeapon:trophySGradeId(value)
	self:patch2Byte(0xD8, value)
end

function EquipParamWeapon:trophySeqId(value)
	self:patch2Byte(0xDA, value)
end

function EquipParamWeapon:throwAtkRate(value) --100 minimum
	self:patch2Byte(0xDC, value)
end

function EquipParamWeapon:bowDistRate(value)
	self:patch2Byte(0xDE, value)
end

function EquipParamWeapon:equipModelCategory(value)
	self:patchByte(0xE0, value)
end

function EquipParamWeapon:equipModelGender(value)
	self:patchByte(0xE1, value)
end

function EquipParamWeapon:weaponCategory(value)
	self:patchByte(0xE2, value)
end

function EquipParamWeapon:wepmotionCategory(value)
	self:patchByte(0xE3, value)
end

function EquipParamWeapon:guardmotionCategory(value)
	self:patchByte(0xE4, value)
end

function EquipParamWeapon:atkMaterial(value)
	self:patchByte(0xE5, value)
end

function EquipParamWeapon:defMaterial(value)
	self:patchByte(0xE6, value)
end

function EquipParamWeapon:defSfxMaterial(value)
	self:patchByte(0xE7, value)
end

function EquipParamWeapon:correctType(value)
	self:patchByte(0xE8, value)
end

function EquipParamWeapon:spAttribute(value)
	self:patchByte(0xE9, value)
end

function EquipParamWeapon:spAtkcategory(value)
	self:patch2Byte(0xEA, value)
end

function EquipParamWeapon:wepmotionOneHandId(value)
	self:patchByte(0xEC, value)
end

function EquipParamWeapon:wepmotionBothHandId(value)
	self:patchByte(0xED, value)
end

-- Requirements
function EquipParamWeapon:properStrength(value)
	self:patchByte(0xEE, value)
end

function EquipParamWeapon:properAgility(value)
	self:patchByte(0xEF, value)
end

function EquipParamWeapon:properMagic(value)
	self:patchByte(0xF0, value)
end

function EquipParamWeapon:properFaith(value)
	self:patchByte(0xF1, value)
end

-- F2-100
function EquipParamWeapon:overStrength(value)
	self:patchByte(0xF2, value)
end

function EquipParamWeapon:attackBaseParry(value)
	self:patchByte(0xF3, value)
end

function EquipParamWeapon:defenseBaseParry(value)
	self:patchByte(0xF4, value)
end

function EquipParamWeapon:guardBaseRepel(value)
	self:patchByte(0xF5, value)
end

function EquipParamWeapon:attackBaseRepel(value)
	self:patchByte(0xF6, value)
end

function EquipParamWeapon:guardCutCancelRate(value)
	self:patchByte(0xF7, value)
end

function EquipParamWeapon:guardLevel(value)
	self:patchByte(0xF8, value)
end

function EquipParamWeapon:slashGuardCutRate(value)
	self:patchByte(0xF9, value)
end

function EquipParamWeapon:blowGuardCutRate(value)
	self:patchByte(0xFA, value)
end

function EquipParamWeapon:thrustGuardCutRate(value)
	self:patchByte(0xFB, value)
end

function EquipParamWeapon:poisonGuardResist(value)
	self:patchByte(0xFC, value)
end

function EquipParamWeapon:diseaseGuardResist(value)
	self:patchByte(0xFD, value)
end

function EquipParamWeapon:bloodGuardResist(value)
	self:patchByte(0xFE, value)
end

function EquipParamWeapon:curseGuardResist(value)
	self:patchByte(0xFF, value)
end

function EquipParamWeapon:isDurabilityDivergence(value)
	self:patchByte(0x100, value)
end

-- Flags
-- 101
function EquipParamWeapon:rightHandEquipable(value)
	self:patchBinary(0x101, value, 0)
end

function EquipParamWeapon:leftHandEquipable(value)
	self:patchBinary(0x101, value, 1)
end

function EquipParamWeapon:bothHandEquipable(value)
	self:patchBinary(0x101, value, 2)
end

function EquipParamWeapon:arrowSlotEquipable(value)
	self:patchBinary(0x101, value, 3)
end

function EquipParamWeapon:boltSlotEquipable(value)
	self:patchBinary(0x101, value, 4)
end

function EquipParamWeapon:enableGuard(value)
	self:patchBinary(0x101, value, 5)
end

function EquipParamWeapon:enableParry(value)
	self:patchBinary(0x101, value, 6)
end

function EquipParamWeapon:enableMagic(value)
	self:patchBinary(0x101, value, 7)
end

-- 102
function EquipParamWeapon:enableSorcery(value) --Pyromancy
	self:patchBinary(0x102, value, 0)
end

function EquipParamWeapon:enableMiracle(value)
	self:patchBinary(0x102, value, 1)
end

function EquipParamWeapon:enableVowMagic(value)
	self:patchBinary(0x102, value, 2)
end

function EquipParamWeapon:isNormalAttackType(value)
	self:patchBinary(0x102, value, 3)
end

function EquipParamWeapon:isBlowAttackType(value)
	self:patchBinary(0x102, value, 4)
end

function EquipParamWeapon:isSlashAttackType(value)
	self:patchBinary(0x102, value, 5)
end

function EquipParamWeapon:isThrustAttackType(value)
	self:patchBinary(0x102, value, 6)
end

function EquipParamWeapon:isEnhance(value)
	self:patchBinary(0x102, value, 7)
end

-- 103
function EquipParamWeapon:isLuckCorrect(value)
	self:patchBinary(0x103, value, 0)
end

function EquipParamWeapon:isCustom(value)
	self:patchBinary(0x103, value, 1)
end

function EquipParamWeapon:disableBaseChangeReset(value)
	self:patchBinary(0x103, value, 2)
end

function EquipParamWeapon:disableRepair(value)
	self:patchBinary(0x103, value, 3)
end

function EquipParamWeapon:isDarkHand(value)
	self:patchBinary(0x103, value, 4)
end

function EquipParamWeapon:simpleModelForDlc(value)
	self:patchBinary(0x103, value, 5)
end

function EquipParamWeapon:lanternWep(value)
	self:patchBinary(0x103, value, 6)
end

function EquipParamWeapon:isVersusGhostWep(value)
	self:patchBinary(0x103, value, 7)
end

--Changes the infusion icon
function EquipParamWeapon:baseChangeCategory(value)
	self:patchBinary(0x104, value, 0)
end
function EquipParamWeapon:baseChangeCategory1(value)
	self:patchBinary(0x104, value, 1)
end
function EquipParamWeapon:baseChangeCategory2(value)
	self:patchBinary(0x104, value, 2)
end
function EquipParamWeapon:baseChangeCategory3(value)
	self:patchBinary(0x104, value, 3)
end
function EquipParamWeapon:baseChangeCategory4(value)
	self:patchBinary(0x104, value, 4)
end
function EquipParamWeapon:baseChangeCategory5(value)
	self:patchBinary(0x104, value, 5)
end

--Greatbow/Greatarrow
function EquipParamWeapon:isDragonSlayer(value)
	self:patchBinary(0x104, value, 6)
end

function EquipParamWeapon:isDeposit(value)
	self:patchBinary(0x104, value, 7)
end

function EquipParamWeapon:disableMultiDropShare(value)
	self:patchBinary(0x105, value, 0)
end

function EquipParamWeapon:isDiscard(value)
	self:patchBinary(0x105, value, 1)
end

function EquipParamWeapon:isDrop(value)
	self:patchBinary(0x105, value, 2)
end

function EquipParamWeapon:defMaterial2(value)
	self:patch2Byte(0x106, value)
end

function EquipParamWeapon:wepCollidableType0(value)
	self:patchByte(0x108, value)
end

function EquipParamWeapon:wepCollidableType1(value)
	self:patchByte(0x109, value)
end

function EquipParamWeapon:wepCollidableType2(value)
	self:patchByte(0x10A, value)
end

function EquipParamWeapon:wepCollidableType3(value)
	self:patchByte(0x10B, value)
end

function EquipParamWeapon:traceSfxId0(value)
	self:patch4Byte(0x10C, value)
end

function EquipParamWeapon:traceDmyIdHead0(value)
	self:patch4Byte(0x110, value)
end

function EquipParamWeapon:traceDmyIdTail0(value)
	self:patch4Byte(0x114, value)
end

function EquipParamWeapon:traceSfxId1(value)
	self:patch4Byte(0x118, value)
end

function EquipParamWeapon:traceDmyIdHead1(value)
	self:patch4Byte(0x11C, value)
end

function EquipParamWeapon:traceDmyIdTail1(value)
	self:patch4Byte(0x120, value)
end

function EquipParamWeapon:traceSfxId2(value)
	self:patch4Byte(0x124, value)
end

function EquipParamWeapon:traceDmyIdHead2(value)
	self:patch4Byte(0x128, value)
end

function EquipParamWeapon:traceDmyIdTail2(value)
	self:patch4Byte(0x12C, value)
end

function EquipParamWeapon:traceSfxId3(value)
	self:patch4Byte(0x130, value)
end

function EquipParamWeapon:traceDmyIdHead3(value)
	self:patch4Byte(0x134, value)
end

function EquipParamWeapon:traceDmyIdTail3(value)
	self:patch4Byte(0x138, value)
end

function EquipParamWeapon:traceSfxId4(value)
	self:patch4Byte(0x13C, value)
end

function EquipParamWeapon:traceDmyIdHead4(value)
	self:patch4Byte(0x140, value)
end

function EquipParamWeapon:traceDmyIdTail4(value)
	self:patch4Byte(0x144, value)
end

function EquipParamWeapon:traceSfxId5(value)
	self:patch4Byte(0x148, value)
end

function EquipParamWeapon:traceDmyIdHead5(value)
	self:patch4Byte(0x14C, value)
end

function EquipParamWeapon:traceDmyIdTail5(value)
	self:patch4Byte(0x150, value)
end

function EquipParamWeapon:traceSfxId6(value)
	self:patch4Byte(0x154, value)
end

function EquipParamWeapon:traceDmyIdHead6(value)
	self:patch4Byte(0x158, value)
end

function EquipParamWeapon:traceDmyIdTail6(value)
	self:patch4Byte(0x15C, value)
end

function EquipParamWeapon:traceSfxId7(value)
	self:patch4Byte(0x160, value)
end

function EquipParamWeapon:traceDmyIdHead7(value)
	self:patch4Byte(0x164, value)
end

function EquipParamWeapon:traceDmyIdTail7(value)
	self:patch4Byte(0x168, value)
end

function EquipParamWeapon:defSfxMaterial2(value)
	self:patch2Byte(0x16C, value)
end

function EquipParamWeapon:defSeMaterial2(value)
	self:patch2Byte(0x16E, value)
end

function EquipParamWeapon:absorpParamId(value)
	self:patch4Byte(0x170, value)
end

function EquipParamWeapon:toughnessCorrectRate(value)
	self:patchFloat(0x174, value)
end

function EquipParamWeapon:isValidTough_ProtSADmg(value)
	self:patchBinary(0x178, value, 0)
end

function EquipParamWeapon:isDualBlade(value)
	self:patchBinary(0x178, value, 1)
end

function EquipParamWeapon:isAutoEquip(value)
	self:patchBinary(0x178, value, 2)
end

function EquipParamWeapon:isEnableEmergencyStep(value)
	self:patchBinary(0x178, value, 3)
end

function EquipParamWeapon:invisibleOnRemo(value)
	self:patchBinary(0x178, value, 4)
end

function EquipParamWeapon:correctType_Magic(value)
	self:patchByte(0x179, value)
end

function EquipParamWeapon:correctType_Fire(value)
	self:patchByte(0x17A, value)
end

function EquipParamWeapon:correctType_Thunder(value)
	self:patchByte(0x17B, value)
end

function EquipParamWeapon:weakE_DamageRate(value)
	self:patchFloat(0x17C, value)
end

function EquipParamWeapon:weakF_DamageRate(value)
	self:patchFloat(0x180, value)
end

function EquipParamWeapon:darkGuardCutRate(value)
	self:patchFloat(0x184, value)
end

function EquipParamWeapon:attackBaseDark(value)
	self:patch2Byte(0x188, value)
end

function EquipParamWeapon:correctType_Dark(value)
	self:patchByte(0x18A, value)
end

function EquipParamWeapon:correctType_Poison(value)
	self:patchByte(0x18B, value)
end

function EquipParamWeapon:swordArtsId(value)
	self:patchByte(0x18C, value)
end

function EquipParamWeapon:correctType_Blood(value)
	self:patchByte(0x190, value)
end

function EquipParamWeapon:properLuck(value)
	self:patchByte(0x191, value)
end

function EquipParamWeapon:frostGuardResist(value)
	self:patchByte(0x192, value)
end

function EquipParamWeapon:MenuAdhoc(value)
	self:patchByte(0x193, value)
end

function EquipParamWeapon:swordArtsParamId(value)
	self:patch4Byte(0x194, value)
end

function EquipParamWeapon:correctLuck(value)
	self:patchFloat(0x198, value)
end

function EquipParamWeapon:DerivationLevelType(value)
	self:patch4Byte(0x19C, value)
end

function EquipParamWeapon:displayTypeId(value)
	self:patch2Byte(0x1A2, value)
end


function EquipParamWeapon:sfxId0(value)
	self:patch4Byte(0x1D0, value)
end

function EquipParamWeapon:sfxId1(value)
	self:patch4Byte(0x1D4, value)
end

function EquipParamWeapon:sfxId2(value)
	self:patch4Byte(0x1D8, value)
end

function EquipParamWeapon:sfxId3(value)
	self:patch4Byte(0x1DC, value)
end

function EquipParamWeapon:sfxPos0(value)
	self:patch4Byte(0x1E0, value)
end

function EquipParamWeapon:sfxPos1(value)
	self:patch4Byte(0x1E4, value)
end

function EquipParamWeapon:sfxPos2(value)
	self:patch4Byte(0x1E8, value)
end

function EquipParamWeapon:sfxPos3(value)
	self:patch4Byte(0x1EC, value)
end

function EquipParamWeapon:staminaConsumeRate(value)
	self:patchFloat(0x1F0, value)
end

--

function EquipParamWeapon:attackElementCorrectId(value)
	self:patch4Byte(0x228, value)
end

function EquipParamWeapon:shopPrice(value)
	self:patch4Byte(0x22C, value)
end

function EquipParamWeapon:ReinforcementMenuType(value)
    self:patchByte(0x231, value)
end

function EquipParamWeapon:stackSize(value)
    self:patchByte(0x231, value)
end

--Compatibility
function EquipParamWeapon:enablePyromancy(value)
	self:patchBinary(0x102, value, 0)
end

function EquipParamWeapon:Group0_AtkVfxId(value)
	self:patch4Byte(0x10C, value)
end

function EquipParamWeapon:Group0_DummyPolyId0(value)
	self:patch4Byte(0x110, value)
end

function EquipParamWeapon:Group0_DummyPolyId1(value)
	self:patch4Byte(0x114, value)
end

function EquipParamWeapon:materialVal0(value)
	self:patch2Byte(0x16C, value)
end

function EquipParamWeapon:materialVal1(value)
	self:patch2Byte(0x16E, value)
end

function EquipParamWeapon:weaponPosition(value)
	self:patch4Byte(0x170, value)
end

function EquipParamWeapon:correctTypeMagic(value)
	self:patchByte(0x179, value)
end

function EquipParamWeapon:correctTypeFire(value)
	self:patchByte(0x17A, value)
end

function EquipParamWeapon:correctTypeThunder(value)
	self:patchByte(0x17B, value)
end

function EquipParamWeapon:correctTypeDark(value)
	self:patchByte(0x18A, value)
end

function EquipParamWeapon:AtkThrowEscapeA(value)
	self:patchByte(0x18B, value)
end

function EquipParamWeapon:swordArt_ActId(value)
	self:patchByte(0x18C, value)
end

function EquipParamWeapon:AtkThrowEscapeB(value)
	self:patchByte(0x190, value)
end

function EquipParamWeapon:weaponArt(value)
	self:patch4Byte(0x194, value)
end

function EquipParamWeapon:swordArt(value)
	self:patch4Byte(0x194, value)
end

function EquipParamWeapon:swordArtId(value)
	self:patch4Byte(0x194, value)
end

function EquipParamWeapon:reinforceWeaponId(value)
	self:patch4Byte(0x19C, value)
end

function EquipParamWeapon:quiverModel(value)
	self:patch4Byte(0x19C, value)
end

function EquipParamWeapon:categoryName(value)
	self:patch2Byte(0x1A2, value)
end

function EquipParamWeapon:StaminaConsumeRate(value)
	self:patchFloat(0x1F0, value)
end

function EquipParamWeapon:staminaConsumption(value)
	self:patchFloat(0x1F0, value)
end

function EquipParamWeapon:AttackElementCorrect(value)
	self:patch4Byte(0x228, value)
end

function EquipParamWeapon:StackSize(value)
    self:patchByte(0x231, value)
end

--[[END EquipParamWeapon class]]--

[DISABLE]
{$lua}
if syntaxcheck then return end

</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337080263</ID>
                              <Description>"HitEffectSfxParam"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

HitEffectSfxParam = BaseParamClass:new()

function HitEffectSfxParam:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("HitEffectSfxParam", uuid, id, address)
	return o
end

function HitEffectSfxParam:Sfx1(value)
    self:patch4Byte(0x0, value)
end

function HitEffectSfxParam:Sfx2(value)
    self:patch4Byte(0x4, value)
end

function HitEffectSfxParam:Sfx3(value)
    self:patch4Byte(0x8, value)
end

function HitEffectSfxParam:Sfx4(value)
    self:patch4Byte(0xC, value)
end

function HitEffectSfxParam:Sfx5(value)
    self:patch4Byte(0x10, value)
end

function HitEffectSfxParam:Sfx6(value)
    self:patch4Byte(0x14, value)
end

function HitEffectSfxParam:Sfx7(value)
    self:patch4Byte(0x18, value)
end

function HitEffectSfxParam:Sfx8(value)
    self:patch4Byte(0x1C, value)
end

function HitEffectSfxParam:Sfx9(value)
    self:patch4Byte(0x20, value)
end

function HitEffectSfxParam:Sfx10(value)
    self:patch4Byte(0x24, value)
end

function HitEffectSfxParam:Sfx11(value)
    self:patch4Byte(0x28, value)
end

function HitEffectSfxParam:Sfx12(value)
    self:patch4Byte(0x2C, value)
end

function HitEffectSfxParam:Sfx13(value)
    self:patch4Byte(0x30, value)
end

function HitEffectSfxParam:Sfx14(value)
    self:patch4Byte(0x34, value)
end

function HitEffectSfxParam:Sfx15(value)
    self:patch4Byte(0x38, value)
end

[DISABLE]
{$lua}
if syntaxcheck then return end
</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337290658</ID>
                              <Description>"HitMtrlParam"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

HitMtrlParam = BaseParamClass:new()

function HitMtrlParam:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("HitMtrlParam", uuid, id, address)
	return o
end

function HitMtrlParam:aiVolumeRate(value)
    self:patch4Float(0x0, value)
end

function HitMtrlParam:spEffectId0(value)
    self:patch4Byte(0x4, value)
end

function HitMtrlParam:spEffectId1(value)
    self:patch4Byte(0x8, value)
end

function HitMtrlParam:footEffectHeightType0(value)
    self:patchBinary(0xC, value, 0)
end

function HitMtrlParam:footEffectHeightType1(value)
    self:patchBinary(0xC, value, 1)
end

function HitMtrlParam:footEffectDirType0(value)
    self:patchBinary(0xC, value, 2)
end

function HitMtrlParam:footEffectDirType1(value)
    self:patchBinary(0xC, value, 3)
end

function HitMtrlParam:newSpType0(value)
    self:patchBinary(0xC, value, 4)
end

function HitMtrlParam:newSpType1(value)
    self:patchBinary(0xC, value, 5)
end

function HitMtrlParam:hitMtrlType0(value)
    self:patchByte(0xD, value)
end

function HitMtrlParam:hitMtrlType1(value)
    self:patchByte(0xE, value)
end

function HitMtrlParam:hitMtrlType2(value)
    self:patchByte(0xF, value)
end

function HitMtrlParam:spEffectId2(value)
    self:patchByte(0x10, value)
end

function HitMtrlParam:spEffectId3(value)
    self:patchByte(0x14, value)
end

function HitMtrlParam:spEffectId4(value)
    self:patchByte(0x18, value)
end

function HitMtrlParam:spEffectId5(value)
    self:patchByte(0x1C, value)
end

function HitMtrlParam:spEffectId6(value)
    self:patchByte(0x20, value)
end

function HitMtrlParam:spEffectId7(value)
    self:patchByte(0x24, value)
end

function HitMtrlParam:spEffectId8(value)
    self:patchByte(0x28, value)
end

function HitMtrlParam:spEffectId9(value)
    self:patchByte(0x2C, value)
end

function HitMtrlParam:spEffectId10(value)
    self:patchByte(0x30, value)
end

function HitMtrlParam:spEffectId11(value)
    self:patchByte(0x34, value)
end

function HitMtrlParam:spEffectId12(value)
    self:patchByte(0x38, value)
end

function HitMtrlParam:spEffectId13(value)
    self:patchByte(0x3C, value)
end

function HitMtrlParam:spEffectId14(value)
    self:patchByte(0x40, value)
end

function HitMtrlParam:spEffectId15(value)
    self:patchByte(0x44, value)
end

function HitMtrlParam:spEffectId16(value)
    self:patchByte(0x48, value)
end

[DISABLE]
{$lua}
if syntaxcheck then return end
</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337080267</ID>
                              <Description>"ItemLotParam"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

ItemLotParam = BaseParamClass:new()

function ItemLotParam:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("ItemLotParam", uuid, id, address)
	return o
end

function ItemLotParam:ItemLotId(value)
    self:patch4Byte(0x00,value)
end

function ItemLotParam:ItemLotId1(value)
    self:patch4Byte(0x04,value)
end

function ItemLotParam:ItemLotId2(value)
    self:patch4Byte(0x08,value)
end

function ItemLotParam:ItemLotId3(value)
    self:patch4Byte(0x0C,value)
end

function ItemLotParam:ItemLotId4(value)
    self:patch4Byte(0x10,value)
end

function ItemLotParam:ItemLotId5(value)
    self:patch4Byte(0x14,value)
end

function ItemLotParam:ItemLotId6(value)
    self:patch4Byte(0x18,value)
end

function ItemLotParam:ItemLotId7(value)
    self:patch4Byte(0x1C,value)
end

function ItemLotParam:ItemType(value)
    self:patch4Byte(0x20,value)
end

function ItemLotParam:ItemType1(value)
    self:patch4Byte(0x24,value)
end

function ItemLotParam:ItemType2(value)
    self:patch4Byte(0x28,value)
end

function ItemLotParam:ItemType3(value)
    self:patch4Byte(0x2C,value)
end

function ItemLotParam:ItemType4(value)
    self:patch4Byte(0x30,value)
end

function ItemLotParam:ItemType5(value)
    self:patch4Byte(0x34,value)
end

function ItemLotParam:ItemType6(value)
    self:patch4Byte(0x38,value)
end

function ItemLotParam:ItemType7(value)
    self:patch4Byte(0x3C,value)
end

function ItemLotParam:DropRateItem(value)
    self:patch2Byte(0x40,value)
end

function ItemLotParam:DropRateItem1(value)
    self:patch2Byte(0x42,value)
end

function ItemLotParam:DropRateItem2(value)
    self:patch2Byte(0x44,value)
end

function ItemLotParam:DropRateItem3(value)
    self:patch2Byte(0x46,value)
end

function ItemLotParam:DropRateItem4(value)
    self:patch2Byte(0x48,value)
end

function ItemLotParam:DropRateItem5(value)
    self:patch2Byte(0x4A,value)
end

function ItemLotParam:DropRateItem6(value)
    self:patch2Byte(0x4C,value)
end

function ItemLotParam:DropRateItem7(value)
    self:patch2Byte(0x4E,value)
end

[DISABLE]
{$lua}
if syntaxcheck then return end
</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337180514</ID>
                              <Description>"LockCamParam"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABlE]


--[[START LockCamParam class]]--

LockCamParam = BaseParamClass:new()

function LockCamParam:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("LockCamParam", uuid, id, address)
	return o
end

function LockCamParam:CamDistTarget(value)
	self:patchFloat(0x00, value)
end

function LockCamParam:RotRange(value)
	self:patchFloat(0x04, value)
end

function LockCamParam:LockRotXShiftRatio(value)
	self:patchFloat(0x08, value)
end

function LockCamParam:ChrOrgOffsetZ(value)
	self:patchFloat(0x0C, value)
end

function LockCamParam:ChrLockRangeMaxRadius(value)
	self:patchFloat(0x10, value)
end

function LockCamParam:FovYChange(value)
	self:patchFloat(0x14, value)
end

function LockCamParam:ChrLockRangeMaxRadius_forDark(value)
	self:patchFloat(0x18, value)
end

function LockCamParam:ChrLockRangeMaxRadius_forPitchDark(value)
	self:patchFloat(0x1C, value)
end

--[[END LockCamParam class]]--

[DiSABlE]
</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337080389</ID>
                              <Description>"LodParam"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABlE]


--[[START LodParam class]]--

LodParam = BaseParamClass:new()

function LodParam:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("LodParam", uuid, id, address)
	return o
end

function LodParam:lv01_BorderDist(value)
	self:patchFloat(0x0, value)
end

function LodParam:lv01_PlayDist(value)
	self:patchFloat(0x4, value)
end

function LodParam:lv12_BorderDist(value)
	self:patchFloat(0x8, value)
end

function LodParam:lv12_PlayDist(value)
	self:patchFloat(0xC, value)
end

function LodParam:textureLod(value)
	self:patchByte(0x10, value)
end

function LodParam:lv23_BorderDist(value)
	self:patchFloat(0x14, value)
end

function LodParam:lv23_PlayDist(value)
	self:patchFloat(0x18, value)
end

function LodParam:lv34_BorderDist(value)
	self:patchFloat(0x1C, value)
end

function LodParam:lv34_PlayDist(value)
	self:patchFloat(0x20, value)
end

function LodParam:lv45_BorderDist(value)
	self:patchFloat(0x24, value)
end

function LodParam:lv45_PlayDist(value)
	self:patchFloat(0x28, value)
end

function LodParam:distanceScaleId(value)
	self:patchByte(0x2C, value)
end
--[[END LodParam class]]--

[DiSABlE]

</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337080255</ID>
                              <Description>"Magic"</Description>
                              <Options moHideChildren="1"/>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

--[[START Magic class]]--
Magic = BaseParamClass:new()

function Magic:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("Magic", uuid, id, address)
	return o
end

function Magic:YesNoDialogMessageId(value)
	self:patchByte(0x0, value)
end

function Magic:LimitCancelSpEffectId(value)
	self:patch4Byte(0x4, value)
end

function Magic:SortId(value)
	self:patch2Byte(0x8, value)
end

function Magic:RefId(value)
	self:patch2Byte(0xA, value)
end

function Magic:Mp(value)
	self:patch2Byte(0xC, value)
end

function Magic:Stamina(value)
	self:patch2Byte(0xE, value)
end

function Magic:IconId(value)
	self:patch2Byte(0x10, value)
end

function Magic:BehaviorId(value)
	self:patch2Byte(0x12, value)
end

function Magic:MtrlItemId(value)
	self:patch2Byte(0x14, value)
end

function Magic:ReplaceMagicId(value)
	self:patch2Byte(0x16, value)
end

function Magic:MaxQuantity(value)
	self:patch2Byte(0x18, value)
end

function Magic:heroPoint(value)
	self:patchByte(0x1A, value)
end

function Magic:OverDexterity(value)
	self:patchByte(0x1B, value)
end

function Magic:SfxVariationId(value)
	self:patchByte(0x1C, value)
end

function Magic:SlotLength(value)
	self:patchByte(0x1D, value)
end

function Magic:RequirementIntellect(value)
	self:patchByte(0x1E, value)
end

function Magic:RequirementFaith(value)
	self:patchByte(0x1F, value)
end

function Magic:AnalogDexiterityMin(value)
	self:patchByte(0x20, value)
end

function Magic:AnalogDexiterityMax(value)
	self:patchByte(0x21, value)
end

function Magic:EzStateBehaviorType(value)
	self:patchByte(0x22, value)
end

function Magic:RefCategory(value)
	self:patchByte(0x23, value)
end

function Magic:SpEffectCategory(value)
	self:patchByte(0x24, value)
end

function Magic:RefType(value)
	self:patchByte(0x25, value)
end

function Magic:OpmeMenuType(value)
	self:patchByte(0x26, value)
end

function Magic:HasSpEffectType(value)
	self:patchByte(0x27, value)
end

function Magic:ReplaceCategory(value)
	self:patchByte(0x28, value)
end

function Magic:UseLimitCategory(value)
	self:patchByte(0x29, value)
end

function Magic:DisableOffline(value)
	self:patchBinary(0x2A, value, 0)
end

function Magic:CastResonanceMagic(value)
	self:patchBinary(0x2A, value, 1)
end

function Magic:isValidTough_ProtSADmg(value)
	self:patchBinary(0x2A, value, 2)
end

function Magic:isWarpMagic(value)
	self:patchBinary(0x2A, value, 3)
end

function Magic:VowType0(value)
	self:patchBinary(0x2C, value, 0)
end

function Magic:VowType1(value)
	self:patchBinary(0x2C, value, 1)
end

function Magic:VowType2(value)
	self:patchBinary(0x2C, value, 2)
end

function Magic:VowType3(value)
	self:patchBinary(0x2C, value, 3)
end

function Magic:VowType4(value)
	self:patchBinary(0x2C, value, 4)
end

function Magic:VowType5(value)
	self:patchBinary(0x2C, value, 5)
end

function Magic:VowType6(value)
	self:patchBinary(0x2C, value, 6)
end

function Magic:VowType7(value)
	self:patchBinary(0x2C, value, 7)
end

function Magic:Enable_multi(value)
	self:patchBinary(0x2D, value, 0)
end

function Magic:Enable_multi_only(value)
	self:patchBinary(0x2D, value, 1)
end

function Magic:IsEnchant(value)
	self:patchBinary(0x2D, value, 2)
end

function Magic:IsShieldEnchant(value)
	self:patchBinary(0x2D, value, 3)
end

function Magic:Enable_live(value)
	self:patchBinary(0x2D, value, 4)
end

function Magic:Enable_gray(value)
	self:patchBinary(0x2D, value, 5)
end

function Magic:Enable_white(value)
	self:patchBinary(0x2D, value, 6)
end

function Magic:Enable_black(value)
	self:patchBinary(0x2D, value, 7)
end

function Magic:VowType8(value)
	self:patchBinary(0x2F, value, 0)
end

function Magic:VowType9(value)
	self:patchBinary(0x2F, value, 1)
end

function Magic:VowType10(value)
	self:patchBinary(0x2F, value, 2)
end

function Magic:VowType11(value)
	self:patchBinary(0x2F, value, 3)
end

function Magic:VowType12(value)
	self:patchBinary(0x2F, value, 4)
end

function Magic:VowType13(value)
	self:patchBinary(0x2F, value, 5)
end

function Magic:VowType14(value)
	self:patchBinary(0x2F, value, 6)
end

function Magic:VowType15(value)
	self:patchBinary(0x2F, value, 7)
end

function Magic:castSfxId(value)
	self:patch4Byte(0x30, value)
end

function Magic:fireSfxId(value)
	self:patch4Byte(0x34, value)
end

function Magic:effectSfxId(value)
	self:patch4Byte(0x38, value)
end

function Magic:toughnessCorrectRate(value)
	self:patchFloat(0x3C, value)
end

function Magic:attributeType(value)
	self:patchByte(0x40, value)
end

--Faith Breakpoints
function Magic:FaithBreakpoint20(value)
	self:patchByte(0x41, value)
end

function Magic:FaithBreakpoint30(value)
	self:patchByte(0x42, value)
end

function Magic:FaithBreakpoint40(value)
	self:patchByte(0x43, value)
end

function Magic:FaithBreakpoint60(value)
	self:patchByte(0x44, value)
end

function Magic:refCategory1(value)
	self:patchByte(0x45, value)
end

--Spell cast at X Faith
function Magic:SpellCastAt20Faith(value)
	self:patch4Byte(0x48, value)
end

function Magic:SpellCastAt30Faith(value)
	self:patch4Byte(0x4C, value)
end

function Magic:SpellCastAt40Faith(value)
	self:patch4Byte(0x50, value)
end

function Magic:SpellCastAt60Faith(value)
	self:patch4Byte(0x54, value)
end

function Magic:mp1(value)
	self:patch2Byte(0x58, value)
end

function Magic:stamina1(value)
	self:patch2Byte(0x5A, value)
end

function Magic:Condition(value)
	self:patchByte(0x5C, value)
end

function Magic:refCategory2(value)
	self:patchByte(0x5D, value)
end

function Magic:mp3(value)
	self:patch2Byte(0x5E, value)
end

function Magic:mp2(value)
	self:patch2Byte(0x60, value)
end

function Magic:stamina2(value)
	self:patch2Byte(0x62, value)
end

-- Bullets
function Magic:refId1(value)
	self:patch4Byte(0x64, value)
end

function Magic:refId2(value)
	self:patch4Byte(0x68, value)
end

function Magic:refId3(value)
	self:patch4Byte(0x6C, value)
end

function Magic:refId4(value)
	self:patch4Byte(0x70, value)
end


-- Compatibility with old names
function Magic:YesNoDialogBox(value)
	self:patchByte(0x0, value)
end

function Magic:LimitCancelSpEffectID(value)
	self:patch4Byte(0x4, value)
end

function Magic:SortID(value)
	self:patch2Byte(0x8, value)
end

function Magic:ReferenceID(value)
	self:patch2Byte(0xA, value)
end

function Magic:FPCost(value)
	self:patch2Byte(0xC, value)
end

function Magic:StaminaCost(value)
	self:patch2Byte(0xE, value)
end

function Magic:IconID(value)
	self:patch2Byte(0x10, value)
end

function Magic:BehaviorID(value)
	self:patch2Byte(0x12, value)
end

function Magic:MaterialItemID(value)
	self:patch2Byte(0x14, value)
end

function Magic:ReplaceMagicID(value)
	self:patch2Byte(0x16, value)
end

function Magic:NumberofCasts(value)
	self:patch2Byte(0x18, value)
end

function Magic:Humanity(value)
	self:patchByte(0x1A, value)
end

function Magic:SFXVariation(value)
	self:patchByte(0x1C, value)
end

function Magic:SlotsUsed(value)
	self:patchByte(0x1D, value)
end

function Magic:RequiredINT(value)
	self:patchByte(0x1E, value)
end

function Magic:RequiredFAI(value)
	self:patchByte(0x1F, value)
end

function Magic:DexterityMinimumCastSpeedScaling(value)
	self:patchByte(0x20, value)
end

function Magic:DexterityMaximumCastSpeedScaling(value)
	self:patchByte(0x21, value)
end

function Magic:ReferenceCategory(value)
	self:patchByte(0x23, value)
end

function Magic:CastAnimation(value)
	self:patchByte(0x25, value)
end

function Magic:MenuType(value)
	self:patchByte(0x26, value)
end

function Magic:EnableMulti(value)
	self:patchBinary(0x2D, value, 0)
end

function Magic:EnableMultOnly(value)
	self:patchBinary(0x2D, value, 1)
end

function Magic:IsWeaponEnchant(value)
	self:patchBinary(0x2D, value, 2)
end

function Magic:EnableHuman(value)
	self:patchBinary(0x2D, value, 4)
end

function Magic:EnableDragonPhantom(value)
	self:patchBinary(0x2D, value, 5)
end

function Magic:EnableWhitePhantom(value)
	self:patchBinary(0x2D, value, 6)
end

function Magic:EnableBlackPhantom(value)
	self:patchBinary(0x2D, value, 7)
end

function Magic:sfxID1(value)
	self:patch4Byte(0x30, value)
end

function Magic:sfxID2(value)
	self:patch4Byte(0x34, value)
end

function Magic:sfxID3(value)
	self:patch4Byte(0x38, value)
end

function Magic:useBullet2(value)
	self:patchByte(0x45, value)
end

function Magic:useBullet3(value)
	self:patchByte(0x5D, value)
end
function Magic:Bullet1(value)
	self:patch4Byte(0x64, value)
end

function Magic:Bullet2(value)
	self:patch4Byte(0x68, value)
end

function Magic:Bullet3(value)
	self:patch4Byte(0x6C, value)
end

function Magic:Bullet4(value)
	self:patch4Byte(0x70, value)
end

--[[END Magic class]]--

[DISABLE]
{$lua}
if syntaxcheck then return end

</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337080286</ID>
                              <Description>"MapMimicryEstablishmentParam"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end
--[[START MapMimicryEstablishmentParam class]]--
MapMimicryEstablishmentParam = BaseParamClass:new()

function MapMimicryEstablishmentParam:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("MapMimicryEstablishmentParam", uuid, id, address)
	return o
end

function MapMimicryEstablishmentParam:RandomizerCoefficient0(value)
    self:patchFloat(0x0,value)
end

function MapMimicryEstablishmentParam:RandomizerCoefficient1(value)
    self:patchFloat(0x4,value)
end

function MapMimicryEstablishmentParam:RandomizerCoefficient2(value)
    self:patchFloat(0x8,value)
end

function MapMimicryEstablishmentParam:TransformVfxId0(value)
    self:patch4Byte(0xC,value)
end

function MapMimicryEstablishmentParam:LoopVfxId0(value)
    self:patch4Byte(0x10,value)
end

function MapMimicryEstablishmentParam:DestroyVfxId0(value)
    self:patch4Byte(0x14,value)
end

function MapMimicryEstablishmentParam:TransformVfxId1(value)
    self:patch4Byte(0x18,value)
end

function MapMimicryEstablishmentParam:LoopVfxId1(value)
    self:patch4Byte(0x1C,value)
end

function MapMimicryEstablishmentParam:DestroyVfxId1(value)
    self:patch4Byte(0x20,value)
end

function MapMimicryEstablishmentParam:TransformVfxId2(value)
    self:patch4Byte(0x24,value)
end

function MapMimicryEstablishmentParam:LoopVfxId2(value)
    self:patch4Byte(0x28,value)
end

function MapMimicryEstablishmentParam:DestroyVfxId2(value)
    self:patch4Byte(0x2C,value)
end

[DISABLE]
</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337290659</ID>
                              <Description>"NetworkParam"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]

-- Define NetworkParam Class

NetworkParam = BaseParamClass:new()

function NetworkParam:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("NetworkParam", uuid, id, address)
	return o
end

function NetworkParam:signVerticalOffset(value)
    self:patchFloat(0x0, value)
end

function NetworkParam:maxSignPosCorrectionRange(value)
    self:patchFloat(0x4, value)
end

function NetworkParam:signPuddleActiveMessageIntervalSec(value)
    self:patchFloat(0x10, value)
end

function NetworkParam:reloadSignIntervalTime1(value)
    self:patchFloat(0x18, value)
end

function NetworkParam:reloadSignIntervalTime2(value)
    self:patchFloat(0x1C, value)
end

function NetworkParam:reloadSignTotalCount(value)
    self:patch4Byte(0x20, value)
end

function NetworkParam:reloadSignCellCount(value)
    self:patch4Byte(0x24, value)
end

function NetworkParam:updateSignIntervalTime(value)
    self:patchFloat(0x28, value)
end

function NetworkParam:basicExclusiveRange(value)
    self:patchFloat(0x2C, value)
end

function NetworkParam:basicExclusiveHeight(value)
    self:patchFloat(0x30, value)
end

function NetworkParam:previewChrWaitingTime(value)
    self:patchFloat(0x34, value)
end

function NetworkParam:signVisibleRange(value)
    self:patchFloat(0x38, value)
end

function NetworkParam:cellGroupHorizontalRange(value)
    self:patch4Byte(0x3C, value)
end

function NetworkParam:cellGroupTopRange(value)
    self:patch4Byte(0x40, value)
end

function NetworkParam:cellGroupBottomRange(value)
    self:patch4Byte(0x44, value)
end

function NetworkParam:minWhitePhantomLimitTimeScale(value)
    self:patchFloat(0x48, value)
end

function NetworkParam:minSmallPhantomLimitTimeScale(value)
    self:patchFloat(0x4C, value)
end

function NetworkParam:whiteKeywordLimitTimeScale(value)
    self:patchFloat(0x50, value)
end

function NetworkParam:smallKeywordLimitTimeScale(value)
    self:patchFloat(0x54, value)
end

function NetworkParam:blackKeywordLimitTimeScale(value)
    self:patchFloat(0x58, value)
end

function NetworkParam:dragonKeywordLimitTimeScale(value)
    self:patchFloat(0x5C, value)
end

function NetworkParam:singGetMax(value)
    self:patch4Byte(0x60, value)
end

function NetworkParam:signDownloadSpan(value)
    self:patchFloat(0x64, value)
end

function NetworkParam:signUpdateSpan(value)
    self:patchFloat(0x68, value)
end

function NetworkParam:maxBreakInTargetListCount(value)
    self:patch4Byte(0x70, value)
end

function NetworkParam:breakInRequestIntervalTimeSec(value)
    self:patchFloat(0x74, value)
end

function NetworkParam:breakInRequestTimeOutSec(value)
    self:patchFloat(0x78, value)
end

function NetworkParam:keyGuideRange(value)
    self:patchFloat(0x80, value)
end

function NetworkParam:reloadSignTotalCount(value)
    self:patch4Byte(0x88, value)
end

function NetworkParam:reloadNewSignCellCount(value)
    self:patch4Byte(0x8C, value)
end

function NetworkParam:reloadRandomSignCellCount(value)
    self:patch4Byte(0x90, value)
end

function NetworkParam:maxSignTotalCount(value)
    self:patch4Byte(0x94, value)
end

function NetworkParam:maxSignCellCount(value)
    self:patch4Byte(0x98, value)
end

function NetworkParam:basicExclusiveRange(value)
    self:patchFloat(0x9C, value)
end

function NetworkParam:basicExclusiveHeight(value)
    self:patchFloat(0xA0, value)
end

function NetworkParam:signVisibleRange(value)
    self:patchFloat(0xA4, value)
end

function NetworkParam:maxWriteSignCount(value)
    self:patch4Byte(0xA8, value)
end

function NetworkParam:maxReadSignCount(value)
    self:patch4Byte(0xAC, value)
end

function NetworkParam:reloadSignIntervalTime(value)
    self:patchFloat(0xB0, value)
end

function NetworkParam:cellGroupHorizontalRange(value)
    self:patch4Byte(0xB4, value)
end

function NetworkParam:cellGroupTopRange(value)
    self:patch4Byte(0xB8, value)
end

function NetworkParam:cellGroupBottomRange(value)
    self:patch4Byte(0xBC, value)
end

function NetworkParam:downloadSpan(value)
    self:patchFloat(0xC4, value)
end

function NetworkParam:downloadEvaluationSpan(value)
    self:patchFloat(0xC8, value)
end

function NetworkParam:deadingGhostStartPosThreshold(value)
    self:patchFloat(0xD0, value)
end

function NetworkParam:keyGuideRangePlayer(value)
    self:patchFloat(0xD8, value)
end

function NetworkParam:keyGuideHeightPlayer(value)
    self:patchFloat(0xDC, value)
end

function NetworkParam:reloadSignTotalCount(value)
    self:patch4Byte(0xE0, value)
end

function NetworkParam:reloadSignCellCount(value)
    self:patch4Byte(0xE4, value)
end

function NetworkParam:maxSignTotalCount(value)
    self:patch4Byte(0xE8, value)
end

function NetworkParam:maxSignCellCount(value)
    self:patch4Byte(0xEC, value)
end

function NetworkParam:reloadSignIntervalTime(value)
    self:patchFloat(0xF0, value)
end

function NetworkParam:signVisibleRange(value)
    self:patchFloat(0xF4, value)
end

function NetworkParam:basicExclusiveRange(value)
    self:patchFloat(0xF8, value)
end

function NetworkParam:basicExclusiveHeight(value)
    self:patchFloat(0xFC, value)
end

function NetworkParam:cellGroupHorizontalRange(value)
    self:patch4Byte(0x100, value)
end

function NetworkParam:cellGroupTopRange(value)
    self:patch4Byte(0x104, value)
end

function NetworkParam:cellGroupBottomRange(value)
    self:patch4Byte(0x108, value)
end

function NetworkParam:recordDeadingGhostTotalTime(value)
    self:patchFloat(0x110, value)
end

function NetworkParam:recordDeadingGhostMinTime(value)
    self:patchFloat(0x114, value)
end

function NetworkParam:downloadSpan(value)
    self:patchFloat(0x118, value)
end

function NetworkParam:statueCreatableDistance(value)
    self:patchFloat(0x11C, value)
end

function NetworkParam:reloadGhostTotalCount(value)
    self:patch4Byte(0x120, value)
end

function NetworkParam:reloadGhostCellCount(value)
    self:patch4Byte(0x124, value)
end

function NetworkParam:maxGhostTotalCount(value)
    self:patch4Byte(0x128, value)
end

function NetworkParam:distanceOfBeginRecordVersus(value)
    self:patchFloat(0x12C, value)
end

function NetworkParam:distanceOfEndRecordVersus(value)
    self:patchFloat(0x130, value)
end

function NetworkParam:updateWanderGhostIntervalTime(value)
    self:patchFloat(0x134, value)
end

function NetworkParam:updateVersusGhostIntervalTime(value)
    self:patchFloat(0x138, value)
end

function NetworkParam:recordWanderingGhostTime(value)
    self:patchFloat(0x13C, value)
end

function NetworkParam:recordWanderingGhostMinTime(value)
    self:patchFloat(0x140, value)
end

function NetworkParam:updateBonfireGhostIntervalTime(value)
    self:patchFloat(0x144, value)
end

function NetworkParam:replayGhostRangeOnView(value)
    self:patchFloat(0x148, value)
end

function NetworkParam:replayGhostRangeOutView(value)
    self:patchFloat(0x14C, value)
end

function NetworkParam:replayBonfireGhostTime(value)
    self:patchFloat(0x150, value)
end

function NetworkParam:minBonfireGhostValidRange(value)
    self:patchFloat(0x154, value)
end

function NetworkParam:maxBonfireGhostValidRange(value)
    self:patchFloat(0x158, value)
end

function NetworkParam:minReplayIntervalTime(value)
    self:patchFloat(0x15C, value)
end

function NetworkParam:maxReplayIntervalTime(value)
    self:patchFloat(0x160, value)
end

function NetworkParam:reloadGhostIntervalTime(value)
    self:patchFloat(0x164, value)
end

function NetworkParam:cellGroupHorizontalRange(value)
    self:patch4Byte(0x168, value)
end

function NetworkParam:cellGroupTopRange(value)
    self:patch4Byte(0x16C, value)
end

function NetworkParam:replayBonfirePhantomParamIdForCodename(value)
    self:patch4Byte(0x170, value)
end

function NetworkParam:replayBonfireModeRange(value)
    self:patchFloat(0x174, value)
end

function NetworkParam:replayBonfirePhantomParamId(value)
    self:patch4Byte(0x178, value)
end

function NetworkParam:reloadVisitListCoolTime(value)
    self:patchFloat(0x180, value)
end

function NetworkParam:maxCoopBlueSummonCount(value)
    self:patch4Byte(0x184, value)
end

function NetworkParam:maxBellGuardSummonCount(value)
    self:patch4Byte(0x188, value)
end

function NetworkParam:maxVisitListCount(value)
    self:patch4Byte(0x18C, value)
end

function NetworkParam:reloadSearch_CoopBlue_Min(value)
    self:patchFloat(0x190, value)
end

function NetworkParam:reloadSearch_CoopBlue_Max(value)
    self:patchFloat(0x194, value)
end

function NetworkParam:reloadSearch_BellGuard_Min(value)
    self:patchFloat(0x198, value)
end

function NetworkParam:reloadSearch_BellGuard_Max(value)
    self:patchFloat(0x19C, value)
end

function NetworkParam:reloadSearch_RatKing_Min(value)
    self:patchFloat(0x1A0, value)
end

function NetworkParam:reloadSearch_RatKing_Max(value)
    self:patchFloat(0x1A4, value)
end

function NetworkParam:srttMaxLimit(value)
    self:patchFloat(0x1B0, value)
end

function NetworkParam:srttMeanLimit(value)
    self:patchFloat(0x1B4, value)
end

function NetworkParam:srttMeanDeviationLimit(value)
    self:patchFloat(0x1B8, value)
end

function NetworkParam:darkPhantomLimitBoostTime(value)
    self:patchFloat(0x1BC, value)
end

function NetworkParam:darkPhantomLimitBoostScale(value)
    self:patchFloat(0x1C0, value)
end

function NetworkParam:multiplayDisableLifeTime(value)
    self:patchFloat(0x1C4, value)
end

function NetworkParam:abyssMultiplayLimit(value)
    self:patchByte(0x1C8, value)
end

function NetworkParam:phantomWarpMinimumTime(value)
    self:patchByte(0x1C9, value)
end

function NetworkParam:phantomReturnDelayTime(value)
    self:patchByte(0x1CA, value)
end

function NetworkParam:terminateTimeoutTime(value)
    self:patchByte(0x1CB, value)
end

function NetworkParam:penaltyPointLanDisconnect(value)
    self:patch2Byte(0x1CC, value)
end

function NetworkParam:penaltyPointSignout(value)
    self:patch2Byte(0x1CE, value)
end

function NetworkParam:penaltyPointReboot(value)
    self:patch2Byte(0x1D0, value)
end

function NetworkParam:penaltyPointBeginPenalize(value)
    self:patch2Byte(0x1D2, value)
end

function NetworkParam:penaltyForgiveItemLimitTime(value)
    self:patchFloat(0x1D4, value)
end

function NetworkParam:allAreaSearchRate_CoopBlue(value)
    self:patchByte(0x1D8, value)
end

function NetworkParam:allAreaSearchRate_VsBlue(value)
    self:patchByte(0x1D9, value)
end

function NetworkParam:allAreaSearchRate_BellGuard(value)
    self:patchByte(0x1DA, value)
end

function NetworkParam:bloodMessageEvalHealRate(value)
    self:patchByte(0x1DB, value)
end

function NetworkParam:smallGoldSuccessHostRewardId(value)
    self:patch4Byte(0x1DC, value)
end

function NetworkParam:doorInvalidPlayAreaExtents(value)
    self:patchFloat(0x1E0, value)
end

function NetworkParam:signDisplayMax(value)
    self:patchByte(0x1E4, value)
end

function NetworkParam:bloodStainDisplayMax(value)
    self:patchByte(0x1E5, value)
end

function NetworkParam:bloodMessageDisplayMax(value)
    self:patchByte(0x1E6, value)
end

function NetworkParam:summonMessageInterval(value)
    self:patchFloat(0x210, value)
end

function NetworkParam:hostRegisterUpdateTime(value)
    self:patchFloat(0x214, value)
end

function NetworkParam:guestUpdateTime(value)
    self:patchFloat(0x21C, value)
end

function NetworkParam:guestPlayerNoTimeOutTime(value)
    self:patchFloat(0x220, value)
end

function NetworkParam:hostPlayerNoTimeOutTime(value)
    self:patchFloat(0x224, value)
end

function NetworkParam:requestSearchQuickMatchLimit(value)
    self:patch4Byte(0x228, value)
end

function NetworkParam:AvatarMatchSearchMax(value)
    self:patch4Byte(0x22C, value)
end

function NetworkParam:BattleRoyalMatchSearchMin(value)
    self:patch4Byte(0x230, value)
end

function NetworkParam:BattleRoyalMatchSearchMax(value)
    self:patch4Byte(0x234, value)
end

function NetworkParam:VisitorListMax(value)
    self:patch4Byte(0x240, value)
end

function NetworkParam:DownloadSpan(value)
    self:patchFloat(0x248, value)
end

function NetworkParam:VisitorGuestRequestMessageIntervalSec(value)
    self:patchFloat(0x24C, value)
end

function NetworkParam:wanderGhostIntervalLifeTime(value)
    self:patchFloat(0x250, value)
end

function NetworkParam:YellowMonkDownloadSpan(value)
    self:patchFloat(0x264, value)
end

function NetworkParam:YellowMonkOverallFlowTimeOutTime(value)
    self:patchFloat(0x268, value)
end

[DISABLE]
</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>3</ID>
                              <Description>"NpcParam"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

--[[START NpcParam class]]--
NpcParam = BaseParamClass:new()

function NpcParam:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("NpcParam", uuid, id, address)
	return o
end

function NpcParam:behaviorVariationId(value)
	self:patch4Byte(0x0, value)
end

function NpcParam:AiThinkId(value)
	self:patch4Byte(0x4, value)
end

function NpcParam:NameId(value)
	self:patch4Byte(0x8, value)
end

function NpcParam:turnVellocity(value)
	self:patchFloat(0xC, value)
end

function NpcParam:hitHeight(value)
	self:patchFloat(0x10, value)
end

function NpcParam:hitRadius(value)
	self:patchFloat(0x14, value)
end

function NpcParam:weight(value)
	self:patch4Byte(0x18, value)
end

function NpcParam:hitOffset(value)
	self:patchFloat(0x1C, value)
end

function NpcParam:Hp(value)
	self:patch4Byte(0x20, value)
end

function NpcParam:Mp(value)
	self:patch4Byte(0x24, value)
end

function NpcParam:getSoul(value)
	self:patch4Byte(0x28, value)
end

function NpcParam:ItemLotId1(value)
	self:patch4Byte(0x2C, value)
end

function NpcParam:ItemLotId2(value)
	self:patch4Byte(0x30, value)
end

function NpcParam:ItemLotId3(value)
	self:patch4Byte(0x34, value)
end

function NpcParam:ItemLotId4(value)
	self:patch4Byte(0x38, value)
end

function NpcParam:ItemLotId5(value)
	self:patch4Byte(0x3C, value)
end

function NpcParam:ItemLotId6(value)
	self:patch4Byte(0x40, value)
end

function NpcParam:humanityLotId(value)
	self:patch4Byte(0x44, value)
end

function NpcParam:spEffectId0(value)
	self:patch4Byte(0x48, value)
end

function NpcParam:spEffectId1(value)
	self:patch4Byte(0x4C, value)
end

function NpcParam:spEffectId2(value)
	self:patch4Byte(0x50, value)
end

function NpcParam:spEffectId3(value)
	self:patch4Byte(0x54, value)
end

function NpcParam:spEffectId4(value)
	self:patch4Byte(0x58, value)
end

function NpcParam:spEffectId5(value)
	self:patch4Byte(0x5C, value)
end

function NpcParam:spEffectId6(value)
	self:patch4Byte(0x60, value)
end

function NpcParam:spEffectId7(value)
	self:patch4Byte(0x64, value)
end

function NpcParam:GameClearSpEffectID(value)
	self:patch4Byte(0x68, value)
end

function NpcParam:physGuardCutRate(value)
	self:patchFloat(0x6C, value)
end

function NpcParam:magGuardCutRate(value)
	self:patchFloat(0x70, value)
end

function NpcParam:fireGuardCutRate(value)
	self:patchFloat(0x74, value)
end

function NpcParam:thunGuardCutRate(value)
	self:patchFloat(0x78, value)
end

function NpcParam:animidOffset(value)
	self:patch4Byte(0x7C, value)
end

function NpcParam:moveAnimId(value)
	self:patch4Byte(0x80, value)
end

function NpcParam:spMoveAnimId1(value)
	self:patch4Byte(0x84, value)
end

function NpcParam:spMoveAnimId2(value)
	self:patch4Byte(0x88, value)
end

function NpcParam:networkWarpDisp(value)
	self:patchFloat(0x8C, value)
end

function NpcParam:dbgBehaviorR1(value)
	self:patch4Byte(0x90, value)
end

function NpcParam:dbgBehaviorL1(value)
	self:patch4Byte(0x94, value)
end

function NpcParam:dbgBehaviorR2(value)
	self:patch4Byte(0x98, value)
end

function NpcParam:dbgBehaviorL2(value)
	self:patch4Byte(0x9C, value)
end

function NpcParam:dbgBehaviorRL(value)
	self:patch4Byte(0xA0, value)
end

function NpcParam:dbgBehaviorRR(value)
	self:patch4Byte(0xA4, value)
end

function NpcParam:dbgBehaviorRD(value)
	self:patch4Byte(0xA8, value)
end

function NpcParam:dbgBehaviorRU(value)
	self:patch4Byte(0xAC, value)
end

function NpcParam:dbgBehaviorLL(value)
	self:patch4Byte(0xB0, value)
end

function NpcParam:dbgBehaviorLR(value)
	self:patch4Byte(0xB4, value)
end

function NpcParam:dbgBehaviorLD(value)
	self:patch4Byte(0xB8, value)
end

function NpcParam:dbgBehaviorLU(value)
	self:patch4Byte(0xBC, value)
end

function NpcParam:animIdOffset(value)
	self:patch4Byte(0xC0, value)
end

function NpcParam:partsDamageRate1(value)
	self:patchFloat(0xC4, value)
end

function NpcParam:partsDamageRate2(value)
	self:patchFloat(0xC8, value)
end

function NpcParam:partsDamageRate3(value)
	self:patchFloat(0xCC, value)
end

function NpcParam:partsDamageRate4(value)
	self:patchFloat(0xD0, value)
end

function NpcParam:partsDamageRate5(value)
	self:patchFloat(0xD4, value)
end

function NpcParam:partsDamageRate6(value)
	self:patchFloat(0xD8, value)
end

function NpcParam:partsDamageRate7(value)
	self:patchFloat(0xDC, value)
end

function NpcParam:partsDamageRate8(value)
	self:patchFloat(0xE0, value)
end

function NpcParam:weakPartsDamageRate(value)
	self:patchFloat(0xE4, value)
end

function NpcParam:SuperArmorRecoverCorrection(value)
	self:patchFloat(0xE8, value)
end

function NpcParam:SuperArmorBrakeKnockbackDist(value)
	self:patchFloat(0xEC, value)
end

function NpcParam:stamina(value)
	self:patch2Byte(0xF0, value)
end

function NpcParam:staminaRecoverBaseVal(value)
	self:patch2Byte(0xF2, value)
end

function NpcParam:defPhys(value)
	self:patch2Byte(0xF4, value)
end

function NpcParam:defSlash(value)
	self:patch2Byte(0xF6, value)
end

function NpcParam:defBlow(value)
	self:patch2Byte(0xF8, value)
end

function NpcParam:defThrust(value)
	self:patch2Byte(0xFA, value)
end

function NpcParam:defMag(value)
	self:patch2Byte(0xFC, value)
end

function NpcParam:defFire(value)
	self:patch2Byte(0xFE, value)
end

function NpcParam:defThunder(value)
	self:patch2Byte(0x100, value)
end

function NpcParam:defFlickPower(value)
	self:patch2Byte(0x102, value)
end

function NpcParam:resistPoison(value)
	self:patch2Byte(0x104, value)
end

function NpcParam:resistToxic(value)
	self:patch2Byte(0x106, value)
end

function NpcParam:resistBlood(value)
	self:patch2Byte(0x108, value)
end

function NpcParam:resistCurse(value)
	self:patch2Byte(0x10A, value)
end

function NpcParam:ghostModelId(value)
	self:patch2Byte(0x10C, value)
end

function NpcParam:normalChangeResourceId(value)
	self:patch2Byte(0x10E, value)
end

function NpcParam:guardAngle(value)
	self:patch2Byte(0x110, value)
end

function NpcParam:slashGuardCutRate(value)
	self:patch2Byte(0x112, value)
end

function NpcParam:blowGuardCutRate(value)
	self:patch2Byte(0x114, value)
end

function NpcParam:thrustGuardCutRate(value)
	self:patch2Byte(0x116, value)
end

function NpcParam:superArmorDurability(value)
	self:patch2Byte(0x118, value)
end

function NpcParam:normalChangeTexChrId(value)
	self:patch2Byte(0x11A, value)
end

function NpcParam:dropType(value)
	self:patch2Byte(0x11C, value)
end

function NpcParam:knockbackRate(value)
	self:patchByte(0x11E, value)
end

function NpcParam:knockbackParamId(value)
	self:patchByte(0x11F, value)
end

function NpcParam:fallDamageDamp(value)
	self:patchByte(0x120, value)
end

function NpcParam:staminaGuardDef(value)
	self:patchByte(0x121, value)
end

function NpcParam:pcAttrB(value)
	self:patchByte(0x122, value)
end

function NpcParam:pcAttrW(value)
	self:patchByte(0x123, value)
end

function NpcParam:pcAttrL(value)
	self:patchByte(0x124, value)
end

function NpcParam:pcAttrR(value)
	self:patchByte(0x125, value)
end

function NpcParam:areaAttrB(value)
	self:patchByte(0x126, value)
end

function NpcParam:areaAttrW(value)
	self:patchByte(0x127, value)
end

function NpcParam:areaAttrL(value)
	self:patchByte(0x128, value)
end

function NpcParam:areaAttrR(value)
	self:patchByte(0x129, value)
end

function NpcParam:mpRecoverBaseVal(value)
	self:patchByte(0x12A, value)
end

function NpcParam:flickDamageCutRate(value)
	self:patchByte(0x12B, value)
end

function NpcParam:defaultLodParamId(value)
	self:patchByte(0x12C, value)
end

function NpcParam:drawType(value)
	self:patchByte(0x12D, value)
end

function NpcParam:npcType(value)
	self:patchByte(0x12E, value)
end

function NpcParam:teamType(value)
	self:patchByte(0x12F, value)
end

function NpcParam:moveType(value)
	self:patchByte(0x130, value)
end

function NpcParam:lockDist(value)
	self:patchByte(0x131, value)
end

function NpcParam:material(value)
	self:patch2Byte(0x132, value)
end

function NpcParam:materialSfx(value)
	self:patch2Byte(0x134, value)
end

function NpcParam:partsDamageType(value)
	self:patchByte(0x136, value)
end

function NpcParam:maxUndurationAng(value)
	self:patchByte(0x137, value)
end

function NpcParam:guardLevel(value)
	self:patchByte(0x138, value)
end

function NpcParam:burnsfxType(value)
	self:patchByte(0x139, value)
end

function NpcParam:poisonGuardResist(value)
	self:patchByte(0x13A, value)
end

function NpcParam:toxicGuardResist(value)
	self:patchByte(0x13B, value)
end

function NpcParam:bloodGuardResist(value)
	self:patchByte(0x13C, value)
end

function NpcParam:curseGuardResist(value)
	self:patchByte(0x13D, value)
end

function NpcParam:parryAttack(value)
	self:patchByte(0x13E, value)
end

function NpcParam:parryDefense(value)
	self:patchByte(0x13F, value)
end

function NpcParam:sfxSize(value)
	self:patchByte(0x140, value)
end

function NpcParam:pushOutCamRegionRadius(value)
	self:patchByte(0x141, value)
end

function NpcParam:hitStopType(value)
	self:patchByte(0x142, value)
end

function NpcParam:ladderEndChkOffsetTop(value)
	self:patchByte(0x143, value)
end

function NpcParam:ladderEndChkOffsetLow(value)
	self:patchByte(0x144, value)
end

function NpcParam:UseRagdollCamHit(value)
	self:patchBinary(0x145, value, 0)
end

function NpcParam:disableClothRigidHit(value)
	self:patchBinary(0x145, value, 1)
end

function NpcParam:UseRagdoll(value)
	self:patchBinary(0x145, value, 2)
end
function NpcParam:isDemon(value)
	self:patchBinary(0x145, value, 3)
end
function NpcParam:isGhost(value)
	self:patchBinary(0x145, value, 4)
end
function NpcParam:isNoDamageMotion(value)
	self:patchBinary(0x145, value, 5)
end
function NpcParam:isUnduration(value)
	self:patchBinary(0x145, value, 6)
end
function NpcParam:isChangeWanderGhost(value)
	self:patchBinary(0x145, value, 7)
end

function NpcParam:ModelDispMask0(value)
	self:patchBinary(0x146, value, 0)
end

function NpcParam:ModelDispMask1(value)
	self:patchBinary(0x146, value, 1)
end

function NpcParam:ModelDispMask2(value)
	self:patchBinary(0x146, value, 2)
end

function NpcParam:ModelDispMask3(value)
	self:patchBinary(0x146, value, 3)
end

function NpcParam:ModelDispMask4(value)
	self:patchBinary(0x146, value, 4)
end

function NpcParam:ModelDispMask5(value)
	self:patchBinary(0x146, value, 5)
end

function NpcParam:ModelDispMask6(value)
	self:patchBinary(0x146, value, 6)
end

function NpcParam:ModelDispMask7(value)
	self:patchBinary(0x146, value, 7)
end

function NpcParam:ModelDispMask8(value)
	self:patchBinary(0x147, value, 0)
end

function NpcParam:ModelDispMask9(value)
	self:patchBinary(0x147, value, 1)
end

function NpcParam:ModelDispMask10(value)
	self:patchBinary(0x147, value, 2)
end

function NpcParam:ModelDispMask11(value)
	self:patchBinary(0x147, value, 3)
end

function NpcParam:ModelDispMask12(value)
	self:patchBinary(0x147, value, 4)
end

function NpcParam:ModelDispMask13(value)
	self:patchBinary(0x147, value, 5)
end

function NpcParam:ModelDispMask14(value)
	self:patchBinary(0x147, value, 6)
end

function NpcParam:ModelDispMask15(value)
	self:patchBinary(0x147, value, 7)
end

function NpcParam:isEnableNeckTurn(value)
	self:patchBinary(0x148, value, 0)
end

function NpcParam:disableRespawn(value)
	self:patchBinary(0x148, value, 1)
end

function NpcParam:isMoveAnimWait(value)
	self:patchBinary(0x148, value, 2)
end

function NpcParam:isCrowd(value)
	self:patchBinary(0x148, value, 3)
end

function NpcParam:isWeakSaint(value)
	self:patchBinary(0x148, value, 4)
end

function NpcParam:isWeakA(value)
	self:patchBinary(0x148, value, 5)
end

function NpcParam:isWeakB(value)
	self:patchBinary(0x148, value, 6)
end

function NpcParam:isEnableDropSoulCapture(value)
	self:patchBinary(0x148, value, 7)
end

function NpcParam:VowType0(value)
	self:patchBinary(0x149, value, 0)
end

function NpcParam:VowType1(value)
	self:patchBinary(0x149, value, 1)
end

function NpcParam:VowType2(value)
	self:patchBinary(0x149, value, 2)
end

function NpcParam:disableIntiliazeDead(value)
	self:patchBinary(0x149, value, 3)
end

function NpcParam:isSoulGetByBoss(value)
	self:patchBinary(0x149, value, 4)
end

function NpcParam:isMultilingual(value)
	self:patchBinary(0x149, value, 5)
end

function NpcParam:Unk1(value)
	self:patchBinary(0x149, value, 6)
end

function NpcParam:Unk2(value)
	self:patchBinary(0x149, value, 7)
end

function NpcParam:ModelDispMask16(value)
	self:patchBinary(0x14A, value, 0)
end

function NpcParam:ModelDispMask17(value)
	self:patchBinary(0x14A, value, 1)
end

function NpcParam:ModelDispMask18(value)
	self:patchBinary(0x14A, value, 2)
end

function NpcParam:ModelDispMask19(value)
	self:patchBinary(0x14A, value, 3)
end

function NpcParam:ModelDispMask20(value)
	self:patchBinary(0x14A, value, 4)
end

function NpcParam:ModelDispMask21(value)
	self:patchBinary(0x14A, value, 5)
end

function NpcParam:ModelDispMask22(value)
	self:patchBinary(0x14A, value, 6)
end

function NpcParam:ModelDispMask23(value)
	self:patchBinary(0x14A, value, 7)
end

function NpcParam:ModelDispMask24(value)
	self:patchBinary(0x14B, value, 0)
end

function NpcParam:ModelDispMask25(value)
	self:patchBinary(0x14B, value, 1)
end

function NpcParam:ModelDispMask26(value)
	self:patchBinary(0x14B, value, 2)
end

function NpcParam:ModelDispMask27(value)
	self:patchBinary(0x14B, value, 3)
end

function NpcParam:ModelDispMask28(value)
	self:patchBinary(0x14B, value, 4)
end

function NpcParam:ModelDispMask29(value)
	self:patchBinary(0x14B, value, 5)
end

function NpcParam:ModelDispMask30(value)
	self:patchBinary(0x14B, value, 6)
end

function NpcParam:ModelDispMask31(value)
	self:patchBinary(0x14B, value, 7)
end

function NpcParam:itemSearchRadius(value)
	self:patchFloat(0x14C, value)
end

function NpcParam:subHitHeight(value)
	self:patchFloat(0x150, value)
end

function NpcParam:subHitRadius(value)
	self:patchFloat(0x154, value)
end

function NpcParam:turnVelocityType(value)
	self:patchByte(0x158, value)
end

function NpcParam:isMultModeBoss(value)
    self:patchBinary(0x159, value, 0)
end

function NpcParam:Unk3(value)
    self:patchBinary(0x159, value, 1)
end

function NpcParam:behMemSize(value)
    self:patchBinary(0x159, value, 2)
end

function NpcParam:Unk4(value)
    self:patchBinary(0x159, value, 3)
end

function NpcParam:isUseFeetData(value)
    self:patchBinary(0x159, value, 4)
end

function NpcParam:Unk5(value)
    self:patchBinary(0x159, value, 5)
end

function NpcParam:Unk6(value)
    self:patchBinary(0x159, value, 6)
end

function NpcParam:Unk7(value)
    self:patchBinary(0x159, value, 7)
end

function NpcParam:defDark(value)
	self:patch2Byte(0x15A, value)
end

function NpcParam:subTurnVelocity(value)
	self:patchFloat(0x15C, value)
end

function NpcParam:footStepId(value)
	self:patch4Byte(0x160, value)
end

function NpcParam:subMaterial(value)
	self:patch2Byte(0x164, value)
end

function NpcParam:subMaterialSfx(value)
	self:patch2Byte(0x166, value)
end

function NpcParam:material_Weak(value)
	self:patch2Byte(0x168, value)
end

function NpcParam:materialSfx_Weak(value)
	self:patch2Byte(0x16A, value)
end

function NpcParam:subMaterial_weak(value)
	self:patch2Byte(0x16C, value)
end

function NpcParam:subMaterialSfx_weak(value)
	self:patch2Byte(0x16E, value)
end

function NpcParam:spEffectId8(value)
	self:patch4Byte(0x170, value)
end

function NpcParam:spEffectId9(value)
	self:patch4Byte(0x174, value)
end

function NpcParam:spEffectId10(value)
	self:patch4Byte(0x178, value)
end

function NpcParam:spEffectId11(value)
	self:patch4Byte(0x17C, value)
end

function NpcParam:spEffectId12(value)
	self:patch4Byte(0x180, value)
end
function NpcParam:spEffectId13(value)
	self:patch4Byte(0x184, value)
end
function NpcParam:spEffectId14(value)
	self:patch4Byte(0x188, value)
end
function NpcParam:spEffectId15(value)
	self:patch4Byte(0x18C, value)
end
function NpcParam:TentativePlayerId(value)
	self:patch4Byte(0x190, value)
end
function NpcParam:basicToughnessValue(value)
	self:patch4Byte(0x194, value)
end

function NpcParam:gameSystemParamCorrection(value)
	self:patchFloat(0x198, value)
end

function NpcParam:regainRate_PhysNeutral(value)
	self:patchFloat(0x19C, value)
end

function NpcParam:regainRate_PhysSlash(value)
	self:patchFloat(0x1A0, value)
end

function NpcParam:regainRate_PhysBlow(value)
	self:patchFloat(0x1A4, value)
end

function NpcParam:regainRate_PhysThrust(value)
	self:patchFloat(0x1A8, value)
end

function NpcParam:regainRate_Magic(value)
	self:patchFloat(0x1AC, value)
end

function NpcParam:regainRate_Fire(value)
	self:patchFloat(0x1B0, value)
end

function NpcParam:regainRate_Thunder(value)
	self:patchFloat(0x1B4, value)
end

function NpcParam:regainRate_Dark(value)
	self:patchFloat(0x1B8, value)
end

function NpcParam:maxAnkleAngle(value)
	self:patchFloat(0x1BC, value)
end

function NpcParam:clothUpdateOffset(value)
	self:patchByte(0x1C0, value)
end

 -- ON/OFF
function NpcParam:spNpcType(value)
	self:patchByte(0x1C1, value)
end

function NpcParam:normalChangeModelId(value)
	self:patch2Byte(0x1C2, value)
end

function NpcParam:normalChangeAnimChrId(value)
	self:patch2Byte(0x1C4, value)
end

function NpcParam:staminaGuardDefVal(value)
	self:patch2Byte(0x1C6, value)
end

function NpcParam:CultSettingId(value)
	self:patch4Byte(0x1C8, value)
end

function NpcParam:PhantomParamId(value)
	self:patch4Byte(0x1CC, value)
end

function NpcParam:MultiPlayCorrectionId(value)
	self:patch4Byte(0x1D0, value)
end

function NpcParam:FootAnkle(value)
	self:patchFloat(0x1D4, value)
end

function NpcParam:resistFrost(value)
	self:patch2Byte(0x1D8, value)
end

function NpcParam:subNpcType(value)
	self:patchByte(0x1DA, value)
end

function NpcParam:subTeamType(value)
	self:patchByte(0x1DB, value)
end

function NpcParam:lockCamParamId(value)
	self:patch4Byte(0x1DC, value)
end

function NpcParam:spEffectId16(value)
	self:patch4Byte(0x1E0, value)
end

function NpcParam:spEffectId17(value)
	self:patch4Byte(0x1E4, value)
end

function NpcParam:spEffectId18(value)
	self:patch4Byte(0x1E8, value)
end

function NpcParam:spEffectId19(value)
	self:patch4Byte(0x1EC, value)
end

function NpcParam:spEffectId20(value)
	self:patch4Byte(0x1F0, value)
end

function NpcParam:spEffectId21(value)
	self:patch4Byte(0x1F4, value)
end

function NpcParam:spEffectId22(value)
    self:patch4Byte(0x1F8, value)
end

function NpcParam:spEffectId23(value)
	self:patch4Byte(0x1FC, value)
end

function NpcParam:spEffectId24(value)
	self:patch4Byte(0x200, value)
end

function NpcParam:spEffectId25(value)
	self:patch4Byte(0x204, value)
end

function NpcParam:spEffectId26(value)
	self:patch4Byte(0x208, value)
end

function NpcParam:spEffectId27(value)
	self:patch4Byte(0x20C, value)
end

function NpcParam:spEffectId28(value)
	self:patch4Byte(0x210, value)
end

function NpcParam:spEffectId29(value)
	self:patch4Byte(0x214, value)
end

function NpcParam:spEffectId30(value)
	self:patch4Byte(0x218, value)
end

function NpcParam:spEffectId31(value)
	self:patch4Byte(0x21C, value)
end

function NpcParam:lockCorrection(value)
	self:patchFloat(0x220, value)
end

function NpcParam:subClothUpdateOffset(value)
	self:patchByte(0x224, value)
end

function NpcParam:EstusFlaskParamId(value)
	self:patch2Byte(0x225, value)
end

function NpcParam:TextId(value)
	self:patch4Byte(0x227, value)
end

function NpcParam:HPandMP_RestoreId0(value)
	self:patch2Byte(0x22B, value)
end

function NpcParam:HP_RestoreId0(value)
	self:patch2Byte(0x22D, value)
end

function NpcParam:MP_RestoreId0(value)
	self:patch2Byte(0x22F, value)
end

function NpcParam:HPandMP_RestoreId1(value)
	self:patch2Byte(0x231, value)
end

function NpcParam:HP_RestoreId1(value)
	self:patch2Byte(0x233, value)
end

function NpcParam:MP_RestoreId1(value)
	self:patch2Byte(0x235, value)
end

function NpcParam:subPhantomParamId(value)
	self:patch4Byte(0x237, value)
end

function NpcParam:activateDistance(value)
	self:patch2Byte(0x23B, value)
end

function NpcParam:DeactivateDistance(value)
	self:patch2Byte(0x23D, value)
end

--[[END NpcParam class]]--

[DISABLE]
{$lua}
if syntaxcheck then return end

</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337080283</ID>
                              <Description>"ObjActParam"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end
--[[START ObjActParam class]]--
ObjActParam = BaseParamClass:new()

function ObjActParam:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("ObjActParam", uuid, id, address)
	return o
end



function ObjActParam:actionEnableMsgId(value)
    self:patch4Byte(0x0,value)
end

function ObjActParam:actionFailedMsgId(value)
    self:patch4Byte(0x4,value)
end

function ObjActParam:spQualifiedPassEventFlag(value)
    self:patch4Byte(0x8,value)
end

function ObjActParam:playerAnimId(value)
    self:patch4Byte(0xC,value)
end

function ObjActParam:chrAnimId(value)
    self:patch4Byte(0x10,value)
end

function ObjActParam:validDist(value)
    self:patch2Byte(0x14,value)
end

function ObjActParam:spQualifiedId(value)
    self:patch2Byte(0x16,value)
end

function ObjActParam:spQualifiedId2(value)
    self:patch2Byte(0x18,value)
end

function ObjActParam:ObjDummyId(value)
    self:patchByte(0x1A,value)
end

function ObjActParam:ObjAnimId(value)
    self:patch4Byte(0x1C,value)
end

function ObjActParam:ValidPlayerAngle(value)
    self:patchByte(0x20,value)
end

function ObjActParam:spQualifiedType(value)
    self:patchByte(0x21,value)
end

function ObjActParam:spQualifiedType2(value)
    self:patchByte(0x22,value)
end

function ObjActParam:ValidObjAngle(value)
    self:patchByte(0x23,value)
end

function ObjActParam:ChrSorbType(value)
    self:patchByte(0x24,value)
end

function ObjActParam:eventKickTiming(value)
    self:patchByte(0x25,value)
end

function ObjActParam:actionButtonParamId(value)
    self:patch4Byte(0x28,value)
end

function ObjActParam:actionSuccessMsgId(value)
    self:patch4Byte(0x2C,value)
end

[DiSaBlE]
</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337080261</ID>
                              <Description>"ObjectParam"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

--[[START ObjectParam class]]--
ObjectParam = BaseParamClass:new()

function ObjectParam:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("ObjectParam", uuid, id, address)
	return o
end

function ObjectParam:HP(value)
    self:patch2Byte(0x0, value)
end

function ObjectParam:IsBreakbyPlayerCollide(value)
    self:patchBinary(0x9, value, 1)
end


[DISABLE]
{$lua}
if syntaxcheck then return end
</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337080269</ID>
                              <Description>"PhantomParam"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

PhantomParam = BaseParamClass:new()

function PhantomParam:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("PhantomParam", uuid, id, address)
	return o
end

function PhantomParam:Brightness(value)
    self:patchFloat(0x00,value)
end

function PhantomParam:Brightness1(value)
    self:patchFloat(0x04,value)
end

function PhantomParam:Brightness2(value)
    self:patchFloat(0x08,value)
end

function PhantomParam:Brightness3(value)
    self:patchFloat(0x0C,value)
end

function PhantomParam:Brightness4(value)
    self:patchFloat(0x10,value)
end

function PhantomParam:Red(value)
    self:patchByte(0x14,value)
end

function PhantomParam:Green(value)
    self:patchByte(0x15,value)
end

function PhantomParam:Blue(value)
    self:patchByte(0x16,value)
end

function PhantomParam:Red1(value)
    self:patchByte(0x17,value)
end

function PhantomParam:Green1(value)
    self:patchByte(0x18,value)
end

function PhantomParam:Blue1(value)
    self:patchByte(0x19,value)
end

function PhantomParam:Red2(value)
    self:patchByte(0x1A,value)
end

function PhantomParam:Green2(value)
    self:patchByte(0x1B,value)
end

function PhantomParam:Blue2(value)
    self:patchByte(0x1C,value)
end

function PhantomParam:Red3(value)
    self:patchByte(0x1D,value)
end

function PhantomParam:Green3(value)
    self:patchByte(0x1E,value)
end

function PhantomParam:Blue3(value)
    self:patchByte(0x1F,value)
end

function PhantomParam:Red4(value)
    self:patchByte(0x20,value)
end

function PhantomParam:Green4(value)
    self:patchByte(0x21,value)
end

function PhantomParam:Blue4(value)
    self:patchByte(0x1F,value)
end

function PhantomParam:Fade(value)
    self:patchFloat(0x24,value)
end

function PhantomParam:Fade1(value)
    self:patchFloat(0x28,value)
end

function PhantomParam:FadeType(value)
    self:patchByte(0x2C,value)
end

function PhantomParam:Flag(value)
    self:patchByte(0x2D,value)
end

function PhantomParam:Flag1(value)
    self:patchByte(0x2E,value)
end

[DISABLE]
{$lua}
if syntaxcheck then return end
</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337190229</ID>
                              <Description>"PlayRegionParam"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

PlayRegionParam = BaseParamClass:new()

function PlayRegionParam:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("PlayRegionParam", uuid, id, address)
	return o
end

function PlayRegionParam:multiPlayZoneId(value)
    local current = self:read4Byte(0x00)
    if value ~= nil then
        self:patch4Byte(0x00, value)
    end
    return current
end

function PlayRegionParam:multiPlayStartLimitEventFlagId(value)
    local current = self:read4Byte(0x04)
    if value ~= nil then
        self:patch4Byte(0x04, value)
    end
    return current
end

function PlayRegionParam:otherDisableDistance(value)
    self:patchloate(0x08, value)
end

function PlayRegionParam:pcPositionSaveLimitEventFlagId(value)
    self:patch4Byte(0x0C, value)
end

function PlayRegionParam:multiPlayHostLimitEventFlagId(value)
	local current = self:read4Byte(0x10)
	if value ~= nil then
		self:patch4Byte(0x10, value)
	end
	return current
end

function PlayRegionParam:DisolvedEventFlag(value)
    self:patch2Byte(0x14, value)
end

function PlayRegionParam:LoadOfCinder(value)
    self:patchByte(0x16, value)
end

function PlayRegionParam:isEnableEvent(value)
    self:patchBinary(0x17, value, 0)
end

function PlayRegionParam:BonfireEventId0(value)
    self:patch4Byte(0x18, value)
end

function PlayRegionParam:BonfireEventId1(value)
    self:patch4Byte(0x1C, value)
end

function PlayRegionParam:BonfireEventId2(value)
    self:patch4Byte(0x20, value)
end

function PlayRegionParam:BonfireEventId3(value)
    self:patch4Byte(0x24, value)
end

function PlayRegionParam:BonfireEventId4(value)
    self:patch4Byte(0x28, value)
end

function PlayRegionParam:BonfireEventId5(value)
    self:patch4Byte(0x2C, value)
end

function PlayRegionParam:BonfireEventId6(value)
    self:patch4Byte(0x30, value)
end

function PlayRegionParam:BonfireEventId7(value)
    self:patch4Byte(0x34, value)
end

function PlayRegionParam:BonfireEventId8(value)
    self:patch4Byte(0x38, value)
end

function PlayRegionParam:BonfireEventId9(value)
    self:patch4Byte(0x3C, value)
end

function PlayRegionParam:enableBloodstain(value)
    self:patchBinary(0x40, value, 0)
end

function PlayRegionParam:enableBloodMessage(value)
    self:patchBinary(0x40, value, 1)
end

function PlayRegionParam:enableGhost(value)
    self:patchBinary(0x40, value, 2)
end

[DISABLE]
{$lua}
if syntaxcheck then return end
</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337290660</ID>
                              <Description>"ReinforceParamWeapon"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]

ReinforceParamWeapon = BaseParamClass:new()

function ReinforceParamWeapon:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("ReinforceParamWeapon", uuid, id, address)
	return o
end

function ReinforceParamWeapon:physicsAtkRate(value)
    self:patchFloat(0x00,value)
end

function ReinforceParamWeapon:magicAtkRate(value)
    self:patchFloat(0x04,value)
end

function ReinforceParamWeapon:fireAtkRate(value)
    self:patchFloat(0x08,value)
end

function ReinforceParamWeapon:thunderAtkRate(value)
    self:patchFloat(0x0C,value)
end

function ReinforceParamWeapon:staminaAtkRate(value)
    self:patchFloat(0x10,value)
end

function ReinforceParamWeapon:saWeaponAtkRate(value)
    self:patchFloat(0x14,value)
end

function ReinforceParamWeapon:saDurabilityRate(value)
    self:patchFloat(0x18,value)
end

function ReinforceParamWeapon:correctStrengthRate(value)
    self:patchFloat(0x1C,value)
end

function ReinforceParamWeapon:correctAgilityRate(value)
    self:patchFloat(0x20,value)
end

function ReinforceParamWeapon:correctMagicRate(value)
    self:patchFloat(0x24,value)
end

function ReinforceParamWeapon:correctFaithRate(value)
    self:patchFloat(0x28,value)
end

function ReinforceParamWeapon:physicsGuardCutRate(value)
    self:patchFloat(0x2C,value)
end

function ReinforceParamWeapon:magicGuardCutRate(value)
    self:patchFloat(0x30,value)
end

function ReinforceParamWeapon:fireGuardCutRate(value)
    self:patchFloat(0x34,value)
end

function ReinforceParamWeapon:thunderGuardCutRate(value)
    self:patchFloat(0x38,value)
end

function ReinforceParamWeapon:poisonGuardResistRate(value)
    self:patchFloat(0x3C,value)
end

function ReinforceParamWeapon:toxicGuardResistRate(value)
    self:patchFloat(0x40,value)
end

function ReinforceParamWeapon:bleedGuardResistRate(value)
    self:patchFloat(0x44,value)
end

function ReinforceParamWeapon:curseGuardResistRate(value)
    self:patchFloat(0x48,value)
end

function ReinforceParamWeapon:staminaGuardResistRate(value)
    self:patchFloat(0x4C,value)
end

function ReinforceParamWeapon:spEffectId1(value)
    self:patchByte(0x50,value)
end

function ReinforceParamWeapon:spEffectId2(value)
    self:patchByte(0x51,value)
end

function ReinforceParamWeapon:spEffectId3(value)
    self:patchByte(0x52,value)
end

function ReinforceParamWeapon:ResidentSpEffectId1(value)
    self:patchByte(0x53,value)
end

function ReinforceParamWeapon:ResidentSpEffectId2(value)
    self:patchByte(0x54,value)
end

function ReinforceParamWeapon:ResidentSpEffectId3(value)
    self:patchByte(0x55,value)
end

function ReinforceParamWeapon:materialSetId(value)
    self:patchByte(0x56,value)
end

function ReinforceParamWeapon:materialSetId2(value)
    self:patchByte(0x57,value)
end

function ReinforceParamWeapon:darkAtkRate(value)
    self:patchFloat(0x58,value)
end

function ReinforceParamWeapon:darkGuardCutRate(value)
    self:patchFloat(0x5C,value)
end

function ReinforceParamWeapon:correctLuckRate(value)
    self:patchFloat(0x60,value)
end

function ReinforceParamWeapon:frostGuardResistRate(value)
    self:patchFloat(0x64,value)
end

function ReinforceParamWeapon:StabilityAtkRate(value)
    self:patchFloat(0x68,value)
end

function ReinforceParamWeapon:StabilityGuardCutRate(value)
    self:patchFloat(0x68,value)
end

--Compatibility
function ReinforceParamWeapon:darkCutRate(value)
    self:patchFloat(0x5C,value)
end

function ReinforceParamWeapon:StabilityCutRate(value)
    self:patchFloat(0x64,value)
end

[DISABLE]
</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337080268</ID>
                              <Description>"RoleParam"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

RoleParam = BaseParamClass:new()

function RoleParam:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("RoleParam", uuid, id, address)
	return o
end

function RoleParam:teamType(value)
    self:patchByte(0x00,value)
end

function RoleParam:phantomParamId(value)
    self:patch4Byte(0x04,value)
end

function RoleParam:spEffectId(value)
    self:patch4Byte(0x08,value)
end

function RoleParam:spEffectId1(value)
    self:patch4Byte(0x0C,value)
end

function RoleParam:spEffectId2(value)
    self:patch4Byte(0x10,value)
end

function RoleParam:spEffectId3(value)
    self:patch4Byte(0x14,value)
end

function RoleParam:spEffectId4(value)
    self:patch4Byte(0x18,value)
end

function RoleParam:spEffectId5(value)
    self:patch4Byte(0x1C,value)
end

function RoleParam:spEffectId6(value)
    self:patch4Byte(0x20,value)
end

function RoleParam:spEffectId7(value)
    self:patch4Byte(0x24,value)
end

function RoleParam:spEffectId8(value)
    self:patch4Byte(0x28,value)
end

function RoleParam:spEffectId9(value)
    self:patch4Byte(0x2C,value)
end

function RoleParam:soapstoneColor1(value)
    self:patch4Byte(0x30,value)
end

function RoleParam:soapstoneColor(value)
    self:patch4Byte(0x34,value)
end

function RoleParam:animEntry(value)
    self:patch4Byte(0x38,value)
end

function RoleParam:itemLotId(value)
    self:patch4Byte(0x3C,value)
end

function RoleParam:voiceChat(value)
    self:patchByte(0x40,value)
end

function RoleParam:displayNameType(value)
    self:patchByte(0x41,value)
end

function RoleParam:displayTeamTypeName(value)
    self:patch4Byte(0x44,value)
end

function RoleParam:teamType1(value)
    self:patch4Byte(0x48,value)
end

function RoleParam:phantomParamId1(value)
    self:patch4Byte(0x4C,value)
end

function RoleParam:phantomParamId2(value)
    self:patch4Byte(0x50,value)
end

function RoleParam:phantomParamId3(value)
    self:patch4Byte(0x54,value)
end

function RoleParam:spEffectId10(value)
    self:patch4Byte(0x58,value)
end

function RoleParam:spEffectId11(value)
    self:patch4Byte(0x5C,value)
end

function RoleParam:spEffectId12(value)
    self:patch4Byte(0x60,value)
end

function RoleParam:spEffectId13(value)
    self:patch4Byte(0x64,value)
end

[DISABLE]
{$lua}
if syntaxcheck then return end
</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337080264</ID>
                              <Description>"ShopLineupParam"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

ShopLineupParam = BaseParamClass:new()

function ShopLineupParam:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("ShopLineupParam", uuid, id, address)
	return o
end

function ShopLineupParam:EquipId(value)
    self:patch4Byte(0x0,value)
end

function ShopLineupParam:Value(value)
    self:patch4Byte(0x4,value)
end

function ShopLineupParam:MtrlId(value)
    self:patch4Byte(0x8,value)
end

function ShopLineupParam:EventFlag(value)
    self:patch4Byte(0xC,value)
end

function ShopLineupParam:qwcID(value)
    self:patch4Byte(0x10,value)
end

function ShopLineupParam:SellQuantity(value)
    self:patch2Byte(0x14,value)
end

function ShopLineupParam:ShopType(value)
    self:patchByte(0x16,value)
end

function ShopLineupParam:EquipType(value)
    self:patchByte(0x17,value)
end

function ShopLineupParam:Durability(value)
    self:patch2Byte(0x18,value)
end

function ShopLineupParam:Unknown(value)
    self:patch4Byte(0x1C,value)
end

function ShopLineupParam:PriceRate(value)
    self:patchFloat(0x20,value)
end


--Compatibility
function ShopLineupParam:ItemId(value)
    self:patch4Byte(0x0,value)
end

function ShopLineupParam:Price(value)
    self:patch2Byte(0x4,value)
end

function ShopLineupParam:ModelId(value)
    self:patch2Byte(0x10,value)
end

function ShopLineupParam:Amount(value)
    self:patch2Byte(0x14,value)
end

function ShopLineupParam:Category(value)
    self:patchByte(0x17,value)
end

function ShopLineupParam:Soul(value)
    self:patch4Byte(0x10,value)
end

function ShopLineupParam:ValueCorrection(value)
    self:patchFloat(0x20,value)
end

function ShopLineupParam:CostMultiplier(value)
    self:patchFloat(0x20,value)
end

[DISABLE]
{$lua}
if syntaxcheck then return end
</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337080254</ID>
                              <Description>"SpEffectParam"</Description>
                              <Options moHideChildren="1"/>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

--[[START SpEffectParam class]]--
SpEffectParam = BaseParamClass:new()

function SpEffectParam:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("SpEffectParam", uuid, id, address)
	return o
end

function SpEffectParam:iconId(value)
	self:patch4Byte(0x0, value)
end

function SpEffectParam:conditionHp(value)
	self:patchFloat(0x4, value)
end

function SpEffectParam:effectEndurance(value)
	self:patchFloat(0x8, value)
end

function SpEffectParam:motionInterval(value)
	self:patchFloat(0xC, value)
end

--Modifier
function SpEffectParam:maxHpRate(value)
	self:patchFloat(0x10, value)
end

function SpEffectParam:maxMpRate(value)
	self:patchFloat(0x14, value)
end

function SpEffectParam:maxStaminaRate(value)
	self:patchFloat(0x18, value)
end

--Damage Cut
function SpEffectParam:slashDamageCutRate(value)
	self:patchFloat(0x1C, value)
end

function SpEffectParam:blowDamageCutRate(value)
	self:patchFloat(0x20, value)
end

function SpEffectParam:thrustDamageCutRate(value)
	self:patchFloat(0x24, value)
end

function SpEffectParam:neutralDamageCutRate(value)
	self:patchFloat(0x28, value)
end

function SpEffectParam:magicDamageCutRate(value)
	self:patchFloat(0x2C, value)
end

function SpEffectParam:fireDamageCutRate(value)
	self:patchFloat(0x30, value)
end

function SpEffectParam:thunderDamageCutRate(value)
	self:patchFloat(0x34, value)
end

--Rate
function SpEffectParam:physicsAttackRate(value)
	self:patchFloat(0x38, value)
end

function SpEffectParam:magicAttackRate(value)
	self:patchFloat(0x3C, value)
end

function SpEffectParam:fireAttackRate(value)
	self:patchFloat(0x40, value)
end

function SpEffectParam:thunderAttackRate(value)
	self:patchFloat(0x44, value)
end

--Power Rate
function SpEffectParam:physicsAttackPowerRate(value)
	self:patchFloat(0x48, value)
end

function SpEffectParam:magicAttackPowerRate(value)
	self:patchFloat(0x4C, value)
end

function SpEffectParam:fireAttackPowerRate(value)
	self:patchFloat(0x50, value)
end

function SpEffectParam:thunderAttackPowerRate(value)
	self:patchFloat(0x54, value)
end

function SpEffectParam:physicsAttackPower(value)
	self:patch4Byte(0x58, value)
end

function SpEffectParam:magicAttackPower(value)
	self:patch4Byte(0x5C, value)
end

function SpEffectParam:fireAttackPower(value)
	self:patch4Byte(0x60, value)
end

function SpEffectParam:thunderAttackPower(value)
	self:patch4Byte(0x64, value)
end

--Diffence Rate
function SpEffectParam:physicsDiffenceRate(value)
	self:patchFloat(0x68, value)
end

function SpEffectParam:magicDiffenceRate(value)
	self:patchFloat(0x6C, value)
end

function SpEffectParam:fireDiffenceRate(value)
	self:patchFloat(0x70, value)
end

function SpEffectParam:thunderDiffenceRate(value)
	self:patchFloat(0x74, value)
end

function SpEffectParam:physicsDiffence(value)
	self:patch4Byte(0x78, value)
end

function SpEffectParam:magicDiffence(value)
	self:patch4Byte(0x7C, value)
end

function SpEffectParam:fireDiffence(value)
	self:patch4Byte(0x80, value)
end

function SpEffectParam:thunderDiffence(value)
	self:patch4Byte(0x84, value)
end

--Change Rare 1
function SpEffectParam:noGuardDamageRate(value)
	self:patchFloat(0x88, value)
end

function SpEffectParam:vitalSpotChangeRate(value)
	self:patchFloat(0x8C, value)
end

function SpEffectParam:normalSpotChangeRate(value)
	self:patchFloat(0x90, value)
end

function SpEffectParam:maxHpChangeRate(value)
	self:patchFloat(0x94, value)
end


function SpEffectParam:behaviorId(value)
	self:patch4Byte(0x98, value)
end

--Change Rare 2
function SpEffectParam:changeHpRate(value)
	self:patchFloat(0x9C, value)
end

function SpEffectParam:changeHpPoint(value)
	self:patch4Byte(0xA0, value)
end

function SpEffectParam:changeMpRate(value)
	self:patchFloat(0xA4, value)
end

function SpEffectParam:changeMpPoint(value)
	self:patch4Byte(0xA8, value)
end

function SpEffectParam:mpRecoverChangeSpeed(value)
	self:patch4Byte(0xAC, value)
end

function SpEffectParam:changeStaminaRate(value)
	self:patchFloat(0xB0, value)
end

function SpEffectParam:changeStaminaPoint(value)
	self:patch4Byte(0xB4, value)
end

function SpEffectParam:staminaRecoverChangeSpeed(value)
	self:patch4Byte(0xB8, value)
end


function SpEffectParam:magicEffectTimeChange(value)
	self:patchFloat(0xBC, value)
end

--Durability
function SpEffectParam:insideDurability(value)
	self:patch4Byte(0xC0, value)
end

function SpEffectParam:maxDurability(value)
	self:patch4Byte(0xC4, value)
end


function SpEffectParam:staminaAttackRate(value)
	self:patchFloat(0xC8, value)
end

function SpEffectParam:poizonAttackPower(value)
	self:patch4Byte(0xCC, value)
end

function SpEffectParam:registIllness(value)
	self:patch4Byte(0xD0, value)
end

function SpEffectParam:registBlood(value)
	self:patch4Byte(0xD4, value)
end

function SpEffectParam:registCurse(value)
	self:patch4Byte(0xD8, value)
end

function SpEffectParam:fallDamageRate(value)
	self:patchFloat(0xDC, value)
end

function SpEffectParam:soulRate(value)
	self:patchFloat(0xE0, value)
end

function SpEffectParam:equipWeightChangeRate(value)
	self:patchFloat(0xE4, value)
end

function SpEffectParam:allItemWeightChangeRate(value)
	self:patchFloat(0xE8, value)
end

function SpEffectParam:soul(value)
	self:patch4Byte(0xEC, value)
end

function SpEffectParam:animIdOffset(value)
	self:patch4Byte(0xF0, value)
end

function SpEffectParam:haveSoulRate(value)
	self:patchFloat(0xF4, value)
end

function SpEffectParam:targetPriority(value)
	self:patchFloat(0xF8, value)
end

function SpEffectParam:sightSearchEnemyCut(value)
	self:patch4Byte(0xFC, value)
end

function SpEffectParam:hearingSearchEnemyCut(value)
	self:patchFloat(0x100, value)
end

function SpEffectParam:grabityRate(value)
	self:patchFloat(0x104, value)
end

--Change Rate 3
function SpEffectParam:registPoizonChangeRate(value)
	self:patchFloat(0x108, value)
end

function SpEffectParam:registIllnessChangeRate(value)
	self:patchFloat(0x10C, value)
end

function SpEffectParam:registBloodChangeRate(value)
	self:patchFloat(0x110, value)
end

function SpEffectParam:registCurseChangeRate(value)
	self:patchFloat(0x114, value)
end


function SpEffectParam:soulStealRate(value)
	self:patchFloat(0x118, value)
end

function SpEffectParam:lifeReductionRate(value)
	self:patchFloat(0x11C, value)
end

function SpEffectParam:hpRecoverRate(value)
	self:patchFloat(0x120, value)
end

function SpEffectParam:replaceSpEffectId(value)
	self:patch4Byte(0x124, value)
end

function SpEffectParam:cycleOccurrenceSpEffectId(value)
	self:patch4Byte(0x128, value)
end

function SpEffectParam:atkOccurrenceSpEffectId(value)
	self:patch4Byte(0x12C, value)
end

function SpEffectParam:guardDefFlickPowerRate(value)
	self:patchFloat(0x130, value)
end

function SpEffectParam:guardStaminaCutRate(value)
	self:patchFloat(0x134, value)
end

function SpEffectParam:rayCastPassedTime(value)
	self:patch2Byte(0x138, value)
end

function SpEffectParam:changeSuperArmorPoint(value)
	self:patch2Byte(0x13A, value)
end

function SpEffectParam:bowDistRate(value)
	self:patch2Byte(0x13C, value)
end

function SpEffectParam:spCategory(value)
	self:patch2Byte(0x13E, value)
end

function SpEffectParam:categoryPriority(value)
	self:patchByte(0x140, value)
end

function SpEffectParam:saveCategory(value)
	self:patchByte(0x141, value)
end

function SpEffectParam:changeMagicSlot(value)
	self:patchByte(0x142, value)
end

function SpEffectParam:changeMiracleSlot(value)
	self:patchByte(0x143, value)
end

function SpEffectParam:heroPointDamage(value)
	self:patchByte(0x144, value)
end

function SpEffectParam:defFlickPower(value)
	self:patchByte(0x145, value)
end

function SpEffectParam:flickDamageCutRate(value)
	self:patchByte(0x146, value)
end

function SpEffectParam:bloodDamageRate(value)
	self:patchByte(0x147, value)
end

--Damage Level
function SpEffectParam:dmgLv_None(value)
	self:patchByte(0x148, value)
end

function SpEffectParam:dmgLv_S(value)
	self:patchByte(0x149, value)
end

function SpEffectParam:dmgLv_M(value)
	self:patchByte(0x14A, value)
end

function SpEffectParam:dmgLv_L(value)
	self:patchByte(0x14B, value)
end

function SpEffectParam:dmgLv_BlowM(value)
	self:patchByte(0x14C, value)
end

function SpEffectParam:dmgLv_Push(value)
	self:patchByte(0x14D, value)
end

function SpEffectParam:dmgLv_Strike(value)
	self:patchByte(0x14E, value)
end

function SpEffectParam:dmgLv_BlowS(value)
	self:patchByte(0x14F, value)
end

function SpEffectParam:dmgLv_Min(value)
	self:patchByte(0x150, value)
end

function SpEffectParam:dmgLv_Uppercut(value)
	self:patchByte(0x151, value)
end

function SpEffectParam:dmgLv_BlowLL(value)
	self:patchByte(0x152, value)
end

function SpEffectParam:dmgLv_Breath(value)
	self:patchByte(0x153, value)
end


function SpEffectParam:atkAttribute(value)
	self:patchByte(0x154, value)
end

function SpEffectParam:spAttribute(value)
	self:patchByte(0x155, value)
end

function SpEffectParam:stateInfo(value)
	self:patch2Byte(0x156, value)
end

function SpEffectParam:wepParamChange(value)
	self:patchByte(0x158, value)
end

function SpEffectParam:moveType(value)
	self:patchByte(0x159, value)
end

function SpEffectParam:lifeReductionType(value)
	self:patchByte(0x15A, value)
end

function SpEffectParam:throwCondition(value)
	self:patchByte(0x15C, value)
end

function SpEffectParam:addBehaviorJudgeId_condition(value)
	self:patchByte(0x15D, value)
end

function SpEffectParam:addBehaviorJudgeId_add(value)
	self:patchByte(0x15E, value)
end

-- insert Minor 1 here

function SpEffectParam:TargetSelf(value)
	self:patchBinary(0x15F, value, 0)
end

function SpEffectParam:TargetFriend(value)
	self:patchBinary(0x15F, value, 1)
end

function SpEffectParam:TargetEnemy(value)
	self:patchBinary(0x15F, value, 2)
end

function SpEffectParam:TargetPlayer(value)
	self:patchBinary(0x15F, value, 3)
end

function SpEffectParam:TargetAI(value)
	self:patchBinary(0x15F, value, 4)
end

function SpEffectParam:TargetLive(value)
	self:patchBinary(0x15F, value, 5)
end

function SpEffectParam:TargetGhost(value)
	self:patchBinary(0x15F, value, 6)
end

function SpEffectParam:TargetWhiteGhost(value)
	self:patchBinary(0x15F, value, 7)
end

function SpEffectParam:TargetBlackGhost(value)
	self:patchBinary(0x160, value, 0)
end

function SpEffectParam:TargetAttacker(value)
	self:patchBinary(0x160, value, 1)
end

function SpEffectParam:DispIconNonactive(value)
	self:patchBinary(0x160, value, 2)
end

function SpEffectParam:useSpEffectEffect(value)
	self:patchBinary(0x160, value, 3)
end

--scales with int
function SpEffectParam:bAdjustMagicAblity(value)
	self:patchBinary(0x160, value, 4)
end

--scales with fth
function SpEffectParam:bAdjustFaithAblity(value)
	self:patchBinary(0x160, value, 5)
end

--scales with NG+
function SpEffectParam:bGameClearBonus(value)
	self:patchBinary(0x160, value, 6)
end

--affects sorceries
function SpEffectParam:magParamChange(value)
	self:patchBinary(0x160, value, 7)
end

--affects miracles
function SpEffectParam:miracleParamChange(value)
	self:patchBinary(0x161, value, 0)
end

--removes souls
function SpEffectParam:clearSoul(value)
	self:patchBinary(0x161, value, 1)
end

--places white summon sign
function SpEffectParam:requestSOS(value)
	self:patchBinary(0x161, value, 2)
end

--places red summon sign
function SpEffectParam:requestBlackSOS(value)
	self:patchBinary(0x161, value, 3)
end

--try to invade
function SpEffectParam:requestForceJoinBlackSOS(value)
	self:patchBinary(0x161, value, 4)
end

--black crystal menu
function SpEffectParam:requestKickSession(value)
	self:patchBinary(0x161, value, 5)
end

--leave world as phantom
function SpEffectParam:requestLeaveSession(value)
	self:patchBinary(0x161, value, 6)
end

--search for npc world to invade if available
function SpEffectParam:requestNpcInveda(value)
	self:patchBinary(0x161, value, 7)
end

function SpEffectParam:noDead(value)
	self:patchBinary(0x162, value, 0)
end

function SpEffectParam:bCurrHPIndependeMaxHP(value)
	self:patchBinary(0x162, value, 1)
end

function SpEffectParam:corrosionIgnore(value)
	self:patchBinary(0x162, value, 2)
end

function SpEffectParam:sightSearchCutIgnore(value)
	self:patchBinary(0x162, value, 3)
end

function SpEffectParam:hearingSearchCutIgnore(value)
	self:patchBinary(0x162, value, 4)
end

function SpEffectParam:antiMagicIgnore(value)
	self:patchBinary(0x162, value, 5)
end

function SpEffectParam:fakeTargetIgnore(value)
	self:patchBinary(0x162, value, 6)
end

function SpEffectParam:fakeTargetIgnoreUndead(value)
	self:patchBinary(0x162, value, 7)
end

function SpEffectParam:fakeTargetIgnoreAnimal(value)
	self:patchBinary(0x163, value, 0)
end

function SpEffectParam:grabityIgnore(value)
	self:patchBinary(0x163, value, 1)
end

function SpEffectParam:disablePoison(value)
	self:patchBinary(0x163, value, 2)
end

function SpEffectParam:disableDisease(value)
	self:patchBinary(0x163, value, 3)
end

function SpEffectParam:disableBlood(value)
	self:patchBinary(0x163, value, 4)
end

function SpEffectParam:disableCurse(value)
	self:patchBinary(0x163, value, 5)
end

function SpEffectParam:enableCharm(value)
	self:patchBinary(0x163, value, 6)
end

function SpEffectParam:enableLifeTime(value)
	self:patchBinary(0x163, value, 7)
end

function SpEffectParam:hasTarget(value)
	self:patchBinary(0x164, value, 0)
end

function SpEffectParam:isFireDamageCancel(value)
	self:patchBinary(0x164, value, 1)
end

function SpEffectParam:isExtendSpEffectLife(value)
	self:patchBinary(0x164, value, 2)
end

--leave arena match
function SpEffectParam:requestLeaveColiseumSession(value)
	self:patchBinary(0x164, value, 3)
end

function SpEffectParam:vowType0(value)
	self:patchBinary(0x165, value, 0)
end

function SpEffectParam:vowType1(value)
	self:patchBinary(0x165, value, 1)
end

function SpEffectParam:vowType2(value)
	self:patchBinary(0x165, value, 2)
end

function SpEffectParam:vowType3(value)
	self:patchBinary(0x165, value, 3)
end

function SpEffectParam:vowType4(value)
	self:patchBinary(0x165, value, 4)
end

function SpEffectParam:vowType5(value)
	self:patchBinary(0x165, value, 5)
end

function SpEffectParam:vowType6(value)
	self:patchBinary(0x165, value, 6)
end

function SpEffectParam:vowType7(value)
	self:patchBinary(0x165, value, 7)
end

function SpEffectParam:vowType8(value)
	self:patchBinary(0x166, value, 0)
end

function SpEffectParam:vowType9(value)
	self:patchBinary(0x166, value, 1)
end

function SpEffectParam:vowType10(value)
	self:patchBinary(0x166, value, 2)
end

function SpEffectParam:vowType11(value)
	self:patchBinary(0x166, value, 3)
end

function SpEffectParam:vowType12(value)
	self:patchBinary(0x166, value, 4)
end

function SpEffectParam:vowType13(value)
	self:patchBinary(0x166, value, 5)
end

function SpEffectParam:vowType14(value)
	self:patchBinary(0x166, value, 6)
end

function SpEffectParam:vowType15(value)
	self:patchBinary(0x166, value, 7)
end


function SpEffectParam:effectTargetOpposeTarget(value)
	self:patchBinary(0x16C, value, 0)
end

function SpEffectParam:effectTargetFriendlyTarget(value)
	self:patchBinary(0x16C, value, 1)
end

function SpEffectParam:effectTargetSelfTarget(value)
	self:patchBinary(0x16C, value, 2)
end

function SpEffectParam:behaviorFireFrom(value)
	self:patchByte(0x16E, value)
end

function SpEffectParam:effectSfx(value)
	self:patch4Byte(0x170, value)
end

function SpEffectParam:triggerEffect(value)
	self:patch4Byte(0x174, value)
end

function SpEffectParam:triggerRequirement(value)
	self:patch4Byte(0x178, value)
end

function SpEffectParam:effectSfx1(value)
	self:patch4Byte(0x190, value)
end

-- insert Unknown here

function SpEffectParam:registFrost(value)
	self:patch4Byte(0x1AC, value)
end

function SpEffectParam:darkDamageCutRate(value)
	self:patchFloat(0x1D4, value)
end

function SpEffectParam:darkDiffenceRate(value)
	self:patchFloat(0x1D8, value)
end

function SpEffectParam:darkDiffence(value)
	self:patchFloat(0x1DC, value)
end

function SpEffectParam:darkAttackPowerRate(value)
	self:patchFloat(0x1E4, value)
end

function SpEffectParam:darkAttackPower(value)
	self:patch4Byte(0x1E8, value)
end

function SpEffectParam:itemDiscovery(value)
	self:patchFloat(0x1FC, value)
end

--absorbtions pvp
function SpEffectParam:pvpAbsorbtionPhys(value)
	self:patchFloat(0x268, value)
end

function SpEffectParam:pvpAbsorbtionMag(value)
	self:patchFloat(0x26C, value)
end

function SpEffectParam:pvpAbsorbtionFire(value)
	self:patchFloat(0x270, value)
end

function SpEffectParam:pvpAbsorbtionThun(value)
	self:patchFloat(0x274, value)
end

function SpEffectParam:pvpAbsorbtionDark(value)
	self:patchFloat(0x278, value)
end

--absorbtions pve
function SpEffectParam:pveAbsorbtionPhys(value)
	self:patchFloat(0x27C, value)
end

function SpEffectParam:pveAbsorbtionMag(value)
	self:patchFloat(0x280, value)
end

function SpEffectParam:pveAbsorbtionFire(value)
	self:patchFloat(0x284, value)
end

function SpEffectParam:pveAbsorbtionThun(value)
	self:patchFloat(0x288, value)
end

function SpEffectParam:pveAbsorbtionDark(value)
	self:patchFloat(0x28C, value)
end

--damage pvp
function SpEffectParam:pvpAttackPhys(value)
	self:patchFloat(0x294, value)
end

function SpEffectParam:pvpAttackMag(value)
	self:patchFloat(0x298, value)
end

function SpEffectParam:pvpAttackFire(value)
	self:patchFloat(0x29C, value)
end

function SpEffectParam:pvpAttackThun(value)
	self:patchFloat(0x2A0, value)
end

function SpEffectParam:pvpAttackDark(value)
	self:patchFloat(0x2A4, value)
end

--damage pve
function SpEffectParam:pveAttackPhys(value)
	self:patchFloat(0x2A8, value)
end

function SpEffectParam:pveAttackMag(value)
	self:patchFloat(0x2AC, value)
end

function SpEffectParam:pveAttackFire(value)
	self:patchFloat(0x2B0, value)
end

function SpEffectParam:pveAttackThun(value)
	self:patchFloat(0x2B4, value)
end

function SpEffectParam:pveAttackDark(value)
	self:patchFloat(0x2B8, value)
end


function SpEffectParam:registFrostChange(value)
	self:patch4Byte(0x2BC, value)
end


function SpEffectParam:pyroParamChange(value)
	self:patchBinary(0x2C6, value, 0)
end

function SpEffectParam:castDexterity(value)
	self:patchByte(0x2C7, value)
end

function SpEffectParam:magicMpCost(value)
	self:patchFloat(0x2D0, value)
end

function SpEffectParam:pyroMpCost(value)
	self:patchFloat(0x2D4, value)
end

function SpEffectParam:miracleMpCost(value)
	self:patchFloat(0x2D8, value)
end


function SpEffectParam:estusHpRate(value)
	self:patch4Byte(0x2DC, value)
end

function SpEffectParam:estusHpPoint(value)
	self:patch4Byte(0x2E0, value)
end

function SpEffectParam:estusMpRate(value)
	self:patch4Byte(0x2E4, value)
end

function SpEffectParam:etsusMpPoint(value)
	self:patch4Byte(0x2E8, value)
end

function SpEffectParam:estusMult(value)
	self:patchFloat(0x2EC, value)
end

function SpEffectParam:ashenMult(value)
	self:patchFloat(0x2F0, value)
end

--Buffs
function SpEffectParam:vigor(value)
	self:patchByte(0x308, value)
end

function SpEffectParam:attunement(value)
	self:patchByte(0x309, value)
end

function SpEffectParam:endurance(value)
	self:patchByte(0x30A, value)
end

function SpEffectParam:vitality(value)
	self:patchByte(0x30B, value)
end

function SpEffectParam:strength(value)
	self:patchByte(0x30C, value)
end

function SpEffectParam:dexterity(value)
	self:patchByte(0x30D, value)
end

function SpEffectParam:intelligence(value)
	self:patchByte(0x30E, value)
end

function SpEffectParam:faith(value)
	self:patchByte(0x30F, value)
end

function SpEffectParam:luck(value)
	self:patchByte(0x310, value)
end


--Compatibility
function SpEffectParam:atkOccurence(value)
	self:patch4Byte(0x12C, value)
end
function SpEffectParam:atkOccurrence(value)
	self:patch4Byte(0x12C, value)
end

function SpEffectParam:restrictFlags(value)
	self:patchByte(0x16C, value)
end

function SpEffectParam:vigorBuff(value)
	self:patchByte(0x308, value)
end

function SpEffectParam:attunementBuff(value)
	self:patchByte(0x309, value)
end

function SpEffectParam:enduranceBuff(value)
	self:patchByte(0x30A, value)
end

function SpEffectParam:vitalityBuff(value)
	self:patchByte(0x30B, value)
end

function SpEffectParam:strenghtBuff(value)
	self:patchByte(0x30C, value)
end

function SpEffectParam:strengthBuff(value)
	self:patchByte(0x30C, value)
end

function SpEffectParam:dextrerityBuff(value)
	self:patchByte(0x30D, value)
end

function SpEffectParam:intelligenceBuff(value)
	self:patchByte(0x30E, value)
end

function SpEffectParam:faithBuff(value)
	self:patchByte(0x30F, value)
end

function SpEffectParam:luckBuff(value)
	self:patchByte(0x310, value)
end

--[[END SpEffectParam class]]--

[DISABLE]
{$lua}
if syntaxcheck then return end

</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337290661</ID>
                              <Description>"SpEffectVfxParam"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

--[[START SpEffectVfxParam class]]--
SpEffectVfxParam = BaseParamClass:new()

function SpEffectVfxParam:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("SpEffectVfxParam", uuid, id, address)
	return o
end

function SpEffectVfxParam:midstSfxID(value)
    self:patch4Byte(0x0, value)
end

function SpEffectVfxParam:midstSeID(value)
    self:patch4Byte(0x4, value)
end

function SpEffectVfxParam:initSfxID(value)
    self:patch4Byte(0x8, value)
end

function SpEffectVfxParam:InitSeID(value)
    self:patch4Byte(0xC, value)
end

function SpEffectVfxParam:FinishSfxID(value)
    self:patch4Byte(0x10, value)
end

function SpEffectVfxParam:FinishSeID(value)
    self:patch4Byte(0x14, value)
end

function SpEffectVfxParam:camouflageBeginDist(value)
    self:patchFloat(0x18, value)
end

function SpEffectVfxParam:camouflageEndDist(value)
    self:patchFloat(0x1C, value)
end

function SpEffectVfxParam:transformProtectorID(value)
    self:patch4Byte(0x20, value)
end

function SpEffectVfxParam:midstDmyID(value)
    self:patch2Byte(0x24, value)
end

function SpEffectVfxParam:initDmyID(value)
    self:patch2Byte(0x26, value)
end

function SpEffectVfxParam:FinishDmyID(value)
    self:patch2Byte(0x28, value)
end

function SpEffectVfxParam:EffectType(value)
    self:patchByte(0x2A, value)
end

function SpEffectVfxParam:SoulParamIDForWepEnchant(value)
    self:patchByte(0x2B, value)
end

function SpEffectVfxParam:soulParamIdForWepEnchant0(value) --compatibility
    self:patchByte(0x2B, value)
end

function SpEffectVfxParam:PlayCategory(value)
    self:patchByte(0x2C, value)
end

function SpEffectVfxParam:PlayPriority(value)
    self:patchByte(0x2D, value)
end

function SpEffectVfxParam:ExistEffectForLarge(value)
    self:patchBinary(0x2E, value , 0)
end

function SpEffectVfxParam:ExistEffectForSoul(value)
    self:patchBinary(0x2E, value , 1)
end

function SpEffectVfxParam:EffectInvisibleAtCamouflage(value)
    self:patchBinary(0x2E, value , 2)
end

function SpEffectVfxParam:useCamouflage(value)
    self:patchBinary(0x2E, value , 3)
end

function SpEffectVfxParam:InvisibleAtFriendCamouflage(value)
    self:patchBinary(0x2E, value , 4)
end

function SpEffectVfxParam:addMapAreaBlock(value)
    self:patchBinary(0x2E, value , 5)
end

function SpEffectVfxParam:halfCamouflage(value)
    self:patchBinary(0x2E, value , 6)
end

function SpEffectVfxParam:isFullBodyTransformProtectorID(value)
    self:patchBinary(0x2E, value , 7)
end

function SpEffectVfxParam:IsInvisibleWeapon(value)
    self:patchBinary(0x2F, value , 0)
end

function SpEffectVfxParam:IsSilence(value)
    self:patchBinary(0x2F, value , 1)
end

function SpEffectVfxParam:isGauntletProtectorId(value)
    self:patchBinary(0x2F, value , 2)
end

function SpEffectVfxParam:Unk1(value)
    self:patchBinary(0x2F, value , 3)
end

function SpEffectVfxParam:Unk2(value)
    self:patchBinary(0x2F, value , 4)
end

function SpEffectVfxParam:Unk3(value)
    self:patchBinary(0x2F, value , 5)
end

function SpEffectVfxParam:Unk4(value)
    self:patchBinary(0x2F, value , 6)
end

function SpEffectVfxParam:Unk5(value)
    self:patchBinary(0x2F, value , 7)
end

function SpEffectVfxParam:DecalId0(value)
    self:patch4Byte(0x30, value)
end

function SpEffectVfxParam:DecalId1(value)
    self:patch4Byte(0x34, value)
end

function SpEffectVfxParam:soulParamIdForWepEnchant1(value)
    self:patchByte(0x38, value)
end

function SpEffectVfxParam:SpEffectSp0(value)
    self:patchByte(0x39, value)
end

function SpEffectVfxParam:SpEffectSp1(value)
    self:patchByte(0x3A, value)
end

function SpEffectVfxParam:bodyProtectorType(value)
    self:patchByte(0x3B, value)
end

function SpEffectVfxParam:SpSfxId0(value)
    self:patch4Byte(0x3C, value)
end

function SpEffectVfxParam:SpSfxId1(value)
    self:patch4Byte(0x40, value)
end

function SpEffectVfxParam:SpSfxId2(value)
    self:patch4Byte(0x44, value)
end

function SpEffectVfxParam:SpSfxId3(value)
    self:patch4Byte(0x48, value)
end

function SpEffectVfxParam:SpSfxId4(value)
    self:patch4Byte(0x4C, value)
end

function SpEffectVfxParam:SpSfxId5(value)
    self:patch4Byte(0x50, value)
end

function SpEffectVfxParam:SpSfxId6(value)
    self:patch4Byte(0x54, value)
end

function SpEffectVfxParam:SpSfxId7(value)
    self:patch4Byte(0x58, value)
end

function SpEffectVfxParam:SpSfxId8(value)
    self:patch4Byte(0x5C, value)
end

function SpEffectVfxParam:SpSfxId9(value)
    self:patch4Byte(0x60, value)
end

function SpEffectVfxParam:SpSfxId10(value)
    self:patch4Byte(0x64, value)
end

function SpEffectVfxParam:SpSfxId11(value)
    self:patch4Byte(0x68, value)
end

function SpEffectVfxParam:SpSfxId12(value)
    self:patch4Byte(0x6C, value)
end

function SpEffectVfxParam:SpSfxId13(value)
    self:patch4Byte(0x70, value)
end

function SpEffectVfxParam:SpSfxId14(value)
    self:patch4Byte(0x74, value)
end

function SpEffectVfxParam:SpSfxId15(value)
    self:patch4Byte(0x78, value)
end

function SpEffectVfxParam:Unk6(value)
    self:patchByte(0x7C, value)
end

function SpEffectVfxParam:PhantomType(value)
    self:patchByte(0x7D, value)
end

function SpEffectVfxParam:CamouflageGhost(value)
    self:patchByte(0x7E, value)
end

function SpEffectVfxParam:Unk7(value)
    self:patchByte(0x7F, value)
end

function SpEffectVfxParam:PhantomParamId(value)
    self:patch4Byte(0x80, value)
end

function SpEffectVfxParam:EmissiveIntensityScale(value)
    self:patchFloat(0x84, value)
end

function SpEffectVfxParam:Unk8(value)
    self:patchFloat(0x88, value)
end

function SpEffectVfxParam:BodyProtectorVal(value)
    self:patch2Byte(0x8C, value)
end

function SpEffectVfxParam:Unk9(value)
    self:patch2Byte(0x8E, value)
end

function SpEffectVfxParam:CinderIntensityScale(value)
    self:patchFloat(0x90, value)
end
[DISABLE]
{$lua}
if syntaxcheck then return end
</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337080270</ID>
                              <Description>"SwordArtsParam"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

--[[START SwordArtsParam class]]--
SwordArtsParam = BaseParamClass:new()

function SwordArtsParam:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("SwordArtsParam", uuid, id, address)
	return o
end

function SwordArtsParam:WeaponArtId(value)
    self:patchByte(0x0,value)
end

function SwordArtsParam:FPcost(value)
    self:patch2Byte(0xE,value)
end

function SwordArtsParam:R1FP(value)
    self:patch2Byte(0x10,value)
end

function SwordArtsParam:R2FP(value)
    self:patch2Byte(0x12,value)
end

[DISABLE]
{$lua}
if syntaxcheck then return end

</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337080257</ID>
                              <Description>"ThrowParam"</Description>
                              <Options moHideChildren="1"/>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

--[[START ThrowParam class]]--
ThrowParam = BaseParamClass:new()

function ThrowParam:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("ThrowParam", uuid, id, address)
	return o
end

function ThrowParam:AtkChrId(value)
	self:patch4Byte(0x0, value)
end

function ThrowParam:DefChrId(value)
	self:patch4Byte(0x4, value)
end

function ThrowParam:Dist(value)
	self:patchFloat(0x8, value)
end

function ThrowParam:DiffAngMin(value)
	self:patchFloat(0xC, value)
end

function ThrowParam:DiffAngMax(value)
	self:patchFloat(0x10, value)
end

function ThrowParam:UpperYRange(value)
	self:patchFloat(0x14, value)
end

function ThrowParam:LowerYRange(value)
	self:patchFloat(0x18, value)
end

function ThrowParam:DiffAngMyToDef(value)
	self:patchFloat(0x1C, value)
end

function ThrowParam:ThrowTypeId(value)
	self:patch4Byte(0x20, value)
end

function ThrowParam:AtkAnimId(value)
	self:patch4Byte(0x24, value)
end

function ThrowParam:DefAnimId(value)
	self:patch4Byte(0x28, value)
end

function ThrowParam:EscHp(value)
	self:patch2Byte(0x2C, value)
end

function ThrowParam:SelfEscCycleTime(value)
	self:patch2Byte(0x2E, value)
end

function ThrowParam:SphereCastRadiusRateTop(value)
	self:patch2Byte(0x30, value)
end

function ThrowParam:SphereCastRadiusRateLow(value)
	self:patch2Byte(0x32, value)
end

function ThrowParam:PadType(value)
	self:patchByte(0x34, value)
end

function ThrowParam:AtkEnableState(value)
	self:patchByte(0x35, value)
end

function ThrowParam:AtkSorbDmyId(value)
	self:patchByte(0x36, value)
end

function ThrowParam:DefSorbDmyId(value)
	self:patchByte(0x37, value)
end

function ThrowParam:ThrowType(value)
	self:patchByte(0x38, value)
end

function ThrowParam:SelfEscCycleCnt(value)
	self:patchByte(0x39, value)
end

function ThrowParam:DmyHasChrDirType(value)
	self:patchByte(0x3A, value)
end

-- insert 3B-7C here

--[[END ThrowParam class]]--

[DISABLE]
{$lua}
if syntaxcheck then return end

</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337080284</ID>
                              <Description>"UpperArmParam"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end
--[[START UpperArmParam class]]--
UpperArmParam = BaseParamClass:new()

function UpperArmParam:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("UpperArmParam", uuid, id, address)
	return o
end

function UpperArmParam:ArmZ0(value)
    self:patchFloat(0x0,value)
end

function UpperArmParam:ArmXY0(value)
    self:patchFloat(0x4,value)
end

function UpperArmParam:ArmZ1(value)
    self:patchFloat(0x8,value)
end

function UpperArmParam:ArmXY1(value)
    self:patchFloat(0xC,value)
end

function UpperArmParam:ArmZ2(value)
    self:patchFloat(0x10,value)
end

function UpperArmParam:ArmXY2(value)
    self:patchFloat(0x14,value)
end

function UpperArmParam:ArmZ3(value)
    self:patchFloat(0x18,value)
end

function UpperArmParam:ArmXY3(value)
    self:patchFloat(0x1C,value)
end

function UpperArmParam:ArmZ4(value)
    self:patchFloat(0x20,value)
end

function UpperArmParam:ArmXY4(value)
    self:patchFloat(0x24,value)
end

function UpperArmParam:ArmZ5(value)
    self:patchFloat(0x28,value)
end

function UpperArmParam:ArmXY5(value)
    self:patchFloat(0x2C,value)
end

function UpperArmParam:ArmZ6(value)
    self:patchFloat(0x30,value)
end

function UpperArmParam:ArmXY6(value)
    self:patchFloat(0x34,value)
end

function UpperArmParam:ArmZ7(value)
    self:patchFloat(0x38,value)
end

function UpperArmParam:ArmXY7(value)
    self:patchFloat(0x3C,value)
end

function UpperArmParam:ArmZ8(value)
    self:patchFloat(0x40,value)
end

function UpperArmParam:ArmXY8(value)
    self:patchFloat(0x44,value)
end

function UpperArmParam:ArmZ9(value)
    self:patchFloat(0x48,value)
end

function UpperArmParam:ArmXY9(value)
    self:patchFloat(0x4C,value)
end

[DISABLE]
</AssemblerScript>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>1337080251</ID>
                              <Description>"WetAspectParam"</Description>
                              <VariableType>Auto Assembler Script</VariableType>
                              <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end
--[[START WetAspectParam class]]--
WetAspectParam = BaseParamClass:new()

function WetAspectParam:new(uuid, id, address)
	local o = {}
	self.__index = self
	setmetatable(o, self)

	o:init("WetAspectParam", uuid, id, address)
	return o
end

function WetAspectParam:Red(value)
    self:patchByte(0x0,value)
end

function WetAspectParam:Green(value)
    self:patchByte(0x1,value)
end

function WetAspectParam:Blue(value)
    self:patchByte(0x2,value)
end

function WetAspectParam:Alpha(value)
    self:patchFloat(0x4,value)
end

function WetAspectParam:Red2(value)
    self:patchByte(0x8,value)
end

function WetAspectParam:Green2(value)
    self:patchByte(0x9,value)
end

function WetAspectParam:Blue2(value)
    self:patchByte(0xA,value)
end

function WetAspectParam:Alpha2(value)
    self:patchFloat(0xC,value)
end

function WetAspectParam:WetRate(value)
    self:patchFloat(0x10,value)
end

function WetAspectParam:WetCorrection(value)
    self:patchByte(0x14,value)
end

[DISABLE]
</AssemblerScript>
                            </CheatEntry>
                          </CheatEntries>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1337273494</ID>
                      <Description>"Gaming Mode + Ctrl F"</Description>
                      <Color>80FFFF</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then autoDisable(memrec) end

controlMainForm = getMainForm()
control_setCaption(controlMainForm , "EzTablev1.5.0")

package.preload["ce.view_mode"] = function(...)
  local _m = {}

  local STANDARD_MODE = 0
  local GAMING_MODE = 1
  local COMPACT_MODE = 3

  -- caption shows name of the next mode
  local captions = {
    [STANDARD_MODE] = 'Standard &amp;View Mode',
    [GAMING_MODE] = 'Gaming &amp;View Mode',
    [COMPACT_MODE] = 'Compact &amp;View Mode'}

  function _m:_update()
    self.menu_item.Caption = captions[self.mode]
    -- splitter between Scanning panel and Address list
    MainForm.Splitter1.Visible = self.mode == STANDARD_MODE
    -- Status bar
    MainForm.Panel4.Visible = self.mode == STANDARD_MODE
    -- Scanning panel
    MainForm.Panel5.Visible = self.mode == STANDARD_MODE
    -- Address column in Address list
    AddressList.Header.Sections[2].Visible = self.mode == STANDARD_MODE or self.mode == COMPACT_MODE
    -- Type column in Address list
    AddressList.Header.Sections[3].Visible = self.mode == STANDARD_MODE or self.mode == COMPACT_MODE
  end

  function _m:cycle()
    if self.mode == STANDARD_MODE then
      self.mode = GAMING_MODE
    elseif self.mode == GAMING_MODE then
      self.mode = COMPACT_MODE
    elseif self.mode == COMPACT_MODE then
      self.mode = STANDARD_MODE
    end
    self:_update()
  end

  function _m:standard()
    self.mode = COMPACT_MODE
    self:_update()
  end

  function _m:gaming()
    self.mode = GAMING_MODE
    self:_update()
  end

  function _m:compact()
    self.mode = COMPACT_MODE
    self:_update()
  end


  local parent = getMainForm().Menu.Items
  local menu_item = createMenuItem(parent)
  menu_item.OnClick = function() _m:cycle() end
  parent.add(menu_item)

  _m.menu_item = menu_item
  _m:standard()

  return _m
end

require("ce.view_mode")

--prevent clicking on sort buttons
getAddressList().Control[1].OnSectionClick = nil

--[[
Finds memrec by ID or description and tries to make it visible.
Adds "Edit -&gt; Scroll to" menu item.
Available via &lt;Ctrl+F&gt; and &lt;Alt+E,S&gt; shortcuts.

Install by placing this file in CE autorun folder
by default "C:\Program Files (x86)\Cheat Engine 6.8.3\autorun"

Type part of a description and select one of remaining items in the list below the searchbox.
Or press &lt;Enter&gt; to select first item right away.
To search by ID, type a number into the searchbox and press &lt;Enter&gt;

Tested only on CE 6.8.3
Author: ametalon
Date: 2020-03-23
]]

package.preload["ce.scroll_to"] = function(...)
  local _m = {}

  -- Recursively activates given memrec and its parents
  local function recursive_activate(memrec)
    if(not memrec) then return end
    recursive_activate(memrec.Parent)
    memrec.Active = true
  end

  -- Returns data that will be used for a search
  local function refresh_search_list()
    local addr_list = getAddressList()
    local list = createStringlist()
    list.beginUpdate()
    for i = 0, addr_list.Count - 1 do
      list.add(addr_list[i].Description)
    end
    list.endUpdate()
    return list
  end

  -- Makes given memrec visible on screen
  -- @param memrec MemoryRecord
  function _m:scroll_to_memrec(memrec)
    if(not memrec) then return end
    recursive_activate(memrec.Parent)
    -- focus AddressList's TTreeviewWithScroll to set keyboard focus for the selected memrec
    getAddressList().Control[0].setFocus()
    getAddressList().setSelectedRecord(memrec)
  end

  -- Shows search dialog and tries to find memrec for typed text
  -- @return MemoryRecord | nil
  function _m:find_memrec()
    local addr_list = getAddressList()

    if not self.description_list or self.description_list.Count ~= addr_list.Count then
      self.description_list = refresh_search_list()
    end

    local i, text = showSelectionList(
      "Scroll to memory record",
      "Enter ID or description\n&lt;Enter&gt; selects the first element in the list",
      self.description_list,
      true
    )
    -- one of the list elements was selected
    if i &gt;= 0 then return addr_list[i] end
    -- no text was typed
    if text == '' then return end
    local memrec
    -- check if numeric ID was typed
    local id = tonumber(text)
    if(id) then
      memrec = addr_list.getMemoryRecordByID(id)
      if memrec then return memrec end
    end
    -- check if typed text is an exact description of a memrec
    memrec = addr_list.getMemoryRecordByDescription(text)
    if memrec then return memrec end
    -- fallback to full list search by a partial match
    i = self:_dumb_search(text)
    if i then return addr_list[i] end
  end

  -- horrible, horrible search
  -- returns index of the first memrec with description containing given text
  -- @return Integer | nil
  function _m:_dumb_search(text)
    text = string.lower(text)
    for i = 0, self.description_list.Count - 1 do
      -- plain "find substring" operation
      if string.find(string.lower(self.description_list[i]), text, 1, true) then
        return i
      end
    end
  end


  -- add new menu item
  -- if can't find Edit menu item add to the main menu itself
  local parent = getMainForm().Edit3 or getMainForm().Menu.Items
  local new_item = createMenuItem(parent)
  new_item.Caption = '&amp;Scroll to'
  new_item.Shortcut = "Ctrl+F"
  new_item.OnClick = function() _m:scroll_to_memrec(_m:find_memrec()) end
  parent.add(new_item)

  return _m
end

require("ce.scroll_to")

autoDisable(memrec, 500)
[DISABLE]

</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1337263895</ID>
                      <Description>"Improved ItemGib"</Description>
                      <Options moHideChildren="1"/>
                      <Color>80FFFF</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{
Adds item to inventory
Authors: Coinsworth, inuNorii and ametalon
}
[ENABLE]
aobscanmodule(ItemGib_Main_AOB,$process,8B 02 83 F8 06)
aobscanmodule(WeaponLookup_AOB,$process,8B EA 48 8B F1 33 DB 41 83 CE FF 85 D2)
aobscanmodule(AddableQuantity_AOB,$process,48 89 44 24 ?? 48 8D 44 24 ?? 48 89 44 24 ?? 8B 01)
define(ItemGib_Main_Call,ItemGib_Main_AOB-2F)
define(WeaponLookup_Call,WeaponLookup_AOB-22)
define(AddableQuantity_Call,AddableQuantity_AOB-18)
alloc(Code,$500,DarkSoulsIII.exe)
alloc(Data,$100,DarkSoulsIII.exe)

Data:

BetterItemGibData:
registerSymbol(BetterItemGibData)
dd #-1      // quantity
dd 400001F4 // id
dd #-1      // durability
dd 0        // infusion
dd #-1      // upgrade level
align 10 0

ItemToSpawn:
dd 1 // counter
dd 0 // id
dd 0 // quantity
dd 0 // durability


Code:

label(tga.GetHeroLevel)
tga.GetHeroLevel:
mov rax,[GameDataMan]
mov rcx,[rax+10]
movsx eax,byte ptr [rcx+000000B3]
ret
int 3
int 3

label(tga.GetUninfusedWeapon)
tga.GetUninfusedWeapon:
mov eax,68DB8BAD
imul ecx
sar edx,0C
mov eax,edx
shr eax,1F
add edx,eax
imul eax,edx,00002710
ret

label(tga.GetBaseWeapon)
tga.GetBaseWeapon:
mov eax,51EB851F
imul ecx
sar edx,05
mov eax,edx
shr eax,1F
add edx,eax
imul eax,edx,64
ret
int 3
int 3
int 3

label(tga.GetWeaponLevel)
tga.GetWeaponLevel:
mov eax,51EB851F
imul ecx
sar edx,05
mov eax,edx
shr eax,1F
add edx,eax
imul eax,edx,64
sub ecx,eax
mov eax,ecx
ret
int 3
int 3
int 3

label(tga.IsSpecialWeapon)
tga.IsSpecialWeapon:
sub rsp,58
mov edx,ecx
mov rax,WeaponLookup_Call
lea rcx,[rsp+20]
call rax
mov rcx,[rsp+28]
xor eax,eax
test rcx,rcx
je tga.IsSpecialWeapon+2B
cmp dword ptr [rcx+74],-01
jne tga.IsSpecialWeapon+2B
mov al,01
add rsp,58
ret

label(tga.IsInfusableWeapon)
tga.IsInfusableWeapon:
sub rsp,58
call tga.GetUninfusedWeapon
lea rcx,[rsp+20]
lea edx,[rax+64]
mov rax,WeaponLookup_Call
call rax
cmp qword ptr [rsp+28],00
setne al
add rsp,58
ret
int 3

label(tga.IsWeapon)
tga.IsWeapon:
lea eax,[rcx-00070001]
cmp eax,0FF8FFFE
setbe al
ret
int 3

label(tga.IsAmmo)
tga.IsAmmo:
cmp ecx,00070000
setl al
ret
int 3
int 3

label(tga.IsConsumable)
tga.IsConsumable:
lea eax,[rcx-40000001]
cmp eax,000FFFFE
setbe al
ret
int 3

label(tga.AddableQuantity)
tga.AddableQuantity:
mov [rsp+08],ecx
sub rsp,28
lea rcx,[rsp+30]
mov rax,AddableQuantity_Call
call rax
add rsp,28
ret
int 3
int 3

label(tga.AdjustWeaponInfusion)
tga.AdjustWeaponInfusion:
db 40 53 // push rbx
sub rsp,20
mov ebx,ecx
call tga.IsInfusableWeapon
test al,al
je tga.AdjustWeaponInfusion+15
mov eax,ebx
jmp tga.AdjustWeaponInfusion+27
mov ecx,ebx
call tga.GetUninfusedWeapon
mov r8d,eax
call tga.GetWeaponLevel
add eax,r8d
add rsp,20
pop rbx
ret
int 3
int 3
int 3

label(tga.AdjustWeaponUpgrade)
tga.AdjustWeaponUpgrade:
mov [rsp+08],rbx
mov [rsp+10],rsi
push rdi
sub rsp,20
mov esi,ecx
call tga.GetHeroLevel
mov ecx,esi
mov ebx,eax
call tga.GetWeaponLevel
mov ecx,esi
mov edi,eax
call tga.IsSpecialWeapon
test al,al
je tga.AdjustWeaponUpgrade+35
mov eax,ebx
cdq
sub eax,edx
sar eax,1
mov ebx,eax
cmp ebx,edi
mov ecx,esi
cmovl edi,ebx
call tga.GetBaseWeapon
mov rbx,[rsp+30]
add eax,edi
mov rsi,[rsp+38]
add rsp,20
pop rdi
ret
int 3

label(tga.AdjustQuantity)
tga.AdjustQuantity:
db 40 53 // push rbx
sub rsp,20
mov ebx,edx
call tga.IsAmmo
test al,al
jne tga.AdjustQuantity+21
call tga.IsConsumable
test al,al
jne tga.AdjustQuantity+21
mov eax,00000001
jmp tga.AdjustQuantity+32
call tga.AddableQuantity
cmp ebx,-01
je tga.AdjustQuantity+32
cmp eax,ebx
cmovl ebx,eax
mov eax,ebx
add rsp,20
pop rbx
ret

label(tga.SpawnItems)
label(tga.SpawnItems_CreateItemBatch)
label(tga.SpawnItems_SetBatchItemCount)
label(tga.SpawnItems_REP_MOVSB64)
label(tga.SpawnItems_AdjustItemData)
label(tga.SpawnItems_AdjustQuantity)
label(tga.SpawnItems_Call)
label(tga.SpawnItems_Done)
tga.SpawnItems:
registerSymbol(tga.SpawnItems)
push rbx
push rsi
push rdi
push r14
push r15
sub rsp,30
movsxd r15,dword ptr [rcx]
lea rsi,[rcx+04]
tga.SpawnItems_CreateItemBatch:
mov rax,r15
mov cl,06
movsx rcx,cl
xor rdx,rdx
div rcx
test rdx,rdx
jne tga.SpawnItems_SetBatchItemCount
mov dl,06
movsx rdx,dl
test rax,rax
je tga.SpawnItems_Done
tga.SpawnItems_SetBatchItemCount:
mov r14,rdx
sub r15,r14
lea rdi,[ItemToSpawn+04]
mov [rdi-04],r14d
mov rax,r14
mov cl,0C
movsx rcx,cl
xor rdx,rdx
mul rcx
mov rcx,rax
tga.SpawnItems_REP_MOVSB64:
db F3 48 A4
lea rbx,[ItemToSpawn+04]
tga.SpawnItems_AdjustItemData:
mov ecx,[rbx]
call tga.IsWeapon
test al,al
je tga.SpawnItems_AdjustQuantity
call tga.AdjustWeaponInfusion
mov ecx,eax
call tga.AdjustWeaponUpgrade
mov [rbx],eax
mov ecx,eax
tga.SpawnItems_AdjustQuantity:
mov edx,[rbx+04]
call tga.AdjustQuantity
mov [rbx+04],eax
add rbx,0C
sub r14,01
jne tga.SpawnItems_AdjustItemData
tga.SpawnItems_Call:
mov rcx,MapItemMan
lea r8,[rsp+20]
lea rdx,[ItemToSpawn]
mov rax,ItemGib_Main_Call
mov rcx,[rcx]
call rax
test r15,r15
jne tga.SpawnItems_CreateItemBatch
tga.SpawnItems_Done:
xor rax,rax
mov cl,12
movsx rcx,cl
lea rdi,[ItemToSpawn]
rep stosq
mov dword ptr [ItemToSpawn],01
add rsp,30
pop r15
pop r14
pop rdi
pop rsi
pop rbx
ret
int 3


// void ItemGib()
BetterItemGib:
registersymbol(BetterItemGib)
sub rsp, 28
mov ecx, dword ptr [BetterItemGibData+4]
call tga.IsWeapon
test al, al
mov eax, dword ptr [BetterItemGibData+4]
jz short ItemGib_not_weapon
ItemGib_weapon:
// if "Hero level" selected, use max upgrade level, it will be adjusted
mov eax, dword ptr [BetterItemGibData+10]
mov ecx, #10
cmp eax, #-1
cmove eax, ecx
add eax, dword ptr [BetterItemGibData+4]
add eax, dword ptr [BetterItemGibData+C]
ItemGib_not_weapon:
mov dword ptr [ItemToSpawn+4], eax
mov eax, dword ptr [BetterItemGibData]
mov dword ptr [ItemToSpawn+8], eax
mov eax, dword ptr [BetterItemGibData+8]
mov dword ptr [ItemToSpawn+C], eax
lea rcx, [ItemToSpawn]
call tga.SpawnItems
add rsp, 28
ret
align 10 CC

{$lua}
if syntaxcheck then return end

ItemGib = {}

function ItemGib:new()
  writeInteger("BetterItemGibData", -1)--Quantity
  writeInteger('BetterItemGibData+08', -1)--Durability
  writeInteger("BetterItemGibData+0C", 0)--Infusion
  writeInteger("BetterItemGibData+10", -1)--Upgrade Level
end

function ItemGib:quantity(number)
  writeInteger("BetterItemGibData", number)--Quantity
end

function ItemGib:durability(number)
  writeInteger('BetterItemGibData+08', number)--Durability
end

function ItemGib:infusion(number)
  writeInteger("BetterItemGibData+0C", number)--Infusion
end

function ItemGib:upgradeLevel(number)
  writeInteger("BetterItemGibData+10", number)--Upgrade Level
end

--Singular ItemGib(Basic)
function ItemGib:spawnItem(ID)
  writeInteger("BetterItemGibData+04", ID) --ItemID
  --Spawns Item
  autoAssemble([[
    createthread(BetterItemGib)
  ]])
end

--Multi ItemGib(Basic)
function ItemGib:spawnMultiItems(idList)
  local itemCount = #idList
  for i = 1, itemCount do
    local itemId = idList[i]
    ItemGib:spawnItem(itemId)
    sleep(10)
  end
end

[DISABLE]
{$asm}
unregistersymbol(BetterItemGib)
unregistersymbol(BetterItemGibData)
unregisterSymbol(tga.SpawnItems)
dealloc(Code)
dealloc(Data)

</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1337092366</ID>
              <Description>"FOV"</Description>
              <Options moHideChildren="1"/>
              <Color>80FFFF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

aobscanmodule(fovAOB,DarkSoulsIII.exe,F3 0F 10 01 44 0F 2F E0) // should be unique
alloc(newmem,$1000,fovAOB)

label(code)
label(return)
label(fov)
registersymbol(fov)
newmem:

code:
  mov [fov],rcx
  movss xmm0,[rcx]
  comiss xmm12,xmm0
  jmp return


////

///
fov:
dq 0
///

fovAOB:
  jmp code
  nop
  nop
  nop
return:
registersymbol(fovAOB)

[DISABLE]

fovAOB:
  db F3 0F 10 01 44 0F 2F E0

unregistersymbol(fovAOB)
dealloc(newmem)
//
unregistersymbol(fov)
{
// ORIGINAL CODE - INJECTION POINT: "DarkSoulsIII.exe"+50F427

"DarkSoulsIII.exe"+50F3ED: F3 0F 10 86 78 01 00 00  -  movss xmm0,[rsi+00000178]
"DarkSoulsIII.exe"+50F3F5: F3 0F 10 9E 70 01 00 00  -  movss xmm3,[rsi+00000170]
"DarkSoulsIII.exe"+50F3FD: 0F 14 D8                 -  unpcklps xmm3,xmm0
"DarkSoulsIII.exe"+50F400: 0F 14 D1                 -  unpcklps xmm2,xmm1
"DarkSoulsIII.exe"+50F403: 0F 14 DA                 -  unpcklps xmm3,xmm2
"DarkSoulsIII.exe"+50F406: 0F 29 9D 50 01 00 00     -  movaps [rbp+00000150],xmm3
"DarkSoulsIII.exe"+50F40D: 66 0F 7F 9E 70 01 00 00  -  movdqa [rsi+00000170],xmm3
"DarkSoulsIII.exe"+50F415: C7 45 B0 00 00 34 43     -  mov [rbp-50],43340000
"DarkSoulsIII.exe"+50F41C: C7 45 0C 00 00 00 00     -  mov [rbp+0C],00000000
"DarkSoulsIII.exe"+50F423: 48 83 C1 14              -  add rcx,14
// ---------- INJECTING HERE ----------
"DarkSoulsIII.exe"+50F427: F3 0F 10 01              -  movss xmm0,[rcx]
"DarkSoulsIII.exe"+50F42B: 44 0F 2F E0              -  comiss xmm12,xmm0
// ---------- DONE INJECTING  ----------
"DarkSoulsIII.exe"+50F42F: 76 06                    -  jna DarkSoulsIII.exe+50F437
"DarkSoulsIII.exe"+50F431: 48 8D 45 0C              -  lea rax,[rbp+0C]
"DarkSoulsIII.exe"+50F435: EB 0F                    -  jmp DarkSoulsIII.exe+50F446
"DarkSoulsIII.exe"+50F437: 48 8D 45 B0              -  lea rax,[rbp-50]
"DarkSoulsIII.exe"+50F43B: 0F 2F 05 D6 1F 7E 03     -  comiss xmm0,[DarkSoulsIII.exe+3CF1418]
"DarkSoulsIII.exe"+50F442: 48 0F 46 C1              -  cmovbe rax,rcx
"DarkSoulsIII.exe"+50F446: F3 0F 10 08              -  movss xmm1,[rax]
"DarkSoulsIII.exe"+50F44A: F3 0F 59 CC              -  mulss xmm1,xmm4
"DarkSoulsIII.exe"+50F44E: F3 0F 5C 4E 50           -  subss xmm1,[rsi+50]
"DarkSoulsIII.exe"+50F453: F3 0F 59 8E D0 03 00 00  -  mulss xmm1,[rsi+000003D0]
}



</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1337092367</ID>
                  <Description>"FOV"</Description>
                  <Color>0000FF</Color>
                  <VariableType>Float</VariableType>
                  <Address>fov</Address>
                  <Offsets>
                    <Offset>0</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1337263901</ID>
              <Description>"Table Maintainance"</Description>
              <Options moHideChildren="1"/>
              <Color>80FF80</Color>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>1337197837</ID>
                  <Description>"Get Rid Of All Hotkeys"</Description>
                  <Options moHideChildren="1"/>
                  <Color>80FFFF</Color>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1337197833</ID>
                      <Description>"No Hotkeys  Bitch"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{
    Description : Mass Removes All Hotkeys In A Table Easily For You.
    Author:: Jouta Kujo -- A giga-chad.
    Date recieved : 11/23/21
}

[ENABLE]

{$lua}
if not syntaxcheck then

local al = getAddressList()
local get_mr = al.getMemoryRecord
for i=0, al.Count-1 do
    local mr = get_mr(i)
    for h=mr.HotkeyCount-1, 0, -1 do
      mr.Hotkey[h].destroy()
    end
end
end

[DISABLE]

{$lua}
if not syntaxcheck then
end
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1337198681</ID>
                  <Description>"SaveTable (Game Must Be Open)"</Description>
                  <Color>00FF80</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{
    Quick Table Save
    Made By DiamondEnderman
    For People Who Can't Be Bothered To Press 2 Buttons and Want to Only Press 1
}
[ENABLE]
{$lua}
if syntaxcheck then return end
autoDisable(memrec)

local fileName = "EzTable1.5.0.CT" -- FileName For Your Table

saveTable(fileName)

[DISABLE]
{$lua}
if syntaxcheck then return end
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>animationFuncID</Name>
      <Address>14B0B490000</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
